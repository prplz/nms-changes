--- a/net/minecraft/server/DedicatedServer.java
+++ b/net/minecraft/server/DedicatedServer.java
@@ -21,7 +21,7 @@
     private final List<ServerCommand> l = Collections.synchronizedList(Lists.newArrayList());
     private RemoteStatusListener m;
     private RemoteControlListener n;
-    private PropertyManager propertyManager;
+    public PropertyManager propertyManager;
     private EULA p;
     private boolean generateStructures;
     private WorldSettings.EnumGamemode r;
@@ -67,7 +67,7 @@
 
         thread.setDaemon(true);
         thread.start();
-        DedicatedServer.LOGGER.info("Starting minecraft server version 1.8.3");
+        DedicatedServer.LOGGER.info("Starting minecraft server version 1.8.8");
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
             DedicatedServer.LOGGER.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
         }
@@ -80,7 +80,7 @@
             this.p.b();
             return false;
         } else {
-            if (this.S()) {
+            if (this.T()) {
                 this.c("127.0.0.1");
             } else {
                 this.setOnlineMode(this.propertyManager.getBoolean("online-mode", true));
@@ -112,16 +112,16 @@
                 inetaddress = InetAddress.getByName(this.getServerIp());
             }
 
-            if (this.Q() < 0) {
+            if (this.R() < 0) {
                 this.setPort(this.propertyManager.getInt("server-port", 25565));
             }
 
             DedicatedServer.LOGGER.info("Generating keypair");
             this.a(MinecraftEncryption.b());
-            DedicatedServer.LOGGER.info("Starting Minecraft server on " + (this.getServerIp().length() == 0 ? "*" : this.getServerIp()) + ":" + this.Q());
+            DedicatedServer.LOGGER.info("Starting Minecraft server on " + (this.getServerIp().length() == 0 ? "*" : this.getServerIp()) + ":" + this.R());
 
             try {
-                this.ap().a(inetaddress, this.Q());
+                this.aq().a(inetaddress, this.R());
             } catch (IOException ioexception) {
                 DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
                 DedicatedServer.LOGGER.warn("The exception was: {}", new Object[] { ioexception.toString()});
@@ -136,7 +136,7 @@
                 DedicatedServer.LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
             }
 
-            if (this.aQ()) {
+            if (this.aR()) {
                 this.getUserCache().c();
             }
 
@@ -146,7 +146,7 @@
                 this.a((PlayerList) (new DedicatedPlayerList(this)));
                 long j = System.nanoTime();
 
-                if (this.T() == null) {
+                if (this.U() == null) {
                     this.setWorld(this.propertyManager.getString("level-name", "world"));
                 }
 
@@ -173,17 +173,17 @@
                     worldtype = WorldType.NORMAL;
                 }
 
-                this.aA();
+                this.aB();
                 this.getEnableCommandBlock();
                 this.p();
                 this.getSnooperEnabled();
-                this.aJ();
+                this.aK();
                 this.c(this.propertyManager.getInt("max-build-height", 256));
                 this.c((this.getMaxBuildHeight() + 8) / 16 * 16);
                 this.c(MathHelper.clamp(this.getMaxBuildHeight(), 64, 256));
                 this.propertyManager.setProperty("max-build-height", Integer.valueOf(this.getMaxBuildHeight()));
-                DedicatedServer.LOGGER.info("Preparing level \"" + this.T() + "\"");
-                this.a(this.T(), this.T(), k, worldtype, s2);
+                DedicatedServer.LOGGER.info("Preparing level \"" + this.U() + "\"");
+                this.a(this.U(), this.U(), k, worldtype, s2);
                 long i1 = System.nanoTime() - j;
                 String s3 = String.format("%.3fs", new Object[] { Double.valueOf((double) i1 / 1.0E9D)});
 
@@ -200,7 +200,7 @@
                     this.n.a();
                 }
 
-                if (this.aR() > 0L) {
+                if (this.aS() > 0L) {
                     Thread thread1 = new Thread(new ThreadWatchdog(this));
 
                     thread1.setName("Server Watchdog");
@@ -227,7 +227,7 @@
     }
 
     public EnumDifficulty getDifficulty() {
-        return EnumDifficulty.getById(this.propertyManager.getInt("difficulty", 1));
+        return EnumDifficulty.getById(this.propertyManager.getInt("difficulty", EnumDifficulty.NORMAL.a()));
     }
 
     public boolean isHardcore() {
@@ -261,13 +261,13 @@
         return crashreport;
     }
 
-    protected void y() {
+    protected void z() {
         System.exit(0);
     }
 
-    protected void A() {
-        super.A();
-        this.aN();
+    protected void B() {
+        super.B();
+        this.aO();
     }
 
     public boolean getAllowNether() {
@@ -279,8 +279,8 @@
     }
 
     public void a(MojangStatisticsGenerator mojangstatisticsgenerator) {
-        mojangstatisticsgenerator.a("whitelist_enabled", Boolean.valueOf(this.aO().getHasWhitelist()));
-        mojangstatisticsgenerator.a("whitelist_count", Integer.valueOf(this.aO().getWhitelisted().length));
+        mojangstatisticsgenerator.a("whitelist_enabled", Boolean.valueOf(this.aP().getHasWhitelist()));
+        mojangstatisticsgenerator.a("whitelist_count", Integer.valueOf(this.aP().getWhitelisted().length));
         super.a(mojangstatisticsgenerator);
     }
 
@@ -292,7 +292,7 @@
         this.l.add(new ServerCommand(s, icommandlistener));
     }
 
-    public void aN() {
+    public void aO() {
         while (!this.l.isEmpty()) {
             ServerCommand servercommand = (ServerCommand) this.l.remove(0);
 
@@ -301,15 +301,15 @@
 
     }
 
-    public boolean ad() {
+    public boolean ae() {
         return true;
     }
 
-    public boolean ah() {
+    public boolean ai() {
         return this.propertyManager.getBoolean("use-native-transport", true);
     }
 
-    public DedicatedPlayerList aO() {
+    public DedicatedPlayerList aP() {
         return (DedicatedPlayerList) super.getPlayerList();
     }
 
@@ -339,12 +339,12 @@
         return file != null ? file.getAbsolutePath() : "No settings file";
     }
 
-    public void aP() {
+    public void aQ() {
         ServerGUI.a(this);
         this.s = true;
     }
 
-    public boolean ar() {
+    public boolean as() {
         return this.s;
     }
 
@@ -363,9 +363,9 @@
     public boolean a(World world, BlockPosition blockposition, EntityHuman entityhuman) {
         if (world.worldProvider.getDimension() != 0) {
             return false;
-        } else if (this.aO().getOPs().isEmpty()) {
+        } else if (this.aP().getOPs().isEmpty()) {
             return false;
-        } else if (this.aO().isOp(entityhuman.getProfile())) {
+        } else if (this.aP().isOp(entityhuman.getProfile())) {
             return false;
         } else if (this.getSpawnProtection() <= 0) {
             return false;
@@ -393,27 +393,31 @@
         return this.propertyManager.getBoolean("broadcast-rcon-to-ops", true);
     }
 
-    public boolean aA() {
+    public boolean r() {
+        return this.propertyManager.getBoolean("broadcast-console-to-ops", true);
+    }
+
+    public boolean aB() {
         return this.propertyManager.getBoolean("announce-player-achievements", true);
     }
 
-    public int aH() {
-        int i = this.propertyManager.getInt("max-world-size", super.aH());
+    public int aI() {
+        int i = this.propertyManager.getInt("max-world-size", super.aI());
 
         if (i < 1) {
             i = 1;
-        } else if (i > super.aH()) {
-            i = super.aH();
+        } else if (i > super.aI()) {
+            i = super.aI();
         }
 
         return i;
     }
 
-    public int aJ() {
-        return this.propertyManager.getInt("network-compression-threshold", super.aJ());
+    public int aK() {
+        return this.propertyManager.getInt("network-compression-threshold", super.aK());
     }
 
-    protected boolean aQ() {
+    protected boolean aR() {
         boolean flag = false;
 
         int i;
@@ -421,7 +425,7 @@
         for (i = 0; !flag && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the user banlist, retrying in a few seconds");
-                this.aT();
+                this.aU();
             }
 
             flag = NameReferencingFileConverter.a((MinecraftServer) this);
@@ -432,7 +436,7 @@
         for (i = 0; !flag1 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the ip banlist, retrying in a few seconds");
-                this.aT();
+                this.aU();
             }
 
             flag1 = NameReferencingFileConverter.b((MinecraftServer) this);
@@ -443,7 +447,7 @@
         for (i = 0; !flag2 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the op list, retrying in a few seconds");
-                this.aT();
+                this.aU();
             }
 
             flag2 = NameReferencingFileConverter.c((MinecraftServer) this);
@@ -454,7 +458,7 @@
         for (i = 0; !flag3 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the whitelist, retrying in a few seconds");
-                this.aT();
+                this.aU();
             }
 
             flag3 = NameReferencingFileConverter.d((MinecraftServer) this);
@@ -465,7 +469,7 @@
         for (i = 0; !flag4 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the player save files, retrying in a few seconds");
-                this.aT();
+                this.aU();
             }
 
             flag4 = NameReferencingFileConverter.a(this, this.propertyManager);
@@ -474,7 +478,7 @@
         return flag || flag1 || flag2 || flag3 || flag4;
     }
 
-    private void aT() {
+    private void aU() {
         try {
             Thread.sleep(5000L);
         } catch (InterruptedException interruptedexception) {
@@ -482,7 +486,7 @@
         }
     }
 
-    public long aR() {
+    public long aS() {
         return this.propertyManager.getLong("max-tick-time", TimeUnit.MINUTES.toMillis(1L));
     }
 
@@ -497,6 +501,6 @@
     }
 
     public PlayerList getPlayerList() {
-        return this.aO();
+        return this.aP();
     }
 }
