--- a/net/minecraft/server/CommandFill.java
+++ b/net/minecraft/server/CommandFill.java
@@ -32,24 +32,26 @@
             BlockPosition blockposition = a(icommandlistener, astring, 0, false);
             BlockPosition blockposition1 = a(icommandlistener, astring, 3, false);
             Block block = CommandAbstract.b(icommandlistener, astring[6]);
-            int i = 0;
+            IBlockData iblockdata;
 
             if (astring.length >= 8) {
-                i = a(astring[7], 0, 15);
+                iblockdata = a(block, astring[7]);
+            } else {
+                iblockdata = block.getBlockData();
             }
 
             BlockPosition blockposition2 = new BlockPosition(Math.min(blockposition.getX(), blockposition1.getX()), Math.min(blockposition.getY(), blockposition1.getY()), Math.min(blockposition.getZ(), blockposition1.getZ()));
             BlockPosition blockposition3 = new BlockPosition(Math.max(blockposition.getX(), blockposition1.getX()), Math.max(blockposition.getY(), blockposition1.getY()), Math.max(blockposition.getZ(), blockposition1.getZ()));
-            int j = (blockposition3.getX() - blockposition2.getX() + 1) * (blockposition3.getY() - blockposition2.getY() + 1) * (blockposition3.getZ() - blockposition2.getZ() + 1);
+            int i = (blockposition3.getX() - blockposition2.getX() + 1) * (blockposition3.getY() - blockposition2.getY() + 1) * (blockposition3.getZ() - blockposition2.getZ() + 1);
 
-            if (j > '\u8000') {
-                throw new CommandException("commands.fill.tooManyBlocks", new Object[] { Integer.valueOf(j), Integer.valueOf('\u8000')});
+            if (i > '\u8000') {
+                throw new CommandException("commands.fill.tooManyBlocks", new Object[] { Integer.valueOf(i), Integer.valueOf('\u8000')});
             } else if (blockposition2.getY() >= 0 && blockposition3.getY() < 256) {
                 World world = icommandlistener.getWorld();
 
-                for (int k = blockposition2.getZ(); k <= blockposition3.getZ(); k += 16) {
-                    for (int l = blockposition2.getX(); l <= blockposition3.getX(); l += 16) {
-                        if (!world.isLoaded(new BlockPosition(l, blockposition3.getY() - blockposition2.getY(), k))) {
+                for (int j = blockposition2.getZ(); j <= blockposition3.getZ(); j += 16) {
+                    for (int k = blockposition2.getX(); k <= blockposition3.getX(); k += 16) {
+                        if (!world.isLoaded(new BlockPosition(k, blockposition3.getY() - blockposition2.getY(), j))) {
                             throw new CommandException("commands.fill.outOfWorld", new Object[0]);
                         }
                     }
@@ -71,13 +73,12 @@
 
                 ArrayList arraylist = Lists.newArrayList();
 
-                j = 0;
+                i = 0;
 
-                for (int i1 = blockposition2.getZ(); i1 <= blockposition3.getZ(); ++i1) {
-                    for (int j1 = blockposition2.getY(); j1 <= blockposition3.getY(); ++j1) {
-                        for (int k1 = blockposition2.getX(); k1 <= blockposition3.getX(); ++k1) {
-                            BlockPosition blockposition4 = new BlockPosition(k1, j1, i1);
-                            IBlockData iblockdata;
+                for (int l = blockposition2.getZ(); l <= blockposition3.getZ(); ++l) {
+                    for (int i1 = blockposition2.getY(); i1 <= blockposition3.getY(); ++i1) {
+                        for (int j1 = blockposition2.getX(); j1 <= blockposition3.getX(); ++j1) {
+                            BlockPosition blockposition4 = new BlockPosition(j1, i1, l);
 
                             if (astring.length >= 9) {
                                 if (!"outline".equals(astring[8]) && !"hollow".equals(astring[8])) {
@@ -87,25 +88,14 @@
                                         if (!world.isEmpty(blockposition4)) {
                                             continue;
                                         }
-                                    } else if ("replace".equals(astring[8]) && !block.isTileEntity()) {
-                                        if (astring.length > 9) {
-                                            Block block1 = CommandAbstract.b(icommandlistener, astring[9]);
-
-                                            if (world.getType(blockposition4).getBlock() != block1) {
-                                                continue;
-                                            }
-                                        }
+                                    } else if ("replace".equals(astring[8]) && !block.isTileEntity() && astring.length > 9) {
+                                        Block block1 = CommandAbstract.b(icommandlistener, astring[9]);
 
-                                        if (astring.length > 10) {
-                                            int l1 = CommandAbstract.a(astring[10]);
-
-                                            iblockdata = world.getType(blockposition4);
-                                            if (iblockdata.getBlock().toLegacyData(iblockdata) != l1) {
-                                                continue;
-                                            }
+                                        if (world.getType(blockposition4).getBlock() != block1 || astring.length > 10 && !"-1".equals(astring[10]) && !"*".equals(astring[10]) && !CommandAbstract.b(block1, astring[10]).apply(world.getType(blockposition4))) {
+                                            continue;
                                         }
                                     }
-                                } else if (k1 != blockposition2.getX() && k1 != blockposition3.getX() && j1 != blockposition2.getY() && j1 != blockposition3.getY() && i1 != blockposition2.getZ() && i1 != blockposition3.getZ()) {
+                                } else if (j1 != blockposition2.getX() && j1 != blockposition3.getX() && i1 != blockposition2.getY() && i1 != blockposition3.getY() && l != blockposition2.getZ() && l != blockposition3.getZ()) {
                                     if ("hollow".equals(astring[8])) {
                                         world.setTypeAndData(blockposition4, Blocks.AIR.getBlockData(), 2);
                                         arraylist.add(blockposition4);
@@ -118,16 +108,15 @@
 
                             if (tileentity != null) {
                                 if (tileentity instanceof IInventory) {
-                                    ((IInventory) tileentity).l();
+                                    ((IInventory) tileentity).clear();
                                 }
 
                                 world.setTypeAndData(blockposition4, Blocks.BARRIER.getBlockData(), block == Blocks.BARRIER ? 2 : 4);
                             }
 
-                            iblockdata = block.fromLegacyData(i);
                             if (world.setTypeAndData(blockposition4, iblockdata, 2)) {
                                 arraylist.add(blockposition4);
-                                ++j;
+                                ++i;
                                 if (flag) {
                                     TileEntity tileentity1 = world.getTileEntity(blockposition4);
 
@@ -149,14 +138,14 @@
                     BlockPosition blockposition5 = (BlockPosition) iterator.next();
                     Block block2 = world.getType(blockposition5).getBlock();
 
-                    world.update(blockposition5, block2);
+                    world.update(blockposition5, block2, false);
                 }
 
-                if (j <= 0) {
+                if (i <= 0) {
                     throw new CommandException("commands.fill.failed", new Object[0]);
                 } else {
-                    icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_BLOCKS, j);
-                    a(icommandlistener, (ICommand) this, "commands.fill.success", new Object[] { Integer.valueOf(j)});
+                    icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_BLOCKS, i);
+                    a(icommandlistener, (ICommand) this, "commands.fill.success", new Object[] { Integer.valueOf(i)});
                 }
             } else {
                 throw new CommandException("commands.fill.outOfWorld", new Object[0]);
