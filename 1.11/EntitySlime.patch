--- a/net/minecraft/server/EntitySlime.java
+++ b/net/minecraft/server/EntitySlime.java
@@ -4,11 +4,11 @@
 
 public class EntitySlime extends EntityInsentient implements IMonster {
 
-    private static final DataWatcherObject<Integer> bv = DataWatcher.a(EntitySlime.class, DataWatcherRegistry.b);
+    private static final DataWatcherObject<Integer> bu = DataWatcher.a(EntitySlime.class, DataWatcherRegistry.b);
     public float a;
     public float b;
     public float c;
-    private boolean bw;
+    private boolean bv;
 
     public EntitySlime(World world) {
         super(world);
@@ -26,31 +26,34 @@
 
     protected void i() {
         super.i();
-        this.datawatcher.register(EntitySlime.bv, Integer.valueOf(1));
+        this.datawatcher.register(EntitySlime.bu, Integer.valueOf(1));
     }
 
-    public void setSize(int i) {
-        this.datawatcher.set(EntitySlime.bv, Integer.valueOf(i));
+    public void setSize(int i, boolean flag) {
+        this.datawatcher.set(EntitySlime.bu, Integer.valueOf(i));
         this.setSize(0.51000005F * (float) i, 0.51000005F * (float) i);
         this.setPosition(this.locX, this.locY, this.locZ);
         this.getAttributeInstance(GenericAttributes.maxHealth).setValue((double) (i * i));
         this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue((double) (0.2F + 0.1F * (float) i));
-        this.setHealth(this.getMaxHealth());
+        if (flag) {
+            this.setHealth(this.getMaxHealth());
+        }
+
         this.b_ = i;
     }
 
     public int getSize() {
-        return ((Integer) this.datawatcher.get(EntitySlime.bv)).intValue();
+        return ((Integer) this.datawatcher.get(EntitySlime.bu)).intValue();
     }
 
     public static void c(DataConverterManager dataconvertermanager) {
-        EntityInsentient.a(dataconvertermanager, "Slime");
+        EntityInsentient.a(dataconvertermanager, EntitySlime.class);
     }
 
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
         nbttagcompound.setInt("Size", this.getSize() - 1);
-        nbttagcompound.setBoolean("wasOnGround", this.bw);
+        nbttagcompound.setBoolean("wasOnGround", this.bv);
     }
 
     public void a(NBTTagCompound nbttagcompound) {
@@ -61,11 +64,11 @@
             i = 0;
         }
 
-        this.setSize(i + 1);
-        this.bw = nbttagcompound.getBoolean("wasOnGround");
+        this.setSize(i + 1, false);
+        this.bv = nbttagcompound.getBoolean("wasOnGround");
     }
 
-    public boolean dg() {
+    public boolean di() {
         return this.getSize() <= 1;
     }
 
@@ -73,15 +76,15 @@
         return EnumParticle.SLIME;
     }
 
-    public void m() {
+    public void A_() {
         if (!this.world.isClientSide && this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.getSize() > 0) {
             this.dead = true;
         }
 
         this.b += (this.a - this.b) * 0.5F;
         this.c = this.b;
-        super.m();
-        if (this.onGround && !this.bw) {
+        super.A_();
+        if (this.onGround && !this.bv) {
             int i = this.getSize();
 
             for (int j = 0; j < i * 8; ++j) {
@@ -97,35 +100,35 @@
                 world.addParticle(enumparticle, d0, this.getBoundingBox().b, d1, 0.0D, 0.0D, 0.0D, new int[0]);
             }
 
-            this.a(this.dd(), this.ch(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) / 0.8F);
+            this.a(this.df(), this.ci(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) / 0.8F);
             this.a = -0.5F;
-        } else if (!this.onGround && this.bw) {
+        } else if (!this.onGround && this.bv) {
             this.a = 1.0F;
         }
 
-        this.bw = this.onGround;
-        this.da();
+        this.bv = this.onGround;
+        this.dc();
     }
 
-    protected void da() {
+    protected void dc() {
         this.a *= 0.6F;
     }
 
-    protected int cZ() {
+    protected int db() {
         return this.random.nextInt(20) + 10;
     }
 
-    protected EntitySlime cY() {
+    protected EntitySlime da() {
         return new EntitySlime(this.world);
     }
 
     public void a(DataWatcherObject<?> datawatcherobject) {
-        if (EntitySlime.bv.equals(datawatcherobject)) {
+        if (EntitySlime.bu.equals(datawatcherobject)) {
             int i = this.getSize();
 
             this.setSize(0.51000005F * (float) i, 0.51000005F * (float) i);
-            this.yaw = this.aQ;
-            this.aO = this.aQ;
+            this.yaw = this.aP;
+            this.aN = this.aP;
             if (this.isInWater() && this.random.nextInt(20) == 0) {
                 this.al();
             }
@@ -143,17 +146,17 @@
             for (int k = 0; k < j; ++k) {
                 float f = ((float) (k % 2) - 0.5F) * (float) i / 4.0F;
                 float f1 = ((float) (k / 2) - 0.5F) * (float) i / 4.0F;
-                EntitySlime entityslime = this.cY();
+                EntitySlime entityslime = this.da();
 
                 if (this.hasCustomName()) {
                     entityslime.setCustomName(this.getCustomName());
                 }
 
                 if (this.isPersistent()) {
-                    entityslime.cQ();
+                    entityslime.cS();
                 }
 
-                entityslime.setSize(i / 2);
+                entityslime.setSize(i / 2, true);
                 entityslime.setPositionRotation(this.locX + (double) f, this.locY + 0.5D, this.locZ + (double) f1, this.random.nextFloat() * 360.0F, 0.0F);
                 this.world.addEntity(entityslime);
             }
@@ -164,24 +167,24 @@
 
     public void collide(Entity entity) {
         super.collide(entity);
-        if (entity instanceof EntityIronGolem && this.db()) {
-            this.d((EntityLiving) entity);
+        if (entity instanceof EntityIronGolem && this.dd()) {
+            this.e((EntityLiving) entity);
         }
 
     }
 
     public void d(EntityHuman entityhuman) {
-        if (this.db()) {
-            this.d((EntityLiving) entityhuman);
+        if (this.dd()) {
+            this.e((EntityLiving) entityhuman);
         }
 
     }
 
-    protected void d(EntityLiving entityliving) {
+    protected void e(EntityLiving entityliving) {
         int i = this.getSize();
 
-        if (this.hasLineOfSight(entityliving) && this.h(entityliving) < 0.6D * (double) i * 0.6D * (double) i && entityliving.damageEntity(DamageSource.mobAttack(this), (float) this.dc())) {
-            this.a(SoundEffects.fB, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+        if (this.hasLineOfSight(entityliving) && this.h(entityliving) < 0.6D * (double) i * 0.6D * (double) i && entityliving.damageEntity(DamageSource.mobAttack(this), (float) this.de())) {
+            this.a(SoundEffects.fX, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
             this.a((EntityLiving) this, (Entity) entityliving);
         }
 
@@ -191,24 +194,24 @@
         return 0.625F * this.length;
     }
 
-    protected boolean db() {
-        return !this.dg();
+    protected boolean dd() {
+        return !this.di();
     }
 
-    protected int dc() {
+    protected int de() {
         return this.getSize();
     }
 
-    protected SoundEffect bV() {
-        return this.dg() ? SoundEffects.fP : SoundEffects.fG;
+    protected SoundEffect bW() {
+        return this.di() ? SoundEffects.gl : SoundEffects.gc;
     }
 
-    protected SoundEffect bW() {
-        return this.dg() ? SoundEffects.fO : SoundEffects.fD;
+    protected SoundEffect bX() {
+        return this.di() ? SoundEffects.gk : SoundEffects.fZ;
     }
 
-    protected SoundEffect dd() {
-        return this.dg() ? SoundEffects.fR : SoundEffects.fJ;
+    protected SoundEffect df() {
+        return this.di() ? SoundEffects.gn : SoundEffects.gf;
     }
 
     protected Item getLoot() {
@@ -217,10 +220,10 @@
 
     @Nullable
     protected MinecraftKey J() {
-        return this.getSize() == 1 ? LootTables.ae : LootTables.a;
+        return this.getSize() == 1 ? LootTables.ah : LootTables.a;
     }
 
-    public boolean cK() {
+    public boolean cM() {
         BlockPosition blockposition = new BlockPosition(MathHelper.floor(this.locX), 0, MathHelper.floor(this.locZ));
         Chunk chunk = this.world.getChunkAtWorldCoords(blockposition);
 
@@ -231,11 +234,11 @@
                 BiomeBase biomebase = this.world.getBiome(blockposition);
 
                 if (biomebase == Biomes.h && this.locY > 50.0D && this.locY < 70.0D && this.random.nextFloat() < 0.5F && this.random.nextFloat() < this.world.E() && this.world.getLightLevel(new BlockPosition(this)) <= this.random.nextInt(8)) {
-                    return super.cK();
+                    return super.cM();
                 }
 
                 if (this.random.nextInt(10) == 0 && chunk.a(987234911L).nextInt(10) == 0 && this.locY < 40.0D) {
-                    return super.cK();
+                    return super.cM();
                 }
             }
 
@@ -243,7 +246,7 @@
         }
     }
 
-    protected float ch() {
+    protected float ci() {
         return 0.4F * (float) this.getSize();
     }
 
@@ -251,11 +254,11 @@
         return 0;
     }
 
-    protected boolean dh() {
+    protected boolean dj() {
         return this.getSize() > 0;
     }
 
-    protected void cl() {
+    protected void cm() {
         this.motY = 0.41999998688697815D;
         this.impulse = true;
     }
@@ -270,12 +273,12 @@
 
         int j = 1 << i;
 
-        this.setSize(j);
+        this.setSize(j, true);
         return super.prepare(difficultydamagescaler, groupdataentity);
     }
 
-    protected SoundEffect de() {
-        return this.dg() ? SoundEffects.fQ : SoundEffects.fH;
+    protected SoundEffect dg() {
+        return this.di() ? SoundEffects.gm : SoundEffects.gd;
     }
 
     static class PathfinderGoalSlimeIdle extends PathfinderGoal {
@@ -373,7 +376,7 @@
 
         public void e() {
             this.a.a((Entity) this.a.getGoalTarget(), 10.0F, 10.0F);
-            ((EntitySlime.ControllerMoveSlime) this.a.getControllerMove()).a(this.a.yaw, this.a.db());
+            ((EntitySlime.ControllerMoveSlime) this.a.getControllerMove()).a(this.a.yaw, this.a.dd());
         }
     }
 
@@ -402,8 +405,8 @@
 
         public void c() {
             this.a.yaw = this.a(this.a.yaw, this.i, 90.0F);
-            this.a.aQ = this.a.yaw;
-            this.a.aO = this.a.yaw;
+            this.a.aP = this.a.yaw;
+            this.a.aN = this.a.yaw;
             if (this.h != ControllerMove.Operation.MOVE_TO) {
                 this.a.o(0.0F);
             } else {
@@ -411,18 +414,18 @@
                 if (this.a.onGround) {
                     this.a.l((float) (this.e * this.a.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getValue()));
                     if (this.j-- <= 0) {
-                        this.j = this.k.cZ();
+                        this.j = this.k.db();
                         if (this.l) {
                             this.j /= 3;
                         }
 
                         this.k.getControllerJump().a();
-                        if (this.k.dh()) {
-                            this.k.a(this.k.de(), this.k.ch(), ((this.k.getRandom().nextFloat() - this.k.getRandom().nextFloat()) * 0.2F + 1.0F) * 0.8F);
+                        if (this.k.dj()) {
+                            this.k.a(this.k.dg(), this.k.ci(), ((this.k.getRandom().nextFloat() - this.k.getRandom().nextFloat()) * 0.2F + 1.0F) * 0.8F);
                         }
                     } else {
+                        this.k.be = 0.0F;
                         this.k.bf = 0.0F;
-                        this.k.bg = 0.0F;
                         this.a.l(0.0F);
                     }
                 } else {
