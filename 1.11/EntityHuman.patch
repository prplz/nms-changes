--- a/net/minecraft/server/EntityHuman.java
+++ b/net/minecraft/server/EntityHuman.java
@@ -3,7 +3,6 @@
 import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
@@ -14,28 +13,28 @@
 
     private static final DataWatcherObject<Float> a = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.c);
     private static final DataWatcherObject<Integer> b = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.b);
+    protected static final DataWatcherObject<Byte> bq = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);
     protected static final DataWatcherObject<Byte> br = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);
-    protected static final DataWatcherObject<Byte> bs = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);
     public PlayerInventory inventory = new PlayerInventory(this);
     private InventoryEnderChest enderChest = new InventoryEnderChest();
     public Container defaultContainer;
     public Container activeContainer;
     protected FoodMetaData foodData = new FoodMetaData();
-    protected int bx;
+    protected int bw;
+    public float bx;
     public float by;
-    public float bz;
-    public int bA;
+    public int bz;
+    public double bA;
     public double bB;
     public double bC;
     public double bD;
     public double bE;
     public double bF;
-    public double bG;
     public boolean sleeping;
     public BlockPosition bedPosition;
     public int sleepTicks;
+    public float bI;
     public float bJ;
-    public float bK;
     private BlockPosition e;
     private boolean f;
     private BlockPosition g;
@@ -44,12 +43,13 @@
     public int expTotal;
     public float exp;
     private int h;
-    protected float bP = 0.1F;
-    protected float bQ = 0.02F;
-    private int bS;
-    private final GameProfile bT;
-    private ItemStack bV;
-    private final ItemCooldown bW = this.l();
+    protected float bO = 0.1F;
+    protected float bP = 0.02F;
+    private int bR;
+    private final GameProfile bS;
+    private ItemStack bU;
+    private final ItemCooldown bV;
+    @Nullable
     public EntityFishingHook hookedFish;
 
     protected ItemCooldown l() {
@@ -58,15 +58,16 @@
 
     public EntityHuman(World world, GameProfile gameprofile) {
         super(world);
+        this.bU = ItemStack.a;
+        this.bV = this.l();
         this.a(a(gameprofile));
-        this.bT = gameprofile;
+        this.bS = gameprofile;
         this.defaultContainer = new ContainerPlayer(this.inventory, !world.isClientSide, this);
         this.activeContainer = this.defaultContainer;
         BlockPosition blockposition = world.getSpawn();
 
         this.setPositionRotation((double) blockposition.getX() + 0.5D, (double) (blockposition.getY() + 1), (double) blockposition.getZ() + 0.5D, 0.0F, 0.0F);
-        this.bb = 180.0F;
-        this.maxFireTicks = 20;
+        this.ba = 180.0F;
     }
 
     protected void initAttributes() {
@@ -81,18 +82,18 @@
         super.i();
         this.datawatcher.register(EntityHuman.a, Float.valueOf(0.0F));
         this.datawatcher.register(EntityHuman.b, Integer.valueOf(0));
-        this.datawatcher.register(EntityHuman.br, Byte.valueOf((byte) 0));
-        this.datawatcher.register(EntityHuman.bs, Byte.valueOf((byte) 1));
+        this.datawatcher.register(EntityHuman.bq, Byte.valueOf((byte) 0));
+        this.datawatcher.register(EntityHuman.br, Byte.valueOf((byte) 1));
     }
 
-    public void m() {
+    public void A_() {
         this.noclip = this.isSpectator();
         if (this.isSpectator()) {
             this.onGround = false;
         }
 
-        if (this.bA > 0) {
-            --this.bA;
+        if (this.bz > 0) {
+            --this.bz;
         }
 
         if (this.isSleeping()) {
@@ -115,7 +116,7 @@
             }
         }
 
-        super.m();
+        super.A_();
         if (!this.world.isClientSide && this.activeContainer != null && !this.activeContainer.a(this)) {
             this.closeInventory();
             this.activeContainer = this.defaultContainer;
@@ -150,70 +151,70 @@
             this.setPosition(d0, this.locY, d1);
         }
 
-        ++this.aF;
+        ++this.aE;
         ItemStack itemstack = this.getItemInMainHand();
 
-        if (!ItemStack.matches(this.bV, itemstack)) {
-            if (!ItemStack.d(this.bV, itemstack)) {
-                this.de();
+        if (!ItemStack.matches(this.bU, itemstack)) {
+            if (!ItemStack.d(this.bU, itemstack)) {
+                this.dh();
             }
 
-            this.bV = itemstack == null ? null : itemstack.cloneItemStack();
+            this.bU = itemstack.isEmpty() ? ItemStack.a : itemstack.cloneItemStack();
         }
 
-        this.bW.a();
-        this.cJ();
+        this.bV.a();
+        this.cL();
     }
 
     private void o() {
+        this.bA = this.bD;
         this.bB = this.bE;
         this.bC = this.bF;
-        this.bD = this.bG;
-        double d0 = this.locX - this.bE;
-        double d1 = this.locY - this.bF;
-        double d2 = this.locZ - this.bG;
+        double d0 = this.locX - this.bD;
+        double d1 = this.locY - this.bE;
+        double d2 = this.locZ - this.bF;
         double d3 = 10.0D;
 
         if (d0 > 10.0D) {
-            this.bE = this.locX;
-            this.bB = this.bE;
+            this.bD = this.locX;
+            this.bA = this.bD;
         }
 
         if (d2 > 10.0D) {
-            this.bG = this.locZ;
-            this.bD = this.bG;
+            this.bF = this.locZ;
+            this.bC = this.bF;
         }
 
         if (d1 > 10.0D) {
-            this.bF = this.locY;
-            this.bC = this.bF;
+            this.bE = this.locY;
+            this.bB = this.bE;
         }
 
         if (d0 < -10.0D) {
-            this.bE = this.locX;
-            this.bB = this.bE;
+            this.bD = this.locX;
+            this.bA = this.bD;
         }
 
         if (d2 < -10.0D) {
-            this.bG = this.locZ;
-            this.bD = this.bG;
+            this.bF = this.locZ;
+            this.bC = this.bF;
         }
 
         if (d1 < -10.0D) {
-            this.bF = this.locY;
-            this.bC = this.bF;
+            this.bE = this.locY;
+            this.bB = this.bE;
         }
 
-        this.bE += d0 * 0.25D;
-        this.bG += d2 * 0.25D;
-        this.bF += d1 * 0.25D;
+        this.bD += d0 * 0.25D;
+        this.bF += d2 * 0.25D;
+        this.bE += d1 * 0.25D;
     }
 
-    protected void cJ() {
+    protected void cL() {
         float f;
         float f1;
 
-        if (this.cG()) {
+        if (this.cH()) {
             f = 0.6F;
             f1 = 0.6F;
         } else if (this.isSleeping()) {
@@ -243,11 +244,11 @@
     }
 
     protected SoundEffect aa() {
-        return SoundEffects.eq;
+        return SoundEffects.eK;
     }
 
     protected SoundEffect ab() {
-        return SoundEffects.ep;
+        return SoundEffects.eJ;
     }
 
     public int aE() {
@@ -262,7 +263,11 @@
         return SoundCategory.PLAYERS;
     }
 
-    protected boolean cj() {
+    public int getMaxFireTicks() {
+        return 20;
+    }
+
+    protected boolean isFrozen() {
         return this.getHealth() <= 0.0F || this.isSleeping();
     }
 
@@ -282,13 +287,13 @@
             float f1 = this.pitch;
 
             super.aw();
-            this.by = this.bz;
-            this.bz = 0.0F;
-            this.m(this.locX - d0, this.locY - d1, this.locZ - d2);
+            this.bx = this.by;
+            this.by = 0.0F;
+            this.l(this.locX - d0, this.locY - d1, this.locZ - d2);
             if (this.bB() instanceof EntityPig) {
                 this.pitch = f1;
                 this.yaw = f;
-                this.aO = ((EntityPig) this.bB()).aO;
+                this.aN = ((EntityPig) this.bB()).aN;
             }
 
         }
@@ -296,13 +301,13 @@
 
     protected void doTick() {
         super.doTick();
-        this.cc();
-        this.aQ = this.yaw;
+        this.cd();
+        this.aP = this.yaw;
     }
 
     public void n() {
-        if (this.bx > 0) {
-            --this.bx;
+        if (this.bw > 0) {
+            --this.bw;
         }
 
         if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.world.getGameRules().getBoolean("naturalRegeneration")) {
@@ -315,8 +320,8 @@
             }
         }
 
-        this.inventory.m();
-        this.by = this.bz;
+        this.inventory.n();
+        this.bx = this.by;
         super.n();
         AttributeInstance attributeinstance = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED);
 
@@ -324,9 +329,9 @@
             attributeinstance.setValue((double) this.abilities.b());
         }
 
-        this.aS = this.bQ;
+        this.aR = this.bP;
         if (this.isSprinting()) {
-            this.aS = (float) ((double) this.aS + (double) this.bQ * 0.3D);
+            this.aR = (float) ((double) this.aR + (double) this.bP * 0.3D);
         }
 
         this.l((float) attributeinstance.getValue());
@@ -345,13 +350,13 @@
             f1 = 0.0F;
         }
 
-        this.bz += (f - this.bz) * 0.4F;
-        this.aL += (f1 - this.aL) * 0.8F;
+        this.by += (f - this.by) * 0.4F;
+        this.aK += (f1 - this.aK) * 0.8F;
         if (this.getHealth() > 0.0F && !this.isSpectator()) {
             AxisAlignedBB axisalignedbb;
 
             if (this.isPassenger() && !this.bB().dead) {
-                axisalignedbb = this.getBoundingBox().a(this.bB().getBoundingBox()).grow(1.0D, 0.0D, 1.0D);
+                axisalignedbb = this.getBoundingBox().b(this.bB().getBoundingBox()).grow(1.0D, 0.0D, 1.0D);
             } else {
                 axisalignedbb = this.getBoundingBox().grow(1.0D, 0.5D, 1.0D);
             }
@@ -397,12 +402,13 @@
         }
 
         if (!this.world.getGameRules().getBoolean("keepInventory") && !this.isSpectator()) {
-            this.inventory.n();
+            this.cN();
+            this.inventory.o();
         }
 
         if (damagesource != null) {
-            this.motX = (double) (-MathHelper.cos((this.aB + this.yaw) * 0.017453292F) * 0.1F);
-            this.motZ = (double) (-MathHelper.sin((this.aB + this.yaw) * 0.017453292F) * 0.1F);
+            this.motX = (double) (-MathHelper.cos((this.aA + this.yaw) * 0.017453292F) * 0.1F);
+            this.motZ = (double) (-MathHelper.sin((this.aA + this.yaw) * 0.017453292F) * 0.1F);
         } else {
             this.motX = 0.0D;
             this.motZ = 0.0D;
@@ -410,14 +416,27 @@
 
         this.b(StatisticList.A);
         this.a(StatisticList.h);
+        this.extinguish();
+        this.setFlag(0, false);
     }
 
-    protected SoundEffect bV() {
-        return SoundEffects.ENTITY_PLAYER_HURT;
+    protected void cN() {
+        for (int i = 0; i < this.inventory.getSize(); ++i) {
+            ItemStack itemstack = this.inventory.getItem(i);
+
+            if (!itemstack.isEmpty() && EnchantmentManager.c(itemstack)) {
+                this.inventory.splitWithoutUpdate(i);
+            }
+        }
+
     }
 
     protected SoundEffect bW() {
-        return SoundEffects.el;
+        return SoundEffects.ENTITY_PLAYER_HURT;
+    }
+
+    protected SoundEffect bX() {
+        return SoundEffects.eF;
     }
 
     public void b(Entity entity, int i) {
@@ -478,19 +497,17 @@
 
     @Nullable
     public EntityItem a(boolean flag) {
-        return this.a(this.inventory.splitStack(this.inventory.itemInHandIndex, flag && this.inventory.getItemInHand() != null ? this.inventory.getItemInHand().count : 1), false, true);
+        return this.a(this.inventory.splitStack(this.inventory.itemInHandIndex, flag && !this.inventory.getItemInHand().isEmpty() ? this.inventory.getItemInHand().getCount() : 1), false, true);
     }
 
     @Nullable
-    public EntityItem drop(@Nullable ItemStack itemstack, boolean flag) {
-        return this.a(itemstack, false, false);
+    public EntityItem drop(ItemStack itemstack, boolean flag) {
+        return this.a(itemstack, false, flag);
     }
 
     @Nullable
-    public EntityItem a(@Nullable ItemStack itemstack, boolean flag, boolean flag1) {
-        if (itemstack == null) {
-            return null;
-        } else if (itemstack.count == 0) {
+    public EntityItem a(ItemStack itemstack, boolean flag, boolean flag1) {
+        if (itemstack.isEmpty()) {
             return null;
         } else {
             double d0 = this.locY - 0.30000001192092896D + (double) this.getHeadHeight();
@@ -525,8 +542,8 @@
             ItemStack itemstack1 = this.a(entityitem);
 
             if (flag1) {
-                if (itemstack1 != null) {
-                    this.a(StatisticList.e(itemstack1.getItem()), itemstack.count);
+                if (!itemstack1.isEmpty()) {
+                    this.a(StatisticList.e(itemstack1.getItem()), itemstack.getCount());
                 }
 
                 this.b(StatisticList.x);
@@ -536,7 +553,6 @@
         }
     }
 
-    @Nullable
     protected ItemStack a(EntityItem entityitem) {
         this.world.addEntity(entityitem);
         return entityitem.getItemStack();
@@ -549,7 +565,7 @@
             int i = EnchantmentManager.getDigSpeedEnchantmentLevel(this);
             ItemStack itemstack = this.getItemInMainHand();
 
-            if (i > 0 && itemstack != null) {
+            if (i > 0 && !itemstack.isEmpty()) {
                 f += (float) (i * i + 1);
             }
         }
@@ -597,7 +613,7 @@
         return this.inventory.b(iblockdata);
     }
 
-    public static void a(DataConverterManager dataconvertermanager) {
+    public static void b(DataConverterManager dataconvertermanager) {
         dataconvertermanager.a(DataConverterTypes.PLAYER, new DataInspector() {
             public NBTTagCompound a(DataConverter dataconverter, NBTTagCompound nbttagcompound, int i) {
                 DataConverterRegistry.b(dataconverter, nbttagcompound, i, "Inventory");
@@ -609,7 +625,7 @@
 
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
-        this.a(a(this.bT));
+        this.a(a(this.bS));
         NBTTagList nbttaglist = nbttagcompound.getList("Inventory", 10);
 
         this.inventory.b(nbttaglist);
@@ -647,7 +663,7 @@
 
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
-        nbttagcompound.setInt("DataVersion", 512);
+        nbttagcompound.setInt("DataVersion", 819);
         nbttagcompound.set("Inventory", this.inventory.a(new NBTTagList()));
         nbttagcompound.setInt("SelectedItemSlot", this.inventory.itemInHandIndex);
         nbttagcompound.setBoolean("Sleeping", this.sleeping);
@@ -666,7 +682,7 @@
 
         this.foodData.b(nbttagcompound);
         this.abilities.a(nbttagcompound);
-        nbttagcompound.set("EnderItems", this.enderChest.h());
+        nbttagcompound.set("EnderItems", this.enderChest.i());
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
@@ -689,7 +705,7 @@
                     }
 
                     if (this.world.getDifficulty() == EnumDifficulty.EASY) {
-                        f = f / 2.0F + 1.0F;
+                        f = Math.min(f / 2.0F + 1.0F, f);
                     }
 
                     if (this.world.getDifficulty() == EnumDifficulty.HARD) {
@@ -702,6 +718,14 @@
         }
     }
 
+    protected void c(EntityLiving entityliving) {
+        super.c(entityliving);
+        if (entityliving.getItemInMainHand().getItem() instanceof ItemAxe) {
+            this.m(true);
+        }
+
+    }
+
     public boolean a(EntityHuman entityhuman) {
         ScoreboardTeamBase scoreboardteambase = this.aQ();
         ScoreboardTeamBase scoreboardteambase1 = entityhuman.aQ();
@@ -713,41 +737,40 @@
         this.inventory.a(f);
     }
 
-    protected void k(float f) {
-        if (f >= 3.0F && this.bo != null && this.bo.getItem() == Items.SHIELD) {
+    protected void damageShield(float f) {
+        if (f >= 3.0F && this.activeItem.getItem() == Items.SHIELD) {
             int i = 1 + MathHelper.d(f);
 
-            this.bo.damage(i, this);
-            if (this.bo.count <= 0) {
-                EnumHand enumhand = this.cy();
+            this.activeItem.damage(i, this);
+            if (this.activeItem.isEmpty()) {
+                EnumHand enumhand = this.cz();
 
                 if (enumhand == EnumHand.MAIN_HAND) {
-                    this.setSlot(EnumItemSlot.MAINHAND, (ItemStack) null);
+                    this.setSlot(EnumItemSlot.MAINHAND, ItemStack.a);
                 } else {
-                    this.setSlot(EnumItemSlot.OFFHAND, (ItemStack) null);
+                    this.setSlot(EnumItemSlot.OFFHAND, ItemStack.a);
                 }
 
-                this.bo = null;
-                this.a(SoundEffects.fd, 0.8F, 0.8F + this.world.random.nextFloat() * 0.4F);
+                this.activeItem = ItemStack.a;
+                this.a(SoundEffects.fx, 0.8F, 0.8F + this.world.random.nextFloat() * 0.4F);
             }
         }
 
     }
 
-    public float cL() {
+    public float cO() {
         int i = 0;
-        ItemStack[] aitemstack = this.inventory.armor;
-        int j = aitemstack.length;
+        Iterator iterator = this.inventory.armor.iterator();
 
-        for (int k = 0; k < j; ++k) {
-            ItemStack itemstack = aitemstack[k];
+        while (iterator.hasNext()) {
+            ItemStack itemstack = (ItemStack) iterator.next();
 
-            if (itemstack != null) {
+            if (!itemstack.isEmpty()) {
                 ++i;
             }
         }
 
-        return (float) i / (float) this.inventory.armor.length;
+        return (float) i / (float) this.inventory.armor.size();
     }
 
     protected void damageEntity0(DamageSource damagesource, float f) {
@@ -784,13 +807,13 @@
 
     public void openContainer(IInventory iinventory) {}
 
-    public void a(EntityHorse entityhorse, IInventory iinventory) {}
+    public void openHorseInventory(EntityHorseAbstract entityhorseabstract, IInventory iinventory) {}
 
     public void openTileEntity(ITileEntityContainer itileentitycontainer) {}
 
     public void a(ItemStack itemstack, EnumHand enumhand) {}
 
-    public EnumInteractionResult a(Entity entity, @Nullable ItemStack itemstack, EnumHand enumhand) {
+    public EnumInteractionResult a(Entity entity, EnumHand enumhand) {
         if (this.isSpectator()) {
             if (entity instanceof IInventory) {
                 this.openContainer((IInventory) entity);
@@ -798,17 +821,24 @@
 
             return EnumInteractionResult.PASS;
         } else {
-            ItemStack itemstack1 = itemstack != null ? itemstack.cloneItemStack() : null;
+            ItemStack itemstack = this.b(enumhand);
+            ItemStack itemstack1 = itemstack.isEmpty() ? ItemStack.a : itemstack.cloneItemStack();
 
-            if (!entity.a(this, itemstack, enumhand)) {
-                if (itemstack != null && entity instanceof EntityLiving) {
+            if (entity.b(this, enumhand)) {
+                if (this.abilities.canInstantlyBuild && itemstack == this.b(enumhand) && itemstack.getCount() < itemstack1.getCount()) {
+                    itemstack.setCount(itemstack1.getCount());
+                }
+
+                return EnumInteractionResult.SUCCESS;
+            } else {
+                if (!itemstack.isEmpty() && entity instanceof EntityLiving) {
                     if (this.abilities.canInstantlyBuild) {
                         itemstack = itemstack1;
                     }
 
                     if (itemstack.a(this, (EntityLiving) entity, enumhand)) {
-                        if (itemstack.count <= 0 && !this.abilities.canInstantlyBuild) {
-                            this.a(enumhand, (ItemStack) null);
+                        if (itemstack.isEmpty() && !this.abilities.canInstantlyBuild) {
+                            this.a(enumhand, ItemStack.a);
                         }
 
                         return EnumInteractionResult.SUCCESS;
@@ -816,16 +846,6 @@
                 }
 
                 return EnumInteractionResult.PASS;
-            } else {
-                if (itemstack != null && itemstack == this.b(enumhand)) {
-                    if (itemstack.count <= 0 && !this.abilities.canInstantlyBuild) {
-                        this.a(enumhand, (ItemStack) null);
-                    } else if (itemstack.count < itemstack1.count && this.abilities.canInstantlyBuild) {
-                        itemstack.count = itemstack1.count;
-                    }
-                }
-
-                return EnumInteractionResult.SUCCESS;
             }
         }
     }
@@ -855,7 +875,7 @@
 
                 f *= 0.2F + f2 * f2 * 0.8F;
                 f1 *= f2;
-                this.de();
+                this.dh();
                 if (f > 0.0F || f1 > 0.0F) {
                     boolean flag = f2 > 0.9F;
                     boolean flag1 = false;
@@ -863,7 +883,7 @@
                     int i = b0 + EnchantmentManager.a((EntityLiving) this);
 
                     if (this.isSprinting() && flag) {
-                        this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ed, this.bC(), 1.0F, 1.0F);
+                        this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ex, this.bC(), 1.0F, 1.0F);
                         ++i;
                         flag1 = true;
                     }
@@ -879,10 +899,10 @@
                     boolean flag3 = false;
                     double d0 = (double) (this.J - this.I);
 
-                    if (flag && !flag2 && !flag1 && this.onGround && d0 < (double) this.cp()) {
+                    if (flag && !flag2 && !flag1 && this.onGround && d0 < (double) this.cq()) {
                         ItemStack itemstack = this.b(EnumHand.MAIN_HAND);
 
-                        if (itemstack != null && itemstack.getItem() instanceof ItemSword) {
+                        if (itemstack.getItem() instanceof ItemSword) {
                             flag3 = true;
                         }
                     }
@@ -909,7 +929,7 @@
                             if (entity instanceof EntityLiving) {
                                 ((EntityLiving) entity).a(this, (float) i * 0.5F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)));
                             } else {
-                                entity.g((double) (-MathHelper.sin(this.yaw * 0.017453292F) * (float) i * 0.5F), 0.1D, (double) (MathHelper.cos(this.yaw * 0.017453292F) * (float) i * 0.5F));
+                                entity.f((double) (-MathHelper.sin(this.yaw * 0.017453292F) * (float) i * 0.5F), 0.1D, (double) (MathHelper.cos(this.yaw * 0.017453292F) * (float) i * 0.5F));
                             }
 
                             this.motX *= 0.6D;
@@ -930,8 +950,8 @@
                                 }
                             }
 
-                            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.eg, this.bC(), 1.0F, 1.0F);
-                            this.cM();
+                            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.eA, this.bC(), 1.0F, 1.0F);
+                            this.cP();
                         }
 
                         if (entity instanceof EntityPlayer && entity.velocityChanged) {
@@ -949,9 +969,9 @@
 
                         if (!flag2 && !flag3) {
                             if (flag) {
-                                this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ef, this.bC(), 1.0F, 1.0F);
+                                this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ez, this.bC(), 1.0F, 1.0F);
                             } else {
-                                this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.eh, this.bC(), 1.0F, 1.0F);
+                                this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.eB, this.bC(), 1.0F, 1.0F);
                             }
                         }
 
@@ -959,25 +979,6 @@
                             this.b(entity);
                         }
 
-                        if (!this.world.isClientSide && entity instanceof EntityHuman) {
-                            EntityHuman entityhuman = (EntityHuman) entity;
-                            ItemStack itemstack1 = this.getItemInMainHand();
-                            ItemStack itemstack2 = entityhuman.cx() ? entityhuman.cA() : null;
-
-                            if (itemstack1 != null && itemstack2 != null && itemstack1.getItem() instanceof ItemAxe && itemstack2.getItem() == Items.SHIELD) {
-                                float f4 = 0.25F + (float) EnchantmentManager.getDigSpeedEnchantmentLevel(this) * 0.05F;
-
-                                if (flag1) {
-                                    f4 += 0.75F;
-                                }
-
-                                if (this.random.nextFloat() < f4) {
-                                    entityhuman.df().a(Items.SHIELD, 100);
-                                    this.world.broadcastEntityEffect(entityhuman, (byte) 30);
-                                }
-                            }
-                        }
-
                         if (f >= 18.0F) {
                             this.b((Statistic) AchievementList.F);
                         }
@@ -988,7 +989,7 @@
                         }
 
                         EnchantmentManager.b((EntityLiving) this, entity);
-                        ItemStack itemstack3 = this.getItemInMainHand();
+                        ItemStack itemstack1 = this.getItemInMainHand();
                         Object object = entity;
 
                         if (entity instanceof EntityComplexPart) {
@@ -999,31 +1000,31 @@
                             }
                         }
 
-                        if (itemstack3 != null && object instanceof EntityLiving) {
-                            itemstack3.a((EntityLiving) object, this);
-                            if (itemstack3.count <= 0) {
-                                this.a(EnumHand.MAIN_HAND, (ItemStack) null);
+                        if (!itemstack1.isEmpty() && object instanceof EntityLiving) {
+                            itemstack1.a((EntityLiving) object, this);
+                            if (itemstack1.isEmpty()) {
+                                this.a(EnumHand.MAIN_HAND, ItemStack.a);
                             }
                         }
 
                         if (entity instanceof EntityLiving) {
-                            float f5 = f3 - ((EntityLiving) entity).getHealth();
+                            float f4 = f3 - ((EntityLiving) entity).getHealth();
 
-                            this.a(StatisticList.y, Math.round(f5 * 10.0F));
+                            this.a(StatisticList.y, Math.round(f4 * 10.0F));
                             if (j > 0) {
                                 entity.setOnFire(j * 4);
                             }
 
-                            if (this.world instanceof WorldServer && f5 > 2.0F) {
-                                int k = (int) ((double) f5 * 0.5D);
+                            if (this.world instanceof WorldServer && f4 > 2.0F) {
+                                int k = (int) ((double) f4 * 0.5D);
 
                                 ((WorldServer) this.world).a(EnumParticle.DAMAGE_INDICATOR, entity.locX, entity.locY + (double) (entity.length * 0.5F), entity.locZ, k, 0.1D, 0.0D, 0.1D, 0.2D, new int[0]);
                             }
                         }
 
-                        this.applyExhaustion(0.3F);
+                        this.applyExhaustion(0.1F);
                     } else {
-                        this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ee, this.bC(), 1.0F, 1.0F);
+                        this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ey, this.bC(), 1.0F, 1.0F);
                         if (flag4) {
                             entity.extinguish();
                         }
@@ -1034,11 +1035,26 @@
         }
     }
 
+    public void m(boolean flag) {
+        float f = 0.25F + (float) EnchantmentManager.getDigSpeedEnchantmentLevel(this) * 0.05F;
+
+        if (flag) {
+            f += 0.75F;
+        }
+
+        if (this.random.nextFloat() < f) {
+            this.di().a(Items.SHIELD, 100);
+            this.cF();
+            this.world.broadcastEntityEffect(this, (byte) 30);
+        }
+
+    }
+
     public void a(Entity entity) {}
 
     public void b(Entity entity) {}
 
-    public void cM() {
+    public void cP() {
         double d0 = (double) (-MathHelper.sin(this.yaw * 0.017453292F));
         double d1 = (double) MathHelper.cos(this.yaw * 0.017453292F);
 
@@ -1061,15 +1077,17 @@
         return !this.sleeping && super.inBlock();
     }
 
-    public boolean cO() {
+    public boolean cR() {
         return false;
     }
 
     public GameProfile getProfile() {
-        return this.bT;
+        return this.bS;
     }
 
     public EntityHuman.EnumBedResult a(BlockPosition blockposition) {
+        EnumDirection enumdirection = (EnumDirection) this.world.getType(blockposition).get(BlockFacingHorizontal.FACING);
+
         if (!this.world.isClientSide) {
             if (this.isSleeping() || !this.isAlive()) {
                 return EntityHuman.EnumBedResult.OTHER_PROBLEM;
@@ -1083,7 +1101,7 @@
                 return EntityHuman.EnumBedResult.NOT_POSSIBLE_NOW;
             }
 
-            if (Math.abs(this.locX - (double) blockposition.getX()) > 3.0D || Math.abs(this.locY - (double) blockposition.getY()) > 2.0D || Math.abs(this.locZ - (double) blockposition.getZ()) > 3.0D) {
+            if (!this.a(blockposition, enumdirection)) {
                 return EntityHuman.EnumBedResult.TOO_FAR_AWAY;
             }
 
@@ -1102,26 +1120,8 @@
 
         this.setSize(0.2F, 0.2F);
         if (this.world.isLoaded(blockposition)) {
-            EnumDirection enumdirection = (EnumDirection) this.world.getType(blockposition).get(BlockFacingHorizontal.FACING);
-            float f = 0.5F;
-            float f1 = 0.5F;
-
-            switch (EntityHuman.SyntheticClass_1.a[enumdirection.ordinal()]) {
-            case 1:
-                f1 = 0.9F;
-                break;
-
-            case 2:
-                f1 = 0.1F;
-                break;
-
-            case 3:
-                f = 0.1F;
-                break;
-
-            case 4:
-                f = 0.9F;
-            }
+            float f = 0.5F + (float) enumdirection.getAdjacentX() * 0.4F;
+            float f1 = 0.5F + (float) enumdirection.getAdjacentZ() * 0.4F;
 
             this.a(enumdirection);
             this.setPosition((double) ((float) blockposition.getX() + f), (double) ((float) blockposition.getY() + 0.6875F), (double) ((float) blockposition.getZ() + f1));
@@ -1142,26 +1142,19 @@
         return EntityHuman.EnumBedResult.OK;
     }
 
-    private void a(EnumDirection enumdirection) {
-        this.bJ = 0.0F;
-        this.bK = 0.0F;
-        switch (EntityHuman.SyntheticClass_1.a[enumdirection.ordinal()]) {
-        case 1:
-            this.bK = -1.8F;
-            break;
-
-        case 2:
-            this.bK = 1.8F;
-            break;
-
-        case 3:
-            this.bJ = 1.8F;
-            break;
+    private boolean a(BlockPosition blockposition, EnumDirection enumdirection) {
+        if (Math.abs(this.locX - (double) blockposition.getX()) <= 3.0D && Math.abs(this.locY - (double) blockposition.getY()) <= 2.0D && Math.abs(this.locZ - (double) blockposition.getZ()) <= 3.0D) {
+            return true;
+        } else {
+            BlockPosition blockposition1 = blockposition.shift(enumdirection.opposite());
 
-        case 4:
-            this.bJ = -1.8F;
+            return Math.abs(this.locX - (double) blockposition1.getX()) <= 3.0D && Math.abs(this.locY - (double) blockposition1.getY()) <= 2.0D && Math.abs(this.locZ - (double) blockposition1.getZ()) <= 3.0D;
         }
+    }
 
+    private void a(EnumDirection enumdirection) {
+        this.bI = -1.8F * (float) enumdirection.getAdjacentX();
+        this.bJ = -1.8F * (float) enumdirection.getAdjacentZ();
     }
 
     public void a(boolean flag, boolean flag1, boolean flag2) {
@@ -1221,7 +1214,7 @@
         return this.sleeping && this.sleepTicks >= 100;
     }
 
-    public void b(IChatBaseComponent ichatbasecomponent) {}
+    public void a(IChatBaseComponent ichatbasecomponent, boolean flag) {}
 
     public BlockPosition getBed() {
         return this.e;
@@ -1254,13 +1247,13 @@
 
     public void a(Statistic statistic) {}
 
-    public void cl() {
-        super.cl();
+    public void cm() {
+        super.cm();
         this.b(StatisticList.w);
         if (this.isSprinting()) {
-            this.applyExhaustion(0.8F);
-        } else {
             this.applyExhaustion(0.2F);
+        } else {
+            this.applyExhaustion(0.05F);
         }
 
     }
@@ -1272,12 +1265,12 @@
 
         if (this.abilities.isFlying && !this.isPassenger()) {
             double d3 = this.motY;
-            float f2 = this.aS;
+            float f2 = this.aR;
 
-            this.aS = this.abilities.a() * (float) (this.isSprinting() ? 2 : 1);
+            this.aR = this.abilities.a() * (float) (this.isSprinting() ? 2 : 1);
             super.g(f, f1);
             this.motY = d3 * 0.6D;
-            this.aS = f2;
+            this.aR = f2;
             this.fallDistance = 0.0F;
             this.setFlag(7, false);
         } else {
@@ -1287,7 +1280,7 @@
         this.checkMovement(this.locX - d0, this.locY - d1, this.locZ - d2);
     }
 
-    public float cp() {
+    public float cq() {
         return (float) this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getValue();
     }
 
@@ -1299,13 +1292,13 @@
                 i = Math.round(MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2) * 100.0F);
                 if (i > 0) {
                     this.a(StatisticList.q, i);
-                    this.applyExhaustion(0.015F * (float) i * 0.01F);
+                    this.applyExhaustion(0.01F * (float) i * 0.01F);
                 }
             } else if (this.isInWater()) {
                 i = Math.round(MathHelper.sqrt(d0 * d0 + d2 * d2) * 100.0F);
                 if (i > 0) {
                     this.a(StatisticList.m, i);
-                    this.applyExhaustion(0.015F * (float) i * 0.01F);
+                    this.applyExhaustion(0.01F * (float) i * 0.01F);
                 }
             } else if (this.m_()) {
                 if (d1 > 0.0D) {
@@ -1316,16 +1309,16 @@
                 if (i > 0) {
                     if (this.isSprinting()) {
                         this.a(StatisticList.l, i);
-                        this.applyExhaustion(0.099999994F * (float) i * 0.01F);
+                        this.applyExhaustion(0.1F * (float) i * 0.01F);
                     } else if (this.isSneaking()) {
                         this.a(StatisticList.k, i);
-                        this.applyExhaustion(0.005F * (float) i * 0.01F);
+                        this.applyExhaustion(0.0F * (float) i * 0.01F);
                     } else {
                         this.a(StatisticList.j, i);
-                        this.applyExhaustion(0.01F * (float) i * 0.01F);
+                        this.applyExhaustion(0.0F * (float) i * 0.01F);
                     }
                 }
-            } else if (this.cG()) {
+            } else if (this.cH()) {
                 i = Math.round(MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2) * 100.0F);
                 this.a(StatisticList.v, i);
             } else {
@@ -1338,7 +1331,7 @@
         }
     }
 
-    private void m(double d0, double d1, double d2) {
+    private void l(double d0, double d1, double d2) {
         if (this.isPassenger()) {
             int i = Math.round(MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2) * 100.0F);
 
@@ -1354,7 +1347,7 @@
                     this.a(StatisticList.s, i);
                 } else if (this.bB() instanceof EntityPig) {
                     this.a(StatisticList.t, i);
-                } else if (this.bB() instanceof EntityHorse) {
+                } else if (this.bB() instanceof EntityHorseAbstract) {
                     this.a(StatisticList.u, i);
                 }
             }
@@ -1380,7 +1373,7 @@
     }
 
     protected SoundEffect e(int i) {
-        return i > 4 ? SoundEffects.ei : SoundEffects.eo;
+        return i > 4 ? SoundEffects.eC : SoundEffects.eI;
     }
 
     public void b(EntityLiving entityliving) {
@@ -1388,7 +1381,7 @@
             this.b((Statistic) AchievementList.s);
         }
 
-        EntityTypes.MonsterEggInfo entitytypes_monsteregginfo = (EntityTypes.MonsterEggInfo) EntityTypes.eggInfo.get(EntityTypes.b((Entity) entityliving));
+        EntityTypes.MonsterEggInfo entitytypes_monsteregginfo = (EntityTypes.MonsterEggInfo) EntityTypes.eggInfo.get(EntityTypes.a((Entity) entityliving));
 
         if (entitytypes_monsteregginfo != null) {
             this.b(entitytypes_monsteregginfo.killEntityStatistic);
@@ -1420,7 +1413,7 @@
 
     }
 
-    public int cV() {
+    public int cY() {
         return this.h;
     }
 
@@ -1443,11 +1436,11 @@
             this.expTotal = 0;
         }
 
-        if (i > 0 && this.expLevel % 5 == 0 && (float) this.bS < (float) this.ticksLived - 100.0F) {
+        if (i > 0 && this.expLevel % 5 == 0 && (float) this.bR < (float) this.ticksLived - 100.0F) {
             float f = this.expLevel > 30 ? 1.0F : (float) this.expLevel / 30.0F;
 
-            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.en, this.bC(), f * 0.75F, 1.0F);
-            this.bS = this.ticksLived;
+            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.eH, this.bC(), f * 0.75F, 1.0F);
+            this.bR = this.ticksLived;
         }
 
     }
@@ -1469,28 +1462,28 @@
         return this.foodData;
     }
 
-    public boolean m(boolean flag) {
+    public boolean n(boolean flag) {
         return (flag || this.foodData.c()) && !this.abilities.isInvulnerable;
     }
 
-    public boolean cY() {
+    public boolean db() {
         return this.getHealth() > 0.0F && this.getHealth() < this.getMaxHealth();
     }
 
-    public boolean cZ() {
+    public boolean dc() {
         return this.abilities.mayBuild;
     }
 
-    public boolean a(BlockPosition blockposition, EnumDirection enumdirection, @Nullable ItemStack itemstack) {
+    public boolean a(BlockPosition blockposition, EnumDirection enumdirection, ItemStack itemstack) {
         if (this.abilities.mayBuild) {
             return true;
-        } else if (itemstack == null) {
+        } else if (itemstack.isEmpty()) {
             return false;
         } else {
             BlockPosition blockposition1 = blockposition.shift(enumdirection.opposite());
             Block block = this.world.getType(blockposition1).getBlock();
 
-            return itemstack.b(block) || itemstack.x();
+            return itemstack.b(block) || itemstack.y();
         }
     }
 
@@ -1517,9 +1510,9 @@
             this.expTotal = entityhuman.expTotal;
             this.exp = entityhuman.exp;
             this.setScore(entityhuman.getScore());
+            this.an = entityhuman.an;
             this.ao = entityhuman.ao;
             this.ap = entityhuman.ap;
-            this.aq = entityhuman.aq;
         } else if (this.world.getGameRules().getBoolean("keepInventory") || entityhuman.isSpectator()) {
             this.inventory.a(entityhuman.inventory);
             this.expLevel = entityhuman.expLevel;
@@ -1530,7 +1523,7 @@
 
         this.h = entityhuman.h;
         this.enderChest = entityhuman.enderChest;
-        this.getDataWatcher().set(EntityHuman.br, entityhuman.getDataWatcher().get(EntityHuman.br));
+        this.getDataWatcher().set(EntityHuman.bq, entityhuman.getDataWatcher().get(EntityHuman.bq));
     }
 
     protected boolean playStepSound() {
@@ -1542,28 +1535,27 @@
     public void a(EnumGamemode enumgamemode) {}
 
     public String getName() {
-        return this.bT.getName();
+        return this.bS.getName();
     }
 
     public InventoryEnderChest getEnderChest() {
         return this.enderChest;
     }
 
-    @Nullable
     public ItemStack getEquipment(EnumItemSlot enumitemslot) {
-        return enumitemslot == EnumItemSlot.MAINHAND ? this.inventory.getItemInHand() : (enumitemslot == EnumItemSlot.OFFHAND ? this.inventory.extraSlots[0] : (enumitemslot.a() == EnumItemSlot.Function.ARMOR ? this.inventory.armor[enumitemslot.b()] : null));
+        return enumitemslot == EnumItemSlot.MAINHAND ? this.inventory.getItemInHand() : (enumitemslot == EnumItemSlot.OFFHAND ? (ItemStack) this.inventory.extraSlots.get(0) : (enumitemslot.a() == EnumItemSlot.Function.ARMOR ? (ItemStack) this.inventory.armor.get(enumitemslot.b()) : ItemStack.a));
     }
 
-    public void setSlot(EnumItemSlot enumitemslot, @Nullable ItemStack itemstack) {
+    public void setSlot(EnumItemSlot enumitemslot, ItemStack itemstack) {
         if (enumitemslot == EnumItemSlot.MAINHAND) {
             this.a_(itemstack);
-            this.inventory.items[this.inventory.itemInHandIndex] = itemstack;
+            this.inventory.items.set(this.inventory.itemInHandIndex, itemstack);
         } else if (enumitemslot == EnumItemSlot.OFFHAND) {
             this.a_(itemstack);
-            this.inventory.extraSlots[0] = itemstack;
+            this.inventory.extraSlots.set(0, itemstack);
         } else if (enumitemslot.a() == EnumItemSlot.Function.ARMOR) {
             this.a_(itemstack);
-            this.inventory.armor[enumitemslot.b()] = itemstack;
+            this.inventory.armor.set(enumitemslot.b(), itemstack);
         }
 
     }
@@ -1573,7 +1565,7 @@
     }
 
     public Iterable<ItemStack> getArmorItems() {
-        return Arrays.asList(this.inventory.armor);
+        return this.inventory.armor;
     }
 
     public abstract boolean isSpectator();
@@ -1607,7 +1599,7 @@
         if (this.isSleeping()) {
             f = 0.2F;
         } else if (!this.isSneaking() && this.length != 1.65F) {
-            if (this.cG() || this.length == 0.6F) {
+            if (this.cH() || this.length == 0.6F) {
                 f = 0.4F;
             }
         } else {
@@ -1649,16 +1641,16 @@
         } else {
             ItemStack itemstack = this.getItemInMainHand();
 
-            return itemstack != null && itemstack.hasName() ? itemstack.getName().equals(chestlock.b()) : false;
+            return !itemstack.isEmpty() && itemstack.hasName() ? itemstack.getName().equals(chestlock.b()) : false;
         }
     }
 
     public boolean getSendCommandFeedback() {
-        return this.h().worldServer[0].getGameRules().getBoolean("sendCommandFeedback");
+        return this.B_().worldServer[0].getGameRules().getBoolean("sendCommandFeedback");
     }
 
     public boolean c(int i, ItemStack itemstack) {
-        if (i >= 0 && i < this.inventory.items.length) {
+        if (i >= 0 && i < this.inventory.items.size()) {
             this.inventory.setItem(i, itemstack);
             return true;
         } else {
@@ -1692,7 +1684,7 @@
                     return false;
                 }
             } else {
-                if (itemstack != null && itemstack.getItem() != null) {
+                if (!itemstack.isEmpty()) {
                     if (!(itemstack.getItem() instanceof ItemArmor) && !(itemstack.getItem() instanceof ItemElytra)) {
                         if (enumitemslot != EnumItemSlot.HEAD) {
                             return false;
@@ -1702,34 +1694,34 @@
                     }
                 }
 
-                this.inventory.setItem(enumitemslot.b() + this.inventory.items.length, itemstack);
+                this.inventory.setItem(enumitemslot.b() + this.inventory.items.size(), itemstack);
                 return true;
             }
         }
     }
 
     public EnumMainHand getMainHand() {
-        return ((Byte) this.datawatcher.get(EntityHuman.bs)).byteValue() == 0 ? EnumMainHand.LEFT : EnumMainHand.RIGHT;
+        return ((Byte) this.datawatcher.get(EntityHuman.br)).byteValue() == 0 ? EnumMainHand.LEFT : EnumMainHand.RIGHT;
     }
 
     public void a(EnumMainHand enummainhand) {
-        this.datawatcher.set(EntityHuman.bs, Byte.valueOf((byte) (enummainhand == EnumMainHand.LEFT ? 0 : 1)));
+        this.datawatcher.set(EntityHuman.br, Byte.valueOf((byte) (enummainhand == EnumMainHand.LEFT ? 0 : 1)));
     }
 
-    public float dd() {
+    public float dg() {
         return (float) (1.0D / this.getAttributeInstance(GenericAttributes.f).getValue() * 20.0D);
     }
 
     public float o(float f) {
-        return MathHelper.a(((float) this.aF + f) / this.dd(), 0.0F, 1.0F);
+        return MathHelper.a(((float) this.aE + f) / this.dg(), 0.0F, 1.0F);
     }
 
-    public void de() {
-        this.aF = 0;
+    public void dh() {
+        this.aE = 0;
     }
 
-    public ItemCooldown df() {
-        return this.bW;
+    public ItemCooldown di() {
+        return this.bV;
     }
 
     public void collide(Entity entity) {
@@ -1739,46 +1731,14 @@
 
     }
 
-    public float dg() {
+    public float dj() {
         return (float) this.getAttributeInstance(GenericAttributes.i).getValue();
     }
 
-    public boolean dh() {
+    public boolean dk() {
         return this.abilities.canInstantlyBuild && this.a(2, "");
     }
 
-    static class SyntheticClass_1 {
-
-        static final int[] a = new int[EnumDirection.values().length];
-
-        static {
-            try {
-                EntityHuman.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
-            }
-
-            try {
-                EntityHuman.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
-            }
-
-            try {
-                EntityHuman.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
-            }
-
-            try {
-                EntityHuman.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
-            }
-
-        }
-    }
-
     public static enum EnumBedResult {
 
         OK, NOT_POSSIBLE_HERE, NOT_POSSIBLE_NOW, TOO_FAR_AWAY, OTHER_PROBLEM, NOT_SAFE;
