--- a/net/minecraft/server/EntityMinecartContainer.java
+++ b/net/minecraft/server/EntityMinecartContainer.java
@@ -1,21 +1,26 @@
 package net.minecraft.server;
 
+import java.util.Iterator;
 import java.util.Random;
 import javax.annotation.Nullable;
 
 public abstract class EntityMinecartContainer extends EntityMinecartAbstract implements ITileInventory, ILootable {
 
-    private ItemStack[] items = new ItemStack[36];
-    private boolean b = true;
+    private NonNullList<ItemStack> items;
+    private boolean b;
     private MinecraftKey c;
     private long d;
 
     public EntityMinecartContainer(World world) {
         super(world);
+        this.items = NonNullList.a(36, ItemStack.a);
+        this.b = true;
     }
 
     public EntityMinecartContainer(World world, double d0, double d1, double d2) {
         super(world, d0, d1, d2);
+        this.items = NonNullList.a(36, ItemStack.a);
+        this.b = true;
     }
 
     public void a(DamageSource damagesource) {
@@ -26,36 +31,49 @@
 
     }
 
-    @Nullable
+    public boolean w_() {
+        Iterator iterator = this.items.iterator();
+
+        ItemStack itemstack;
+
+        do {
+            if (!iterator.hasNext()) {
+                return true;
+            }
+
+            itemstack = (ItemStack) iterator.next();
+        } while (itemstack.isEmpty());
+
+        return false;
+    }
+
     public ItemStack getItem(int i) {
         this.f((EntityHuman) null);
-        return this.items[i];
+        return (ItemStack) this.items.get(i);
     }
 
-    @Nullable
     public ItemStack splitStack(int i, int j) {
         this.f((EntityHuman) null);
         return ContainerUtil.a(this.items, i, j);
     }
 
-    @Nullable
     public ItemStack splitWithoutUpdate(int i) {
         this.f((EntityHuman) null);
-        if (this.items[i] != null) {
-            ItemStack itemstack = this.items[i];
+        ItemStack itemstack = (ItemStack) this.items.get(i);
 
-            this.items[i] = null;
-            return itemstack;
+        if (itemstack.isEmpty()) {
+            return ItemStack.a;
         } else {
-            return null;
+            this.items.set(i, ItemStack.a);
+            return itemstack;
         }
     }
 
-    public void setItem(int i, @Nullable ItemStack itemstack) {
+    public void setItem(int i, ItemStack itemstack) {
         this.f((EntityHuman) null);
-        this.items[i] = itemstack;
-        if (itemstack != null && itemstack.count > this.getMaxStackSize()) {
-            itemstack.count = this.getMaxStackSize();
+        this.items.set(i, itemstack);
+        if (!itemstack.isEmpty() && itemstack.getCount() > this.getMaxStackSize()) {
+            itemstack.setCount(this.getMaxStackSize());
         }
 
     }
@@ -96,9 +114,9 @@
         this.b = flag;
     }
 
-    public static void b(DataConverterManager dataconvertermanager, String s) {
-        EntityMinecartAbstract.a(dataconvertermanager, s);
-        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItemList(s, new String[] { "Items"})));
+    public static void b(DataConverterManager dataconvertermanager, Class<?> oclass) {
+        EntityMinecartAbstract.a(dataconvertermanager, oclass);
+        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItemList(oclass, new String[] { "Items"})));
     }
 
     protected void b(NBTTagCompound nbttagcompound) {
@@ -109,45 +127,24 @@
                 nbttagcompound.setLong("LootTableSeed", this.d);
             }
         } else {
-            NBTTagList nbttaglist = new NBTTagList();
-
-            for (int i = 0; i < this.items.length; ++i) {
-                if (this.items[i] != null) {
-                    NBTTagCompound nbttagcompound1 = new NBTTagCompound();
-
-                    nbttagcompound1.setByte("Slot", (byte) i);
-                    this.items[i].save(nbttagcompound1);
-                    nbttaglist.add(nbttagcompound1);
-                }
-            }
-
-            nbttagcompound.set("Items", nbttaglist);
+            ContainerUtil.a(nbttagcompound, this.items);
         }
 
     }
 
     protected void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
-        this.items = new ItemStack[this.getSize()];
+        this.items = NonNullList.a(this.getSize(), ItemStack.a);
         if (nbttagcompound.hasKeyOfType("LootTable", 8)) {
             this.c = new MinecraftKey(nbttagcompound.getString("LootTable"));
             this.d = nbttagcompound.getLong("LootTableSeed");
         } else {
-            NBTTagList nbttaglist = nbttagcompound.getList("Items", 10);
-
-            for (int i = 0; i < nbttaglist.size(); ++i) {
-                NBTTagCompound nbttagcompound1 = nbttaglist.get(i);
-                int j = nbttagcompound1.getByte("Slot") & 255;
-
-                if (j >= 0 && j < this.items.length) {
-                    this.items[j] = ItemStack.createStack(nbttagcompound1);
-                }
-            }
+            ContainerUtil.b(nbttagcompound, this.items);
         }
 
     }
 
-    public boolean a(EntityHuman entityhuman, @Nullable ItemStack itemstack, EnumHand enumhand) {
+    public boolean b(EntityHuman entityhuman, EnumHand enumhand) {
         if (!this.world.isClientSide) {
             entityhuman.openContainer(this);
         }
@@ -175,17 +172,17 @@
 
     public void setProperty(int i, int j) {}
 
-    public int g() {
+    public int h() {
         return 0;
     }
 
-    public boolean x_() {
+    public boolean isLocked() {
         return false;
     }
 
     public void a(ChestLock chestlock) {}
 
-    public ChestLock y_() {
+    public ChestLock getLock() {
         return ChestLock.a;
     }
 
@@ -205,7 +202,7 @@
             LootTableInfo.a loottableinfo_a = new LootTableInfo.a((WorldServer) this.world);
 
             if (entityhuman != null) {
-                loottableinfo_a.a(entityhuman.dg());
+                loottableinfo_a.a(entityhuman.dj());
             }
 
             loottable.a(this, random, loottableinfo_a.a());
@@ -213,13 +210,9 @@
 
     }
 
-    public void l() {
+    public void clear() {
         this.f((EntityHuman) null);
-
-        for (int i = 0; i < this.items.length; ++i) {
-            this.items[i] = null;
-        }
-
+        this.items.clear();
     }
 
     public void a(MinecraftKey minecraftkey, long i) {
