--- a/net/minecraft/server/EntityItem.java
+++ b/net/minecraft/server/EntityItem.java
@@ -1,6 +1,5 @@
 package net.minecraft.server;
 
-import com.google.common.base.Optional;
 import java.util.Iterator;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
@@ -9,7 +8,7 @@
 public class EntityItem extends Entity {
 
     private static final Logger b = LogManager.getLogger();
-    private static final DataWatcherObject<Optional<ItemStack>> c = DataWatcher.a(EntityItem.class, DataWatcherRegistry.f);
+    private static final DataWatcherObject<ItemStack> c = DataWatcher.a(EntityItem.class, DataWatcherRegistry.f);
     private int age;
     public int pickupDelay;
     private int f;
@@ -43,18 +42,18 @@
         this.f = 5;
         this.a = (float) (Math.random() * 3.141592653589793D * 2.0D);
         this.setSize(0.25F, 0.25F);
-        this.setItemStack(new ItemStack(Blocks.AIR, 0));
+        this.setItemStack(ItemStack.a);
     }
 
     protected void i() {
-        this.getDataWatcher().register(EntityItem.c, Optional.absent());
+        this.getDataWatcher().register(EntityItem.c, ItemStack.a);
     }
 
-    public void m() {
-        if (this.getItemStack() == null) {
+    public void A_() {
+        if (this.getItemStack().isEmpty()) {
             this.die();
         } else {
-            super.m();
+            super.A_();
             if (this.pickupDelay > 0 && this.pickupDelay != 32767) {
                 --this.pickupDelay;
             }
@@ -62,12 +61,21 @@
             this.lastX = this.locX;
             this.lastY = this.locY;
             this.lastZ = this.locZ;
+            double d0 = this.motX;
+            double d1 = this.motY;
+            double d2 = this.motZ;
+
             if (!this.isNoGravity()) {
                 this.motY -= 0.03999999910593033D;
             }
 
-            this.noclip = this.j(this.locX, (this.getBoundingBox().b + this.getBoundingBox().e) / 2.0D, this.locZ);
-            this.move(this.motX, this.motY, this.motZ);
+            if (this.world.isClientSide) {
+                this.noclip = false;
+            } else {
+                this.noclip = this.i(this.locX, (this.getBoundingBox().b + this.getBoundingBox().e) / 2.0D, this.locZ);
+            }
+
+            this.move(EnumMoveType.SELF, this.motX, this.motY, this.motZ);
             boolean flag = (int) this.lastX != (int) this.locX || (int) this.lastY != (int) this.locY || (int) this.lastZ != (int) this.locZ;
 
             if (flag || this.ticksLived % 25 == 0) {
@@ -75,7 +83,7 @@
                     this.motY = 0.20000000298023224D;
                     this.motX = (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
                     this.motZ = (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
-                    this.a(SoundEffects.bB, 0.4F, 2.0F + this.random.nextFloat() * 0.4F);
+                    this.a(SoundEffects.bL, 0.4F, 2.0F + this.random.nextFloat() * 0.4F);
                 }
 
                 if (!this.world.isClientSide) {
@@ -101,6 +109,17 @@
             }
 
             this.ak();
+            if (!this.world.isClientSide) {
+                double d3 = this.motX - d0;
+                double d4 = this.motY - d1;
+                double d5 = this.motZ - d2;
+                double d6 = d3 * d3 + d4 * d4 + d5 * d5;
+
+                if (d6 > 0.01D) {
+                    this.impulse = true;
+                }
+            }
+
             if (!this.world.isClientSide && this.age >= 6000) {
                 this.die();
             }
@@ -136,14 +155,14 @@
                         return false;
                     } else if (itemstack1.getItem() == null) {
                         return false;
-                    } else if (itemstack1.getItem().k() && itemstack1.getData() != itemstack.getData()) {
+                    } else if (itemstack1.getItem().l() && itemstack1.getData() != itemstack.getData()) {
                         return false;
-                    } else if (itemstack1.count < itemstack.count) {
+                    } else if (itemstack1.getCount() < itemstack.getCount()) {
                         return entityitem.a(this);
-                    } else if (itemstack1.count + itemstack.count > itemstack1.getMaxStackSize()) {
+                    } else if (itemstack1.getCount() + itemstack.getCount() > itemstack1.getMaxStackSize()) {
                         return false;
                     } else {
-                        itemstack1.count += itemstack.count;
+                        itemstack1.add(itemstack.getCount());
                         entityitem.pickupDelay = Math.max(entityitem.pickupDelay, this.pickupDelay);
                         entityitem.age = Math.min(entityitem.age, this.age);
                         entityitem.setItemStack(itemstack1);
@@ -186,7 +205,7 @@
     public boolean damageEntity(DamageSource damagesource, float f) {
         if (this.isInvulnerable(damagesource)) {
             return false;
-        } else if (this.getItemStack() != null && this.getItemStack().getItem() == Items.NETHER_STAR && damagesource.isExplosion()) {
+        } else if (!this.getItemStack().isEmpty() && this.getItemStack().getItem() == Items.NETHER_STAR && damagesource.isExplosion()) {
             return false;
         } else {
             this.ap();
@@ -199,8 +218,8 @@
         }
     }
 
-    public static void a(DataConverterManager dataconvertermanager) {
-        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItem("Item", new String[] { "Item"})));
+    public static void b(DataConverterManager dataconvertermanager) {
+        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItem(EntityItem.class, new String[] { "Item"})));
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -215,7 +234,7 @@
             nbttagcompound.setString("Owner", this.h);
         }
 
-        if (this.getItemStack() != null) {
+        if (!this.getItemStack().isEmpty()) {
             nbttagcompound.set("Item", this.getItemStack().save(new NBTTagCompound()));
         }
 
@@ -238,8 +257,8 @@
 
         NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("Item");
 
-        this.setItemStack(ItemStack.createStack(nbttagcompound1));
-        if (this.getItemStack() == null) {
+        this.setItemStack(new ItemStack(nbttagcompound1));
+        if (this.getItemStack().isEmpty()) {
             this.die();
         }
 
@@ -248,30 +267,31 @@
     public void d(EntityHuman entityhuman) {
         if (!this.world.isClientSide) {
             ItemStack itemstack = this.getItemStack();
-            int i = itemstack.count;
+            Item item = itemstack.getItem();
+            int i = itemstack.getCount();
 
             if (this.pickupDelay == 0 && (this.h == null || 6000 - this.age <= 200 || this.h.equals(entityhuman.getName())) && entityhuman.inventory.pickup(itemstack)) {
-                if (itemstack.getItem() == Item.getItemOf(Blocks.LOG)) {
+                if (item == Item.getItemOf(Blocks.LOG)) {
                     entityhuman.b((Statistic) AchievementList.g);
                 }
 
-                if (itemstack.getItem() == Item.getItemOf(Blocks.LOG2)) {
+                if (item == Item.getItemOf(Blocks.LOG2)) {
                     entityhuman.b((Statistic) AchievementList.g);
                 }
 
-                if (itemstack.getItem() == Items.LEATHER) {
+                if (item == Items.LEATHER) {
                     entityhuman.b((Statistic) AchievementList.t);
                 }
 
-                if (itemstack.getItem() == Items.DIAMOND) {
+                if (item == Items.DIAMOND) {
                     entityhuman.b((Statistic) AchievementList.w);
                 }
 
-                if (itemstack.getItem() == Items.BLAZE_ROD) {
+                if (item == Items.BLAZE_ROD) {
                     entityhuman.b((Statistic) AchievementList.A);
                 }
 
-                if (itemstack.getItem() == Items.DIAMOND && this.n() != null) {
+                if (item == Items.DIAMOND && this.n() != null) {
                     EntityHuman entityhuman1 = this.world.a(this.n());
 
                     if (entityhuman1 != null && entityhuman1 != entityhuman) {
@@ -279,16 +299,13 @@
                     }
                 }
 
-                if (!this.isSilent()) {
-                    this.world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.da, SoundCategory.PLAYERS, 0.2F, ((this.random.nextFloat() - this.random.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-                }
-
                 entityhuman.receive(this, i);
-                if (itemstack.count <= 0) {
+                if (itemstack.isEmpty()) {
                     this.die();
+                    itemstack.setCount(i);
                 }
 
-                entityhuman.a(StatisticList.d(itemstack.getItem()), i);
+                entityhuman.a(StatisticList.d(item), i);
             }
 
         }
@@ -314,21 +331,11 @@
     }
 
     public ItemStack getItemStack() {
-        ItemStack itemstack = (ItemStack) ((Optional) this.getDataWatcher().get(EntityItem.c)).orNull();
-
-        if (itemstack == null) {
-            if (this.world != null) {
-                EntityItem.b.error("Item entity {} has no item?!", new Object[] { Integer.valueOf(this.getId())});
-            }
-
-            return new ItemStack(Blocks.STONE);
-        } else {
-            return itemstack;
-        }
+        return (ItemStack) this.getDataWatcher().get(EntityItem.c);
     }
 
-    public void setItemStack(@Nullable ItemStack itemstack) {
-        this.getDataWatcher().set(EntityItem.c, Optional.fromNullable(itemstack));
+    public void setItemStack(ItemStack itemstack) {
+        this.getDataWatcher().set(EntityItem.c, itemstack);
         this.getDataWatcher().markDirty(EntityItem.c);
     }
 
