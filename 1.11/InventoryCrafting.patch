--- a/net/minecraft/server/InventoryCrafting.java
+++ b/net/minecraft/server/InventoryCrafting.java
@@ -1,35 +1,47 @@
 package net.minecraft.server;
 
-import javax.annotation.Nullable;
+import java.util.Iterator;
 
 public class InventoryCrafting implements IInventory {
 
-    private final ItemStack[] items;
+    private final NonNullList<ItemStack> items;
     private final int b;
     private final int c;
     private final Container d;
 
     public InventoryCrafting(Container container, int i, int j) {
-        int k = i * j;
-
-        this.items = new ItemStack[k];
+        this.items = NonNullList.a(i * j, ItemStack.a);
         this.d = container;
         this.b = i;
         this.c = j;
     }
 
     public int getSize() {
-        return this.items.length;
+        return this.items.size();
+    }
+
+    public boolean w_() {
+        Iterator iterator = this.items.iterator();
+
+        ItemStack itemstack;
+
+        do {
+            if (!iterator.hasNext()) {
+                return true;
+            }
+
+            itemstack = (ItemStack) iterator.next();
+        } while (itemstack.isEmpty());
+
+        return false;
     }
 
-    @Nullable
     public ItemStack getItem(int i) {
-        return i >= this.getSize() ? null : this.items[i];
+        return i >= this.getSize() ? ItemStack.a : (ItemStack) this.items.get(i);
     }
 
-    @Nullable
     public ItemStack c(int i, int j) {
-        return i >= 0 && i < this.b && j >= 0 && j <= this.c ? this.getItem(i + j * this.b) : null;
+        return i >= 0 && i < this.b && j >= 0 && j <= this.c ? this.getItem(i + j * this.b) : ItemStack.a;
     }
 
     public String getName() {
@@ -44,24 +56,22 @@
         return (IChatBaseComponent) (this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatMessage(this.getName(), new Object[0]));
     }
 
-    @Nullable
     public ItemStack splitWithoutUpdate(int i) {
         return ContainerUtil.a(this.items, i);
     }
 
-    @Nullable
     public ItemStack splitStack(int i, int j) {
         ItemStack itemstack = ContainerUtil.a(this.items, i, j);
 
-        if (itemstack != null) {
+        if (!itemstack.isEmpty()) {
             this.d.a((IInventory) this);
         }
 
         return itemstack;
     }
 
-    public void setItem(int i, @Nullable ItemStack itemstack) {
-        this.items[i] = itemstack;
+    public void setItem(int i, ItemStack itemstack) {
+        this.items.set(i, itemstack);
         this.d.a((IInventory) this);
     }
 
@@ -89,22 +99,19 @@
 
     public void setProperty(int i, int j) {}
 
-    public int g() {
+    public int h() {
         return 0;
     }
 
-    public void l() {
-        for (int i = 0; i < this.items.length; ++i) {
-            this.items[i] = null;
-        }
-
+    public void clear() {
+        this.items.clear();
     }
 
-    public int h() {
+    public int i() {
         return this.c;
     }
 
-    public int i() {
+    public int j() {
         return this.b;
     }
 }
