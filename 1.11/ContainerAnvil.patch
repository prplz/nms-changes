--- a/net/minecraft/server/ContainerAnvil.java
+++ b/net/minecraft/server/ContainerAnvil.java
@@ -2,7 +2,6 @@
 
 import java.util.Iterator;
 import java.util.Map;
-import javax.annotation.Nullable;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -31,7 +30,7 @@
         this.a(new Slot(this.h, 0, 27, 47));
         this.a(new Slot(this.h, 1, 76, 47));
         this.a(new Slot(this.g, 2, 134, 47) {
-            public boolean isAllowed(@Nullable ItemStack itemstack) {
+            public boolean isAllowed(ItemStack itemstack) {
                 return false;
             }
 
@@ -39,23 +38,23 @@
                 return (entityhuman.abilities.canInstantlyBuild || entityhuman.expLevel >= ContainerAnvil.this.a) && ContainerAnvil.this.a > 0 && this.hasItem();
             }
 
-            public void a(EntityHuman entityhuman, ItemStack itemstack) {
+            public ItemStack a(EntityHuman entityhuman, ItemStack itemstack) {
                 if (!entityhuman.abilities.canInstantlyBuild) {
                     entityhuman.levelDown(-ContainerAnvil.this.a);
                 }
 
-                ContainerAnvil.this.h.setItem(0, (ItemStack) null);
+                ContainerAnvil.this.h.setItem(0, ItemStack.a);
                 if (ContainerAnvil.this.k > 0) {
                     ItemStack itemstack1 = ContainerAnvil.this.h.getItem(1);
 
-                    if (itemstack1 != null && itemstack1.count > ContainerAnvil.this.k) {
-                        itemstack1.count -= ContainerAnvil.this.k;
+                    if (!itemstack1.isEmpty() && itemstack1.getCount() > ContainerAnvil.this.k) {
+                        itemstack1.subtract(ContainerAnvil.this.k);
                         ContainerAnvil.this.h.setItem(1, itemstack1);
                     } else {
-                        ContainerAnvil.this.h.setItem(1, (ItemStack) null);
+                        ContainerAnvil.this.h.setItem(1, ItemStack.a);
                     }
                 } else {
-                    ContainerAnvil.this.h.setItem(1, (ItemStack) null);
+                    ContainerAnvil.this.h.setItem(1, ItemStack.a);
                 }
 
                 ContainerAnvil.this.a = 0;
@@ -76,6 +75,7 @@
                     world.triggerEffect(1030, blockposition, 0);
                 }
 
+                return itemstack;
             }
         });
 
@@ -109,41 +109,41 @@
         byte b0 = 0;
         byte b1 = 0;
 
-        if (itemstack == null) {
-            this.g.setItem(0, (ItemStack) null);
+        if (itemstack.isEmpty()) {
+            this.g.setItem(0, ItemStack.a);
             this.a = 0;
         } else {
             ItemStack itemstack1 = itemstack.cloneItemStack();
             ItemStack itemstack2 = this.h.getItem(1);
             Map map = EnchantmentManager.a(itemstack1);
-            int j = b0 + itemstack.getRepairCost() + (itemstack2 == null ? 0 : itemstack2.getRepairCost());
+            int j = b0 + itemstack.getRepairCost() + (itemstack2.isEmpty() ? 0 : itemstack2.getRepairCost());
 
             this.k = 0;
-            if (itemstack2 != null) {
+            if (!itemstack2.isEmpty()) {
                 boolean flag = itemstack2.getItem() == Items.ENCHANTED_BOOK && !Items.ENCHANTED_BOOK.h(itemstack2).isEmpty();
                 int k;
                 int l;
                 int i1;
 
-                if (itemstack1.e() && itemstack1.getItem().a(itemstack, itemstack2)) {
-                    k = Math.min(itemstack1.h(), itemstack1.j() / 4);
+                if (itemstack1.f() && itemstack1.getItem().a(itemstack, itemstack2)) {
+                    k = Math.min(itemstack1.i(), itemstack1.k() / 4);
                     if (k <= 0) {
-                        this.g.setItem(0, (ItemStack) null);
+                        this.g.setItem(0, ItemStack.a);
                         this.a = 0;
                         return;
                     }
 
-                    for (l = 0; k > 0 && l < itemstack2.count; ++l) {
-                        i1 = itemstack1.h() - k;
+                    for (l = 0; k > 0 && l < itemstack2.getCount(); ++l) {
+                        i1 = itemstack1.i() - k;
                         itemstack1.setData(i1);
                         ++i;
-                        k = Math.min(itemstack1.h(), itemstack1.j() / 4);
+                        k = Math.min(itemstack1.i(), itemstack1.k() / 4);
                     }
 
                     this.k = l;
                 } else {
-                    if (!flag && (itemstack1.getItem() != itemstack2.getItem() || !itemstack1.e())) {
-                        this.g.setItem(0, (ItemStack) null);
+                    if (!flag && (itemstack1.getItem() != itemstack2.getItem() || !itemstack1.f())) {
+                        this.g.setItem(0, ItemStack.a);
                         this.a = 0;
                         return;
                     }
@@ -151,12 +151,12 @@
                     int j1;
                     int k1;
 
-                    if (itemstack1.e() && !flag) {
-                        k = itemstack.j() - itemstack.h();
-                        l = itemstack2.j() - itemstack2.h();
-                        i1 = l + itemstack1.j() * 12 / 100;
+                    if (itemstack1.f() && !flag) {
+                        k = itemstack.k() - itemstack.i();
+                        l = itemstack2.k() - itemstack2.i();
+                        i1 = l + itemstack1.k() * 12 / 100;
                         j1 = k + i1;
-                        k1 = itemstack1.j() - j1;
+                        k1 = itemstack1.k() - j1;
                         if (k1 < 0) {
                             k1 = 0;
                         }
@@ -202,20 +202,20 @@
                                 map.put(enchantment, Integer.valueOf(k1));
                                 int l1 = 0;
 
-                                switch (ContainerAnvil.SyntheticClass_1.a[enchantment.c().ordinal()]) {
-                                case 1:
+                                switch (enchantment.e()) {
+                                case COMMON:
                                     l1 = 1;
                                     break;
 
-                                case 2:
+                                case UNCOMMON:
                                     l1 = 2;
                                     break;
 
-                                case 3:
+                                case RARE:
                                     l1 = 4;
                                     break;
 
-                                case 4:
+                                case VERY_RARE:
                                     l1 = 8;
                                 }
 
@@ -234,17 +234,17 @@
                 if (itemstack.hasName()) {
                     b1 = 1;
                     i += b1;
-                    itemstack1.r();
+                    itemstack1.s();
                 }
             } else if (!this.l.equals(itemstack.getName())) {
                 b1 = 1;
                 i += b1;
-                itemstack1.c(this.l);
+                itemstack1.g(this.l);
             }
 
             this.a = j + i;
             if (i <= 0) {
-                itemstack1 = null;
+                itemstack1 = ItemStack.a;
             }
 
             if (b1 == i && b1 > 0 && this.a >= 40) {
@@ -252,13 +252,13 @@
             }
 
             if (this.a >= 40 && !this.m.abilities.canInstantlyBuild) {
-                itemstack1 = null;
+                itemstack1 = ItemStack.a;
             }
 
-            if (itemstack1 != null) {
+            if (!itemstack1.isEmpty()) {
                 int i2 = itemstack1.getRepairCost();
 
-                if (itemstack2 != null && i2 < itemstack2.getRepairCost()) {
+                if (!itemstack2.isEmpty() && i2 < itemstack2.getRepairCost()) {
                     i2 = itemstack2.getRepairCost();
                 }
 
@@ -286,7 +286,7 @@
             for (int i = 0; i < this.h.getSize(); ++i) {
                 ItemStack itemstack = this.h.splitWithoutUpdate(i);
 
-                if (itemstack != null) {
+                if (!itemstack.isEmpty()) {
                     entityhuman.drop(itemstack, false);
                 }
             }
@@ -295,12 +295,11 @@
     }
 
     public boolean a(EntityHuman entityhuman) {
-        return this.i.getType(this.j).getBlock() != Blocks.ANVIL ? false : entityhuman.e((double) this.j.getX() + 0.5D, (double) this.j.getY() + 0.5D, (double) this.j.getZ() + 0.5D) <= 64.0D;
+        return this.i.getType(this.j).getBlock() != Blocks.ANVIL ? false : entityhuman.d((double) this.j.getX() + 0.5D, (double) this.j.getY() + 0.5D, (double) this.j.getZ() + 0.5D) <= 64.0D;
     }
 
-    @Nullable
     public ItemStack b(EntityHuman entityhuman, int i) {
-        ItemStack itemstack = null;
+        ItemStack itemstack = ItemStack.a;
         Slot slot = (Slot) this.c.get(i);
 
         if (slot != null && slot.hasItem()) {
@@ -309,26 +308,26 @@
             itemstack = itemstack1.cloneItemStack();
             if (i == 2) {
                 if (!this.a(itemstack1, 3, 39, true)) {
-                    return null;
+                    return ItemStack.a;
                 }
 
                 slot.a(itemstack1, itemstack);
             } else if (i != 0 && i != 1) {
                 if (i >= 3 && i < 39 && !this.a(itemstack1, 0, 2, false)) {
-                    return null;
+                    return ItemStack.a;
                 }
             } else if (!this.a(itemstack1, 3, 39, false)) {
-                return null;
+                return ItemStack.a;
             }
 
-            if (itemstack1.count == 0) {
-                slot.set((ItemStack) null);
+            if (itemstack1.isEmpty()) {
+                slot.set(ItemStack.a);
             } else {
                 slot.f();
             }
 
-            if (itemstack1.count == itemstack.count) {
-                return null;
+            if (itemstack1.getCount() == itemstack.getCount()) {
+                return ItemStack.a;
             }
 
             slot.a(entityhuman, itemstack1);
@@ -343,44 +342,12 @@
             ItemStack itemstack = this.getSlot(2).getItem();
 
             if (StringUtils.isBlank(s)) {
-                itemstack.r();
+                itemstack.s();
             } else {
-                itemstack.c(this.l);
+                itemstack.g(this.l);
             }
         }
 
         this.e();
     }
-
-    static class SyntheticClass_1 {
-
-        static final int[] a = new int[Enchantment.Rarity.values().length];
-
-        static {
-            try {
-                ContainerAnvil.SyntheticClass_1.a[Enchantment.Rarity.COMMON.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
-            }
-
-            try {
-                ContainerAnvil.SyntheticClass_1.a[Enchantment.Rarity.UNCOMMON.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
-            }
-
-            try {
-                ContainerAnvil.SyntheticClass_1.a[Enchantment.Rarity.RARE.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
-            }
-
-            try {
-                ContainerAnvil.SyntheticClass_1.a[Enchantment.Rarity.VERY_RARE.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
-            }
-
-        }
-    }
 }
