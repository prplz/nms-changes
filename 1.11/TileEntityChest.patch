--- a/net/minecraft/server/TileEntityChest.java
+++ b/net/minecraft/server/TileEntityChest.java
@@ -4,9 +4,9 @@
 import java.util.List;
 import javax.annotation.Nullable;
 
-public class TileEntityChest extends TileEntityLootable implements ITickable, IInventory {
+public class TileEntityChest extends TileEntityLootable implements ITickable {
 
-    private ItemStack[] items = new ItemStack[27];
+    private NonNullList<ItemStack> items;
     public boolean a;
     public TileEntityChest f;
     public TileEntityChest g;
@@ -15,88 +15,55 @@
     public float j;
     public float k;
     public int l;
-    private int p;
-    private BlockChest.Type q;
-    private String r;
+    private int q;
+    private BlockChest.Type r;
 
-    public TileEntityChest() {}
+    public TileEntityChest() {
+        this.items = NonNullList.a(27, ItemStack.a);
+    }
 
     public TileEntityChest(BlockChest.Type blockchest_type) {
-        this.q = blockchest_type;
+        this.items = NonNullList.a(27, ItemStack.a);
+        this.r = blockchest_type;
     }
 
     public int getSize() {
         return 27;
     }
 
-    @Nullable
-    public ItemStack getItem(int i) {
-        this.d((EntityHuman) null);
-        return this.items[i];
-    }
-
-    @Nullable
-    public ItemStack splitStack(int i, int j) {
-        this.d((EntityHuman) null);
-        ItemStack itemstack = ContainerUtil.a(this.items, i, j);
-
-        if (itemstack != null) {
-            this.update();
-        }
+    public boolean w_() {
+        Iterator iterator = this.items.iterator();
 
-        return itemstack;
-    }
+        ItemStack itemstack;
 
-    @Nullable
-    public ItemStack splitWithoutUpdate(int i) {
-        this.d((EntityHuman) null);
-        return ContainerUtil.a(this.items, i);
-    }
+        do {
+            if (!iterator.hasNext()) {
+                return true;
+            }
 
-    public void setItem(int i, @Nullable ItemStack itemstack) {
-        this.d((EntityHuman) null);
-        this.items[i] = itemstack;
-        if (itemstack != null && itemstack.count > this.getMaxStackSize()) {
-            itemstack.count = this.getMaxStackSize();
-        }
+            itemstack = (ItemStack) iterator.next();
+        } while (itemstack.isEmpty());
 
-        this.update();
+        return false;
     }
 
     public String getName() {
-        return this.hasCustomName() ? this.r : "container.chest";
-    }
-
-    public boolean hasCustomName() {
-        return this.r != null && !this.r.isEmpty();
-    }
-
-    public void a(String s) {
-        this.r = s;
+        return this.hasCustomName() ? this.o : "container.chest";
     }
 
     public static void a(DataConverterManager dataconvertermanager) {
-        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, (DataInspector) (new DataInspectorItemList("Chest", new String[] { "Items"})));
+        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, (DataInspector) (new DataInspectorItemList(TileEntityChest.class, new String[] { "Items"})));
     }
 
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
-        this.items = new ItemStack[this.getSize()];
-        if (nbttagcompound.hasKeyOfType("CustomName", 8)) {
-            this.r = nbttagcompound.getString("CustomName");
-        }
-
+        this.items = NonNullList.a(this.getSize(), ItemStack.a);
         if (!this.c(nbttagcompound)) {
-            NBTTagList nbttaglist = nbttagcompound.getList("Items", 10);
-
-            for (int i = 0; i < nbttaglist.size(); ++i) {
-                NBTTagCompound nbttagcompound1 = nbttaglist.get(i);
-                int j = nbttagcompound1.getByte("Slot") & 255;
+            ContainerUtil.b(nbttagcompound, this.items);
+        }
 
-                if (j >= 0 && j < this.items.length) {
-                    this.items[j] = ItemStack.createStack(nbttagcompound1);
-                }
-            }
+        if (nbttagcompound.hasKeyOfType("CustomName", 8)) {
+            this.o = nbttagcompound.getString("CustomName");
         }
 
     }
@@ -104,23 +71,11 @@
     public NBTTagCompound save(NBTTagCompound nbttagcompound) {
         super.save(nbttagcompound);
         if (!this.d(nbttagcompound)) {
-            NBTTagList nbttaglist = new NBTTagList();
-
-            for (int i = 0; i < this.items.length; ++i) {
-                if (this.items[i] != null) {
-                    NBTTagCompound nbttagcompound1 = new NBTTagCompound();
-
-                    nbttagcompound1.setByte("Slot", (byte) i);
-                    this.items[i].save(nbttagcompound1);
-                    nbttaglist.add(nbttagcompound1);
-                }
-            }
-
-            nbttagcompound.set("Items", nbttaglist);
+            ContainerUtil.a(nbttagcompound, this.items);
         }
 
         if (this.hasCustomName()) {
-            nbttagcompound.setString("CustomName", this.r);
+            nbttagcompound.setString("CustomName", this.o);
         }
 
         return nbttagcompound;
@@ -130,39 +85,35 @@
         return 64;
     }
 
-    public boolean a(EntityHuman entityhuman) {
-        return this.world.getTileEntity(this.position) != this ? false : entityhuman.e((double) this.position.getX() + 0.5D, (double) this.position.getY() + 0.5D, (double) this.position.getZ() + 0.5D) <= 64.0D;
-    }
-
     public void invalidateBlockCache() {
         super.invalidateBlockCache();
         this.a = false;
     }
 
     private void a(TileEntityChest tileentitychest, EnumDirection enumdirection) {
-        if (tileentitychest.x()) {
+        if (tileentitychest.y()) {
             this.a = false;
         } else if (this.a) {
-            switch (TileEntityChest.SyntheticClass_1.a[enumdirection.ordinal()]) {
-            case 1:
+            switch (enumdirection) {
+            case NORTH:
                 if (this.f != tileentitychest) {
                     this.a = false;
                 }
                 break;
 
-            case 2:
+            case SOUTH:
                 if (this.i != tileentitychest) {
                     this.a = false;
                 }
                 break;
 
-            case 3:
+            case EAST:
                 if (this.g != tileentitychest) {
                     this.a = false;
                 }
                 break;
 
-            case 4:
+            case WEST:
                 if (this.h != tileentitychest) {
                     this.a = false;
                 }
@@ -171,7 +122,7 @@
 
     }
 
-    public void m() {
+    public void o() {
         if (!this.a) {
             this.a = true;
             this.h = this.a(EnumDirection.WEST);
@@ -205,20 +156,20 @@
         } else {
             Block block = this.world.getType(blockposition).getBlock();
 
-            return block instanceof BlockChest && ((BlockChest) block).g == this.o();
+            return block instanceof BlockChest && ((BlockChest) block).g == this.p();
         }
     }
 
-    public void E_() {
-        this.m();
+    public void F_() {
+        this.o();
         int i = this.position.getX();
         int j = this.position.getY();
         int k = this.position.getZ();
 
-        ++this.p;
+        ++this.q;
         float f;
 
-        if (!this.world.isClientSide && this.l != 0 && (this.p + i + j + k) % 200 == 0) {
+        if (!this.world.isClientSide && this.l != 0 && (this.q + i + j + k) % 200 == 0) {
             this.l = 0;
             f = 5.0F;
             List list = this.world.a(EntityHuman.class, new AxisAlignedBB((double) ((float) i - 5.0F), (double) ((float) j - 5.0F), (double) ((float) k - 5.0F), (double) ((float) (i + 1) + 5.0F), (double) ((float) (j + 1) + 5.0F), (double) ((float) (k + 1) + 5.0F)));
@@ -253,7 +204,7 @@
                 d1 += 0.5D;
             }
 
-            this.world.a((EntityHuman) null, d1, (double) j + 0.5D, d0, SoundEffects.X, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
+            this.world.a((EntityHuman) null, d1, (double) j + 0.5D, d0, SoundEffects.Z, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
         }
 
         if (this.l == 0 && this.j > 0.0F || this.l > 0 && this.j < 1.0F) {
@@ -283,7 +234,7 @@
                     d0 += 0.5D;
                 }
 
-                this.world.a((EntityHuman) null, d0, (double) j + 0.5D, d2, SoundEffects.V, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
+                this.world.a((EntityHuman) null, d0, (double) j + 0.5D, d2, SoundEffects.X, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
             }
 
             if (this.j < 0.0F) {
@@ -310,8 +261,10 @@
 
             ++this.l;
             this.world.playBlockAction(this.position, this.getBlock(), 1, this.l);
-            this.world.applyPhysics(this.position, this.getBlock());
-            this.world.applyPhysics(this.position.down(), this.getBlock());
+            this.world.applyPhysics(this.position, this.getBlock(), false);
+            if (this.p() == BlockChest.Type.TRAP) {
+                this.world.applyPhysics(this.position.down(), this.getBlock(), false);
+            }
         }
 
     }
@@ -320,32 +273,30 @@
         if (!entityhuman.isSpectator() && this.getBlock() instanceof BlockChest) {
             --this.l;
             this.world.playBlockAction(this.position, this.getBlock(), 1, this.l);
-            this.world.applyPhysics(this.position, this.getBlock());
-            this.world.applyPhysics(this.position.down(), this.getBlock());
+            this.world.applyPhysics(this.position, this.getBlock(), false);
+            if (this.p() == BlockChest.Type.TRAP) {
+                this.world.applyPhysics(this.position.down(), this.getBlock(), false);
+            }
         }
 
     }
 
-    public boolean b(int i, ItemStack itemstack) {
-        return true;
-    }
-
-    public void y() {
-        super.y();
+    public void z() {
+        super.z();
         this.invalidateBlockCache();
-        this.m();
+        this.o();
     }
 
-    public BlockChest.Type o() {
-        if (this.q == null) {
+    public BlockChest.Type p() {
+        if (this.r == null) {
             if (this.world == null || !(this.getBlock() instanceof BlockChest)) {
                 return BlockChest.Type.BASIC;
             }
 
-            this.q = ((BlockChest) this.getBlock()).g;
+            this.r = ((BlockChest) this.getBlock()).g;
         }
 
-        return this.q;
+        return this.r;
     }
 
     public String getContainerName() {
@@ -357,54 +308,7 @@
         return new ContainerChest(playerinventory, this, entityhuman);
     }
 
-    public int getProperty(int i) {
-        return 0;
-    }
-
-    public void setProperty(int i, int j) {}
-
-    public int g() {
-        return 0;
-    }
-
-    public void l() {
-        this.d((EntityHuman) null);
-
-        for (int i = 0; i < this.items.length; ++i) {
-            this.items[i] = null;
-        }
-
-    }
-
-    static class SyntheticClass_1 {
-
-        static final int[] a = new int[EnumDirection.values().length];
-
-        static {
-            try {
-                TileEntityChest.SyntheticClass_1.a[EnumDirection.NORTH.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
-            }
-
-            try {
-                TileEntityChest.SyntheticClass_1.a[EnumDirection.SOUTH.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
-            }
-
-            try {
-                TileEntityChest.SyntheticClass_1.a[EnumDirection.EAST.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
-            }
-
-            try {
-                TileEntityChest.SyntheticClass_1.a[EnumDirection.WEST.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
-            }
-
-        }
+    protected NonNullList<ItemStack> q() {
+        return this.items;
     }
 }
