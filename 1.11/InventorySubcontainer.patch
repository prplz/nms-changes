--- a/net/minecraft/server/InventorySubcontainer.java
+++ b/net/minecraft/server/InventorySubcontainer.java
@@ -1,14 +1,14 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+import java.util.Iterator;
 import java.util.List;
-import javax.annotation.Nullable;
 
 public class InventorySubcontainer implements IInventory {
 
     private String a;
     private final int b;
-    public final ItemStack[] items;
+    public final NonNullList<ItemStack> items;
     private List<IInventoryListener> d;
     private boolean e;
 
@@ -16,7 +16,7 @@
         this.a = s;
         this.e = flag;
         this.b = i;
-        this.items = new ItemStack[i];
+        this.items = NonNullList.a(i, ItemStack.a);
     }
 
     public void a(IInventoryListener iinventorylistener) {
@@ -31,73 +31,69 @@
         this.d.remove(iinventorylistener);
     }
 
-    @Nullable
     public ItemStack getItem(int i) {
-        return i >= 0 && i < this.items.length ? this.items[i] : null;
+        return i >= 0 && i < this.items.size() ? (ItemStack) this.items.get(i) : ItemStack.a;
     }
 
-    @Nullable
     public ItemStack splitStack(int i, int j) {
         ItemStack itemstack = ContainerUtil.a(this.items, i, j);
 
-        if (itemstack != null) {
+        if (!itemstack.isEmpty()) {
             this.update();
         }
 
         return itemstack;
     }
 
-    @Nullable
     public ItemStack a(ItemStack itemstack) {
         ItemStack itemstack1 = itemstack.cloneItemStack();
 
         for (int i = 0; i < this.b; ++i) {
             ItemStack itemstack2 = this.getItem(i);
 
-            if (itemstack2 == null) {
+            if (itemstack2.isEmpty()) {
                 this.setItem(i, itemstack1);
                 this.update();
-                return null;
+                return ItemStack.a;
             }
 
             if (ItemStack.c(itemstack2, itemstack1)) {
                 int j = Math.min(this.getMaxStackSize(), itemstack2.getMaxStackSize());
-                int k = Math.min(itemstack1.count, j - itemstack2.count);
+                int k = Math.min(itemstack1.getCount(), j - itemstack2.getCount());
 
                 if (k > 0) {
-                    itemstack2.count += k;
-                    itemstack1.count -= k;
-                    if (itemstack1.count <= 0) {
+                    itemstack2.add(k);
+                    itemstack1.subtract(k);
+                    if (itemstack1.isEmpty()) {
                         this.update();
-                        return null;
+                        return ItemStack.a;
                     }
                 }
             }
         }
 
-        if (itemstack1.count != itemstack.count) {
+        if (itemstack1.getCount() != itemstack.getCount()) {
             this.update();
         }
 
         return itemstack1;
     }
 
-    @Nullable
     public ItemStack splitWithoutUpdate(int i) {
-        if (this.items[i] != null) {
-            ItemStack itemstack = this.items[i];
+        ItemStack itemstack = (ItemStack) this.items.get(i);
 
-            this.items[i] = null;
-            return itemstack;
+        if (itemstack.isEmpty()) {
+            return ItemStack.a;
         } else {
-            return null;
+            this.items.set(i, ItemStack.a);
+            return itemstack;
         }
     }
 
-    public void setItem(int i, @Nullable ItemStack itemstack) {
-        this.items[i] = itemstack;
-        if (itemstack != null && itemstack.count > this.getMaxStackSize()) {
-            itemstack.count = this.getMaxStackSize();
+    public void setItem(int i, ItemStack itemstack) {
+        this.items.set(i, itemstack);
+        if (!itemstack.isEmpty() && itemstack.getCount() > this.getMaxStackSize()) {
+            itemstack.setCount(this.getMaxStackSize());
         }
 
         this.update();
@@ -107,6 +103,22 @@
         return this.b;
     }
 
+    public boolean w_() {
+        Iterator iterator = this.items.iterator();
+
+        ItemStack itemstack;
+
+        do {
+            if (!iterator.hasNext()) {
+                return true;
+            }
+
+            itemstack = (ItemStack) iterator.next();
+        } while (itemstack.isEmpty());
+
+        return false;
+    }
+
     public String getName() {
         return this.a;
     }
@@ -155,14 +167,11 @@
 
     public void setProperty(int i, int j) {}
 
-    public int g() {
+    public int h() {
         return 0;
     }
 
-    public void l() {
-        for (int i = 0; i < this.items.length; ++i) {
-            this.items[i] = null;
-        }
-
+    public void clear() {
+        this.items.clear();
     }
 }
