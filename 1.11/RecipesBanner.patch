--- a/net/minecraft/server/RecipesBanner.java
+++ b/net/minecraft/server/RecipesBanner.java
@@ -13,15 +13,13 @@
         for (int j = 0; j < i; ++j) {
             EnumColor enumcolor = aenumcolor[j];
 
-            craftingmanager.registerShapedRecipe(new ItemStack(Items.BANNER, 1, enumcolor.getInvColorIndex()), new Object[] { "###", "###", " | ", Character.valueOf('#'), new ItemStack(Blocks.WOOL, 1, enumcolor.getColorIndex()), Character.valueOf('|'), Items.STICK});
+            craftingmanager.registerShapedRecipe(ItemBanner.a(enumcolor, (NBTTagList) null), new Object[] { "###", "###", " | ", Character.valueOf('#'), new ItemStack(Blocks.WOOL, 1, enumcolor.getColorIndex()), Character.valueOf('|'), Items.STICK});
         }
 
-        craftingmanager.a(new RecipesBanner.DuplicateRecipe((RecipesBanner.SyntheticClass_1) null));
-        craftingmanager.a(new RecipesBanner.AddRecipe((RecipesBanner.SyntheticClass_1) null));
+        craftingmanager.a(new RecipesBanner.DuplicateRecipe(null));
+        craftingmanager.a(new RecipesBanner.AddRecipe(null));
     }
 
-    static class SyntheticClass_1 {    }
-
     static class AddRecipe implements IRecipe {
 
         private AddRecipe() {}
@@ -32,12 +30,12 @@
             for (int i = 0; i < inventorycrafting.getSize(); ++i) {
                 ItemStack itemstack = inventorycrafting.getItem(i);
 
-                if (itemstack != null && itemstack.getItem() == Items.BANNER) {
+                if (itemstack.getItem() == Items.BANNER) {
                     if (flag) {
                         return false;
                     }
 
-                    if (TileEntityBanner.c(itemstack) >= 6) {
+                    if (TileEntityBanner.b(itemstack) >= 6) {
                         return false;
                     }
 
@@ -52,35 +50,34 @@
             }
         }
 
-        @Nullable
         public ItemStack craftItem(InventoryCrafting inventorycrafting) {
-            ItemStack itemstack = null;
+            ItemStack itemstack = ItemStack.a;
 
             for (int i = 0; i < inventorycrafting.getSize(); ++i) {
                 ItemStack itemstack1 = inventorycrafting.getItem(i);
 
-                if (itemstack1 != null && itemstack1.getItem() == Items.BANNER) {
+                if (!itemstack1.isEmpty() && itemstack1.getItem() == Items.BANNER) {
                     itemstack = itemstack1.cloneItemStack();
-                    itemstack.count = 1;
+                    itemstack.setCount(1);
                     break;
                 }
             }
 
-            TileEntityBanner.EnumBannerPatternType tileentitybanner_enumbannerpatterntype = this.c(inventorycrafting);
+            EnumBannerPatternType enumbannerpatterntype = this.c(inventorycrafting);
 
-            if (tileentitybanner_enumbannerpatterntype != null) {
+            if (enumbannerpatterntype != null) {
                 int j = 0;
 
                 for (int k = 0; k < inventorycrafting.getSize(); ++k) {
                     ItemStack itemstack2 = inventorycrafting.getItem(k);
 
-                    if (itemstack2 != null && itemstack2.getItem() == Items.DYE) {
+                    if (itemstack2.getItem() == Items.DYE) {
                         j = itemstack2.getData();
                         break;
                     }
                 }
 
-                NBTTagCompound nbttagcompound = itemstack.a("BlockEntityTag", true);
+                NBTTagCompound nbttagcompound = itemstack.c("BlockEntityTag");
                 NBTTagList nbttaglist;
 
                 if (nbttagcompound.hasKeyOfType("Patterns", 9)) {
@@ -92,7 +89,7 @@
 
                 NBTTagCompound nbttagcompound1 = new NBTTagCompound();
 
-                nbttagcompound1.setString("Pattern", tileentitybanner_enumbannerpatterntype.b());
+                nbttagcompound1.setString("Pattern", enumbannerpatterntype.b());
                 nbttagcompound1.setInt("Color", j);
                 nbttaglist.add(nbttagcompound1);
             }
@@ -104,45 +101,44 @@
             return 10;
         }
 
-        @Nullable
         public ItemStack b() {
-            return null;
+            return ItemStack.a;
         }
 
-        public ItemStack[] b(InventoryCrafting inventorycrafting) {
-            ItemStack[] aitemstack = new ItemStack[inventorycrafting.getSize()];
+        public NonNullList<ItemStack> b(InventoryCrafting inventorycrafting) {
+            NonNullList nonnulllist = NonNullList.a(inventorycrafting.getSize(), ItemStack.a);
 
-            for (int i = 0; i < aitemstack.length; ++i) {
+            for (int i = 0; i < nonnulllist.size(); ++i) {
                 ItemStack itemstack = inventorycrafting.getItem(i);
 
-                if (itemstack != null && itemstack.getItem().r()) {
-                    aitemstack[i] = new ItemStack(itemstack.getItem().q());
+                if (itemstack.getItem().s()) {
+                    nonnulllist.set(i, new ItemStack(itemstack.getItem().r()));
                 }
             }
 
-            return aitemstack;
+            return nonnulllist;
         }
 
         @Nullable
-        private TileEntityBanner.EnumBannerPatternType c(InventoryCrafting inventorycrafting) {
-            TileEntityBanner.EnumBannerPatternType[] atileentitybanner_enumbannerpatterntype = TileEntityBanner.EnumBannerPatternType.values();
-            int i = atileentitybanner_enumbannerpatterntype.length;
+        private EnumBannerPatternType c(InventoryCrafting inventorycrafting) {
+            EnumBannerPatternType[] aenumbannerpatterntype = EnumBannerPatternType.values();
+            int i = aenumbannerpatterntype.length;
 
             for (int j = 0; j < i; ++j) {
-                TileEntityBanner.EnumBannerPatternType tileentitybanner_enumbannerpatterntype = atileentitybanner_enumbannerpatterntype[j];
+                EnumBannerPatternType enumbannerpatterntype = aenumbannerpatterntype[j];
 
-                if (tileentitybanner_enumbannerpatterntype.d()) {
+                if (enumbannerpatterntype.d()) {
                     boolean flag = true;
                     int k;
 
-                    if (tileentitybanner_enumbannerpatterntype.e()) {
+                    if (enumbannerpatterntype.e()) {
                         boolean flag1 = false;
                         boolean flag2 = false;
 
                         for (k = 0; k < inventorycrafting.getSize() && flag; ++k) {
                             ItemStack itemstack = inventorycrafting.getItem(k);
 
-                            if (itemstack != null && itemstack.getItem() != Items.BANNER) {
+                            if (!itemstack.isEmpty() && itemstack.getItem() != Items.BANNER) {
                                 if (itemstack.getItem() == Items.DYE) {
                                     if (flag2) {
                                         flag = false;
@@ -151,7 +147,7 @@
 
                                     flag2 = true;
                                 } else {
-                                    if (flag1 || !itemstack.doMaterialsMatch(tileentitybanner_enumbannerpatterntype.f())) {
+                                    if (flag1 || !itemstack.doMaterialsMatch(enumbannerpatterntype.f())) {
                                         flag = false;
                                         break;
                                     }
@@ -161,10 +157,10 @@
                             }
                         }
 
-                        if (!flag1) {
+                        if (!flag1 || !flag2) {
                             flag = false;
                         }
-                    } else if (inventorycrafting.getSize() != tileentitybanner_enumbannerpatterntype.c().length * tileentitybanner_enumbannerpatterntype.c()[0].length()) {
+                    } else if (inventorycrafting.getSize() != enumbannerpatterntype.c().length * enumbannerpatterntype.c()[0].length()) {
                         flag = false;
                     } else {
                         int l = -1;
@@ -174,7 +170,7 @@
                             int j1 = i1 % 3;
                             ItemStack itemstack1 = inventorycrafting.getItem(i1);
 
-                            if (itemstack1 != null && itemstack1.getItem() != Items.BANNER) {
+                            if (!itemstack1.isEmpty() && itemstack1.getItem() != Items.BANNER) {
                                 if (itemstack1.getItem() != Items.DYE) {
                                     flag = false;
                                     break;
@@ -185,13 +181,13 @@
                                     break;
                                 }
 
-                                if (tileentitybanner_enumbannerpatterntype.c()[k].charAt(j1) == 32) {
+                                if (enumbannerpatterntype.c()[k].charAt(j1) == 32) {
                                     flag = false;
                                     break;
                                 }
 
                                 l = itemstack1.getData();
-                            } else if (tileentitybanner_enumbannerpatterntype.c()[k].charAt(j1) != 32) {
+                            } else if (enumbannerpatterntype.c()[k].charAt(j1) != 32) {
                                 flag = false;
                                 break;
                             }
@@ -199,7 +195,7 @@
                     }
 
                     if (flag) {
-                        return tileentitybanner_enumbannerpatterntype;
+                        return enumbannerpatterntype;
                     }
                 }
             }
@@ -207,7 +203,7 @@
             return null;
         }
 
-        AddRecipe(RecipesBanner.SyntheticClass_1 recipesbanner_syntheticclass_1) {
+        AddRecipe(Object object) {
             this();
         }
     }
@@ -217,40 +213,40 @@
         private DuplicateRecipe() {}
 
         public boolean a(InventoryCrafting inventorycrafting, World world) {
-            ItemStack itemstack = null;
-            ItemStack itemstack1 = null;
+            ItemStack itemstack = ItemStack.a;
+            ItemStack itemstack1 = ItemStack.a;
 
             for (int i = 0; i < inventorycrafting.getSize(); ++i) {
                 ItemStack itemstack2 = inventorycrafting.getItem(i);
 
-                if (itemstack2 != null) {
+                if (!itemstack2.isEmpty()) {
                     if (itemstack2.getItem() != Items.BANNER) {
                         return false;
                     }
 
-                    if (itemstack != null && itemstack1 != null) {
+                    if (!itemstack.isEmpty() && !itemstack1.isEmpty()) {
                         return false;
                     }
 
-                    int j = TileEntityBanner.b(itemstack2);
-                    boolean flag = TileEntityBanner.c(itemstack2) > 0;
+                    EnumColor enumcolor = ItemBanner.c(itemstack2);
+                    boolean flag = TileEntityBanner.b(itemstack2) > 0;
 
-                    if (itemstack != null) {
+                    if (!itemstack.isEmpty()) {
                         if (flag) {
                             return false;
                         }
 
-                        if (j != TileEntityBanner.b(itemstack)) {
+                        if (enumcolor != ItemBanner.c(itemstack)) {
                             return false;
                         }
 
                         itemstack1 = itemstack2;
-                    } else if (itemstack1 != null) {
+                    } else if (!itemstack1.isEmpty()) {
                         if (!flag) {
                             return false;
                         }
 
-                        if (j != TileEntityBanner.b(itemstack1)) {
+                        if (enumcolor != ItemBanner.c(itemstack1)) {
                             return false;
                         }
 
@@ -263,54 +259,54 @@
                 }
             }
 
-            return itemstack != null && itemstack1 != null;
+            return !itemstack.isEmpty() && !itemstack1.isEmpty();
         }
 
-        @Nullable
         public ItemStack craftItem(InventoryCrafting inventorycrafting) {
             for (int i = 0; i < inventorycrafting.getSize(); ++i) {
                 ItemStack itemstack = inventorycrafting.getItem(i);
 
-                if (itemstack != null && TileEntityBanner.c(itemstack) > 0) {
+                if (!itemstack.isEmpty() && TileEntityBanner.b(itemstack) > 0) {
                     ItemStack itemstack1 = itemstack.cloneItemStack();
 
-                    itemstack1.count = 1;
+                    itemstack1.setCount(1);
                     return itemstack1;
                 }
             }
 
-            return null;
+            return ItemStack.a;
         }
 
         public int a() {
             return 2;
         }
 
-        @Nullable
         public ItemStack b() {
-            return null;
+            return ItemStack.a;
         }
 
-        public ItemStack[] b(InventoryCrafting inventorycrafting) {
-            ItemStack[] aitemstack = new ItemStack[inventorycrafting.getSize()];
+        public NonNullList<ItemStack> b(InventoryCrafting inventorycrafting) {
+            NonNullList nonnulllist = NonNullList.a(inventorycrafting.getSize(), ItemStack.a);
 
-            for (int i = 0; i < aitemstack.length; ++i) {
+            for (int i = 0; i < nonnulllist.size(); ++i) {
                 ItemStack itemstack = inventorycrafting.getItem(i);
 
-                if (itemstack != null) {
-                    if (itemstack.getItem().r()) {
-                        aitemstack[i] = new ItemStack(itemstack.getItem().q());
-                    } else if (itemstack.hasTag() && TileEntityBanner.c(itemstack) > 0) {
-                        aitemstack[i] = itemstack.cloneItemStack();
-                        aitemstack[i].count = 1;
+                if (!itemstack.isEmpty()) {
+                    if (itemstack.getItem().s()) {
+                        nonnulllist.set(i, new ItemStack(itemstack.getItem().r()));
+                    } else if (itemstack.hasTag() && TileEntityBanner.b(itemstack) > 0) {
+                        ItemStack itemstack1 = itemstack.cloneItemStack();
+
+                        itemstack1.setCount(1);
+                        nonnulllist.set(i, itemstack1);
                     }
                 }
             }
 
-            return aitemstack;
+            return nonnulllist;
         }
 
-        DuplicateRecipe(RecipesBanner.SyntheticClass_1 recipesbanner_syntheticclass_1) {
+        DuplicateRecipe(Object object) {
             this();
         }
     }
