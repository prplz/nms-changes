--- a/net/minecraft/server/EntityCreature.java
+++ b/net/minecraft/server/EntityCreature.java
@@ -4,35 +4,32 @@
 
 public abstract class EntityCreature extends EntityInsentient {
 
-    public static final UUID bv = UUID.fromString("E199AD21-BA8A-4C53-8D13-6182D5C69D3A");
-    public static final AttributeModifier bw = (new AttributeModifier(EntityCreature.bv, "Fleeing speed bonus", 2.0D, 2)).a(false);
+    public static final UUID bu = UUID.fromString("E199AD21-BA8A-4C53-8D13-6182D5C69D3A");
+    public static final AttributeModifier bv = (new AttributeModifier(EntityCreature.bu, "Fleeing speed bonus", 2.0D, 2)).a(false);
     private BlockPosition a;
     private float b;
-    private final PathfinderGoal c;
-    private boolean bx;
-    private float by;
+    private float c;
 
     public EntityCreature(World world) {
         super(world);
         this.a = BlockPosition.ZERO;
         this.b = -1.0F;
-        this.by = PathType.WATER.a();
-        this.c = new PathfinderGoalMoveTowardsRestriction(this, 1.0D);
+        this.c = PathType.WATER.a();
     }
 
     public float a(BlockPosition blockposition) {
         return 0.0F;
     }
 
-    public boolean cK() {
-        return super.cK() && this.a(new BlockPosition(this.locX, this.getBoundingBox().b, this.locZ)) >= 0.0F;
+    public boolean cM() {
+        return super.cM() && this.a(new BlockPosition(this.locX, this.getBoundingBox().b, this.locZ)) >= 0.0F;
     }
 
-    public boolean cY() {
+    public boolean da() {
         return !this.navigation.n();
     }
 
-    public boolean cZ() {
+    public boolean db() {
         return this.f(new BlockPosition(this));
     }
 
@@ -45,24 +42,24 @@
         this.b = (float) i;
     }
 
-    public BlockPosition da() {
+    public BlockPosition dc() {
         return this.a;
     }
 
-    public float db() {
+    public float dd() {
         return this.b;
     }
 
-    public void dc() {
+    public void de() {
         this.b = -1.0F;
     }
 
-    public boolean dd() {
+    public boolean df() {
         return this.b != -1.0F;
     }
 
-    protected void cT() {
-        super.cT();
+    protected void cV() {
+        super.cV();
         if (this.isLeashed() && this.getLeashHolder() != null && this.getLeashHolder().world == this.world) {
             Entity entity = this.getLeashHolder();
 
@@ -77,22 +74,11 @@
                 return;
             }
 
-            if (!this.bx) {
-                this.goalSelector.a(2, this.c);
-                if (this.getNavigation() instanceof Navigation) {
-                    this.by = this.a(PathType.WATER);
-                    this.a(PathType.WATER, 0.0F);
-                }
-
-                this.bx = true;
-            }
-
             this.q(f);
-            if (f > 4.0F) {
-                this.getNavigation().a(entity, 1.0D);
-            }
-
-            if (f > 6.0F) {
+            if (f > 10.0F) {
+                this.unleash(true, true);
+                this.goalSelector.c(1);
+            } else if (f > 6.0F) {
                 double d0 = (entity.locX - this.locX) / (double) f;
                 double d1 = (entity.locY - this.locY) / (double) f;
                 double d2 = (entity.locZ - this.locZ) / (double) f;
@@ -100,22 +86,20 @@
                 this.motX += d0 * Math.abs(d0) * 0.4D;
                 this.motY += d1 * Math.abs(d1) * 0.4D;
                 this.motZ += d2 * Math.abs(d2) * 0.4D;
-            }
+            } else {
+                this.goalSelector.d(1);
+                float f1 = 2.0F;
+                Vec3D vec3d = (new Vec3D(entity.locX - this.locX, entity.locY - this.locY, entity.locZ - this.locZ)).a().a((double) Math.max(f - 2.0F, 0.0F));
 
-            if (f > 10.0F) {
-                this.unleash(true, true);
-            }
-        } else if (!this.isLeashed() && this.bx) {
-            this.bx = false;
-            this.goalSelector.a(this.c);
-            if (this.getNavigation() instanceof Navigation) {
-                this.a(PathType.WATER, this.by);
+                this.getNavigation().a(this.locX + vec3d.x, this.locY + vec3d.y, this.locZ + vec3d.z, this.dg());
             }
-
-            this.dc();
         }
 
     }
 
+    protected double dg() {
+        return 1.0D;
+    }
+
     protected void q(float f) {}
 }
