--- a/net/minecraft/server/RandomPositionGenerator.java
+++ b/net/minecraft/server/RandomPositionGenerator.java
@@ -13,6 +13,11 @@
     }
 
     @Nullable
+    public static Vec3D b(EntityCreature entitycreature, int i, int j) {
+        return a(entitycreature, i, j, (Vec3D) null, false);
+    }
+
+    @Nullable
     public static Vec3D a(EntityCreature entitycreature, int i, int j, Vec3D vec3d) {
         RandomPositionGenerator.a = vec3d.a(entitycreature.locX, entitycreature.locY, entitycreature.locZ);
         return c(entitycreature, i, j, RandomPositionGenerator.a);
@@ -26,24 +31,30 @@
 
     @Nullable
     private static Vec3D c(EntityCreature entitycreature, int i, int j, @Nullable Vec3D vec3d) {
+        return a(entitycreature, i, j, vec3d, true);
+    }
+
+    @Nullable
+    private static Vec3D a(EntityCreature entitycreature, int i, int j, @Nullable Vec3D vec3d, boolean flag) {
         NavigationAbstract navigationabstract = entitycreature.getNavigation();
         Random random = entitycreature.getRandom();
-        boolean flag = false;
-        int k = 0;
-        int l = 0;
-        int i1 = 0;
-        float f = -99999.0F;
         boolean flag1;
 
-        if (entitycreature.dd()) {
-            double d0 = entitycreature.da().distanceSquared((double) MathHelper.floor(entitycreature.locX), (double) MathHelper.floor(entitycreature.locY), (double) MathHelper.floor(entitycreature.locZ)) + 4.0D;
-            double d1 = (double) (entitycreature.db() + (float) i);
+        if (entitycreature.df()) {
+            double d0 = entitycreature.dc().distanceSquared((double) MathHelper.floor(entitycreature.locX), (double) MathHelper.floor(entitycreature.locY), (double) MathHelper.floor(entitycreature.locZ)) + 4.0D;
+            double d1 = (double) (entitycreature.dd() + (float) i);
 
             flag1 = d0 < d1 * d1;
         } else {
             flag1 = false;
         }
 
+        boolean flag2 = false;
+        float f = -99999.0F;
+        int k = 0;
+        int l = 0;
+        int i1 = 0;
+
         for (int j1 = 0; j1 < 10; ++j1) {
             int k1 = random.nextInt(2 * i + 1) - i;
             int l1 = random.nextInt(2 * j + 1) - j;
@@ -52,8 +63,8 @@
             if (vec3d == null || (double) k1 * vec3d.x + (double) i2 * vec3d.z >= 0.0D) {
                 BlockPosition blockposition;
 
-                if (entitycreature.dd() && i > 1) {
-                    blockposition = entitycreature.da();
+                if (entitycreature.df() && i > 1) {
+                    blockposition = entitycreature.dc();
                     if (entitycreature.locX > (double) blockposition.getX()) {
                         k1 -= random.nextInt(i / 2);
                     } else {
@@ -69,6 +80,13 @@
 
                 blockposition = new BlockPosition((double) k1 + entitycreature.locX, (double) l1 + entitycreature.locY, (double) i2 + entitycreature.locZ);
                 if ((!flag1 || entitycreature.f(blockposition)) && navigationabstract.b(blockposition)) {
+                    if (!flag) {
+                        blockposition = a(blockposition, entitycreature);
+                        if (b(blockposition, entitycreature)) {
+                            continue;
+                        }
+                    }
+
                     float f1 = entitycreature.a(blockposition);
 
                     if (f1 > f) {
@@ -76,16 +94,34 @@
                         k = k1;
                         l = l1;
                         i1 = i2;
-                        flag = true;
+                        flag2 = true;
                     }
                 }
             }
         }
 
-        if (flag) {
+        if (flag2) {
             return new Vec3D((double) k + entitycreature.locX, (double) l + entitycreature.locY, (double) i1 + entitycreature.locZ);
         } else {
             return null;
         }
     }
+
+    private static BlockPosition a(BlockPosition blockposition, EntityCreature entitycreature) {
+        if (!entitycreature.world.getType(blockposition).getMaterial().isBuildable()) {
+            return blockposition;
+        } else {
+            BlockPosition blockposition1;
+
+            for (blockposition1 = blockposition.up(); blockposition1.getY() < entitycreature.world.getHeight() && entitycreature.world.getType(blockposition1).getMaterial().isBuildable(); blockposition1 = blockposition1.up()) {
+                ;
+            }
+
+            return blockposition1;
+        }
+    }
+
+    private static boolean b(BlockPosition blockposition, EntityCreature entitycreature) {
+        return entitycreature.world.getType(blockposition).getMaterial() == Material.WATER;
+    }
 }
