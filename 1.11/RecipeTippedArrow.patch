--- a/net/minecraft/server/RecipeTippedArrow.java
+++ b/net/minecraft/server/RecipeTippedArrow.java
@@ -1,21 +1,18 @@
 package net.minecraft.server;
 
 import java.util.Collection;
-import javax.annotation.Nullable;
 
-class RecipeTippedArrow implements IRecipe {
+public class RecipeTippedArrow implements IRecipe {
 
-    private static final ItemStack[] a = new ItemStack[9];
-
-    RecipeTippedArrow() {}
+    public RecipeTippedArrow() {}
 
     public boolean a(InventoryCrafting inventorycrafting, World world) {
-        if (inventorycrafting.i() == 3 && inventorycrafting.h() == 3) {
-            for (int i = 0; i < inventorycrafting.i(); ++i) {
-                for (int j = 0; j < inventorycrafting.h(); ++j) {
+        if (inventorycrafting.j() == 3 && inventorycrafting.i() == 3) {
+            for (int i = 0; i < inventorycrafting.j(); ++i) {
+                for (int j = 0; j < inventorycrafting.i(); ++j) {
                     ItemStack itemstack = inventorycrafting.c(i, j);
 
-                    if (itemstack == null) {
+                    if (itemstack.isEmpty()) {
                         return false;
                     }
 
@@ -37,18 +34,17 @@
         }
     }
 
-    @Nullable
     public ItemStack craftItem(InventoryCrafting inventorycrafting) {
         ItemStack itemstack = inventorycrafting.c(1, 1);
 
-        if (itemstack != null && itemstack.getItem() == Items.LINGERING_POTION) {
+        if (itemstack.getItem() != Items.LINGERING_POTION) {
+            return ItemStack.a;
+        } else {
             ItemStack itemstack1 = new ItemStack(Items.TIPPED_ARROW, 8);
 
-            PotionUtil.a(itemstack1, PotionUtil.c(itemstack));
+            PotionUtil.a(itemstack1, PotionUtil.d(itemstack));
             PotionUtil.a(itemstack1, (Collection) PotionUtil.b(itemstack));
             return itemstack1;
-        } else {
-            return null;
         }
     }
 
@@ -56,12 +52,11 @@
         return 9;
     }
 
-    @Nullable
     public ItemStack b() {
-        return null;
+        return ItemStack.a;
     }
 
-    public ItemStack[] b(InventoryCrafting inventorycrafting) {
-        return RecipeTippedArrow.a;
+    public NonNullList<ItemStack> b(InventoryCrafting inventorycrafting) {
+        return NonNullList.a(inventorycrafting.getSize(), ItemStack.a);
     }
 }
