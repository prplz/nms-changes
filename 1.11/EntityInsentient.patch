--- a/net/minecraft/server/EntityInsentient.java
+++ b/net/minecraft/server/EntityInsentient.java
@@ -22,22 +22,27 @@
     public PathfinderGoalSelector goalSelector;
     public PathfinderGoalSelector targetSelector;
     private EntityLiving goalTarget;
-    private final EntitySenses bw;
-    private final ItemStack[] bx = new ItemStack[2];
-    public float[] dropChanceHand = new float[2];
-    private final ItemStack[] by = new ItemStack[4];
-    public float[] dropChanceArmor = new float[4];
+    private final EntitySenses bv;
+    private final NonNullList<ItemStack> bw;
+    public float[] dropChanceHand;
+    private final NonNullList<ItemStack> bx;
+    public float[] dropChanceArmor;
     public boolean canPickUpLoot;
     public boolean persistent;
-    private final Map<PathType, Float> bB = Maps.newEnumMap(PathType.class);
-    private MinecraftKey bC;
-    private long bD;
-    private boolean bE;
+    private final Map<PathType, Float> bA;
+    private MinecraftKey bB;
+    private long bC;
+    private boolean bD;
     private Entity leashHolder;
-    private NBTTagCompound bG;
+    private NBTTagCompound bF;
 
     public EntityInsentient(World world) {
         super(world);
+        this.bw = NonNullList.a(2, ItemStack.a);
+        this.dropChanceHand = new float[2];
+        this.bx = NonNullList.a(4, ItemStack.a);
+        this.dropChanceArmor = new float[4];
+        this.bA = Maps.newEnumMap(PathType.class);
         this.goalSelector = new PathfinderGoalSelector(world != null && world.methodProfiler != null ? world.methodProfiler : null);
         this.targetSelector = new PathfinderGoalSelector(world != null && world.methodProfiler != null ? world.methodProfiler : null);
         this.lookController = new ControllerLook(this);
@@ -45,7 +50,7 @@
         this.g = new ControllerJump(this);
         this.c = this.s();
         this.navigation = this.b(world);
-        this.bw = new EntitySenses(this);
+        this.bv = new EntitySenses(this);
         Arrays.fill(this.dropChanceArmor, 0.085F);
         Arrays.fill(this.dropChanceHand, 0.085F);
         if (world != null && !world.isClientSide) {
@@ -66,13 +71,13 @@
     }
 
     public float a(PathType pathtype) {
-        Float float = (Float) this.bB.get(pathtype);
+        Float ofloat = (Float) this.bA.get(pathtype);
 
-        return float == null ? pathtype.a() : float.floatValue();
+        return ofloat == null ? pathtype.a() : ofloat.floatValue();
     }
 
     public void a(PathType pathtype, float f) {
-        this.bB.put(pathtype, Float.valueOf(f));
+        this.bA.put(pathtype, Float.valueOf(f));
     }
 
     protected EntityAIBodyControl s() {
@@ -96,7 +101,7 @@
     }
 
     public EntitySenses getEntitySenses() {
-        return this.bw;
+        return this.bv;
     }
 
     @Nullable
@@ -127,7 +132,7 @@
         SoundEffect soundeffect = this.G();
 
         if (soundeffect != null) {
-            this.a(soundeffect, this.ch(), this.ci());
+            this.a(soundeffect, this.ci(), this.cj());
         }
 
     }
@@ -158,14 +163,14 @@
 
             int j;
 
-            for (j = 0; j < this.by.length; ++j) {
-                if (this.by[j] != null && this.dropChanceArmor[j] <= 1.0F) {
+            for (j = 0; j < this.bx.size(); ++j) {
+                if (!((ItemStack) this.bx.get(j)).isEmpty() && this.dropChanceArmor[j] <= 1.0F) {
                     i += 1 + this.random.nextInt(3);
                 }
             }
 
-            for (j = 0; j < this.bx.length; ++j) {
-                if (this.bx[j] != null && this.dropChanceHand[j] <= 1.0F) {
+            for (j = 0; j < this.bw.size(); ++j) {
+                if (!((ItemStack) this.bw.get(j)).isEmpty() && this.dropChanceHand[j] <= 1.0F) {
                     i += 1 + this.random.nextInt(3);
                 }
             }
@@ -192,10 +197,10 @@
 
     }
 
-    public void m() {
-        super.m();
+    public void A_() {
+        super.A_();
         if (!this.world.isClientSide) {
-            this.cT();
+            this.cV();
             if (this.ticksLived % 5 == 0) {
                 boolean flag = !(this.bw() instanceof EntityInsentient);
                 boolean flag1 = !(this.bB() instanceof EntityBoat);
@@ -240,64 +245,50 @@
 
     }
 
-    public static void a(DataConverterManager dataconvertermanager, String s) {
-        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItemList(s, new String[] { "ArmorItems", "HandItems"})));
-    }
-
-    public static void a(DataConverterManager dataconvertermanager) {
-        a(dataconvertermanager, "Mob");
+    public static void a(DataConverterManager dataconvertermanager, Class<?> oclass) {
+        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItemList(oclass, new String[] { "ArmorItems", "HandItems"})));
     }
 
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
-        nbttagcompound.setBoolean("CanPickUpLoot", this.cR());
+        nbttagcompound.setBoolean("CanPickUpLoot", this.cT());
         nbttagcompound.setBoolean("PersistenceRequired", this.persistent);
         NBTTagList nbttaglist = new NBTTagList();
-        ItemStack[] aitemstack = this.by;
-        int i = aitemstack.length;
 
-        int j;
+        NBTTagCompound nbttagcompound1;
 
-        for (j = 0; j < i; ++j) {
-            ItemStack itemstack = aitemstack[j];
-            NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+        for (Iterator iterator = this.bx.iterator(); iterator.hasNext(); nbttaglist.add(nbttagcompound1)) {
+            ItemStack itemstack = (ItemStack) iterator.next();
 
-            if (itemstack != null) {
+            nbttagcompound1 = new NBTTagCompound();
+            if (!itemstack.isEmpty()) {
                 itemstack.save(nbttagcompound1);
             }
-
-            nbttaglist.add(nbttagcompound1);
         }
 
         nbttagcompound.set("ArmorItems", nbttaglist);
         NBTTagList nbttaglist1 = new NBTTagList();
-        ItemStack[] aitemstack1 = this.bx;
-
-        j = aitemstack1.length;
 
-        int k;
+        NBTTagCompound nbttagcompound2;
 
-        for (k = 0; k < j; ++k) {
-            ItemStack itemstack1 = aitemstack1[k];
-            NBTTagCompound nbttagcompound2 = new NBTTagCompound();
+        for (Iterator iterator1 = this.bw.iterator(); iterator1.hasNext(); nbttaglist1.add(nbttagcompound2)) {
+            ItemStack itemstack1 = (ItemStack) iterator1.next();
 
-            if (itemstack1 != null) {
+            nbttagcompound2 = new NBTTagCompound();
+            if (!itemstack1.isEmpty()) {
                 itemstack1.save(nbttagcompound2);
             }
-
-            nbttaglist1.add(nbttagcompound2);
         }
 
         nbttagcompound.set("HandItems", nbttaglist1);
         NBTTagList nbttaglist2 = new NBTTagList();
         float[] afloat = this.dropChanceArmor;
+        int i = afloat.length;
 
-        k = afloat.length;
-
-        int l;
+        int j;
 
-        for (l = 0; l < k; ++l) {
-            float f = afloat[l];
+        for (j = 0; j < i; ++j) {
+            float f = afloat[j];
 
             nbttaglist2.add(new NBTTagFloat(f));
         }
@@ -306,39 +297,38 @@
         NBTTagList nbttaglist3 = new NBTTagList();
         float[] afloat1 = this.dropChanceHand;
 
-        l = afloat1.length;
+        j = afloat1.length;
 
-        for (int i1 = 0; i1 < l; ++i1) {
-            float f1 = afloat1[i1];
+        for (int k = 0; k < j; ++k) {
+            float f1 = afloat1[k];
 
             nbttaglist3.add(new NBTTagFloat(f1));
         }
 
         nbttagcompound.set("HandDropChances", nbttaglist3);
-        nbttagcompound.setBoolean("Leashed", this.bE);
+        nbttagcompound.setBoolean("Leashed", this.bD);
         if (this.leashHolder != null) {
-            NBTTagCompound nbttagcompound3 = new NBTTagCompound();
-
+            nbttagcompound2 = new NBTTagCompound();
             if (this.leashHolder instanceof EntityLiving) {
                 UUID uuid = this.leashHolder.getUniqueID();
 
-                nbttagcompound3.a("UUID", uuid);
+                nbttagcompound2.a("UUID", uuid);
             } else if (this.leashHolder instanceof EntityHanging) {
                 BlockPosition blockposition = ((EntityHanging) this.leashHolder).getBlockPosition();
 
-                nbttagcompound3.setInt("X", blockposition.getX());
-                nbttagcompound3.setInt("Y", blockposition.getY());
-                nbttagcompound3.setInt("Z", blockposition.getZ());
+                nbttagcompound2.setInt("X", blockposition.getX());
+                nbttagcompound2.setInt("Y", blockposition.getY());
+                nbttagcompound2.setInt("Z", blockposition.getZ());
             }
 
-            nbttagcompound.set("Leash", nbttagcompound3);
+            nbttagcompound.set("Leash", nbttagcompound2);
         }
 
-        nbttagcompound.setBoolean("LeftHanded", this.cX());
-        if (this.bC != null) {
-            nbttagcompound.setString("DeathLootTable", this.bC.toString());
-            if (this.bD != 0L) {
-                nbttagcompound.setLong("DeathLootTableSeed", this.bD);
+        nbttagcompound.setBoolean("LeftHanded", this.cZ());
+        if (this.bB != null) {
+            nbttagcompound.setString("DeathLootTable", this.bB.toString());
+            if (this.bC != 0L) {
+                nbttagcompound.setLong("DeathLootTableSeed", this.bC);
             }
         }
 
@@ -361,16 +351,16 @@
         if (nbttagcompound.hasKeyOfType("ArmorItems", 9)) {
             nbttaglist = nbttagcompound.getList("ArmorItems", 10);
 
-            for (i = 0; i < this.by.length; ++i) {
-                this.by[i] = ItemStack.createStack(nbttaglist.get(i));
+            for (i = 0; i < this.bx.size(); ++i) {
+                this.bx.set(i, new ItemStack(nbttaglist.get(i)));
             }
         }
 
         if (nbttagcompound.hasKeyOfType("HandItems", 9)) {
             nbttaglist = nbttagcompound.getList("HandItems", 10);
 
-            for (i = 0; i < this.bx.length; ++i) {
-                this.bx[i] = ItemStack.createStack(nbttaglist.get(i));
+            for (i = 0; i < this.bw.size(); ++i) {
+                this.bw.set(i, new ItemStack(nbttaglist.get(i)));
             }
         }
 
@@ -390,15 +380,15 @@
             }
         }
 
-        this.bE = nbttagcompound.getBoolean("Leashed");
-        if (this.bE && nbttagcompound.hasKeyOfType("Leash", 10)) {
-            this.bG = nbttagcompound.getCompound("Leash");
+        this.bD = nbttagcompound.getBoolean("Leashed");
+        if (this.bD && nbttagcompound.hasKeyOfType("Leash", 10)) {
+            this.bF = nbttagcompound.getCompound("Leash");
         }
 
         this.o(nbttagcompound.getBoolean("LeftHanded"));
         if (nbttagcompound.hasKeyOfType("DeathLootTable", 8)) {
-            this.bC = new MinecraftKey(nbttagcompound.getString("DeathLootTable"));
-            this.bD = nbttagcompound.getLong("DeathLootTableSeed");
+            this.bB = new MinecraftKey(nbttagcompound.getString("DeathLootTable"));
+            this.bC = nbttagcompound.getLong("DeathLootTableSeed");
         }
 
         this.setAI(nbttagcompound.getBoolean("NoAI"));
@@ -410,7 +400,7 @@
     }
 
     protected void a(boolean flag, int i, DamageSource damagesource) {
-        MinecraftKey minecraftkey = this.bC;
+        MinecraftKey minecraftkey = this.bB;
 
         if (minecraftkey == null) {
             minecraftkey = this.J();
@@ -419,14 +409,14 @@
         if (minecraftkey != null) {
             LootTable loottable = this.world.ak().a(minecraftkey);
 
-            this.bC = null;
+            this.bB = null;
             LootTableInfo.a loottableinfo_a = (new LootTableInfo.a((WorldServer) this.world)).a((Entity) this).a(damagesource);
 
             if (flag && this.killer != null) {
-                loottableinfo_a = loottableinfo_a.a(this.killer).a(this.killer.dg());
+                loottableinfo_a = loottableinfo_a.a(this.killer).a(this.killer.dj());
             }
 
-            List list = loottable.a(this.bD == 0L ? this.random : new Random(this.bD), loottableinfo_a.a());
+            List list = loottable.a(this.bC == 0L ? this.random : new Random(this.bC), loottableinfo_a.a());
             Iterator iterator = list.iterator();
 
             while (iterator.hasNext()) {
@@ -443,11 +433,11 @@
     }
 
     public void o(float f) {
-        this.bg = f;
+        this.bf = f;
     }
 
     public void p(float f) {
-        this.bf = f;
+        this.be = f;
     }
 
     public void l(float f) {
@@ -458,14 +448,14 @@
     public void n() {
         super.n();
         this.world.methodProfiler.a("looting");
-        if (!this.world.isClientSide && this.cR() && !this.aV && this.world.getGameRules().getBoolean("mobGriefing")) {
+        if (!this.world.isClientSide && this.cT() && !this.aU && this.world.getGameRules().getBoolean("mobGriefing")) {
             List list = this.world.a(EntityItem.class, this.getBoundingBox().grow(1.0D, 0.0D, 1.0D));
             Iterator iterator = list.iterator();
 
             while (iterator.hasNext()) {
                 EntityItem entityitem = (EntityItem) iterator.next();
 
-                if (!entityitem.dead && entityitem.getItemStack() != null && !entityitem.t()) {
+                if (!entityitem.dead && !entityitem.getItemStack().isEmpty() && !entityitem.t()) {
                     this.a(entityitem);
                 }
             }
@@ -480,7 +470,7 @@
         boolean flag = true;
         ItemStack itemstack1 = this.getEquipment(enumitemslot);
 
-        if (itemstack1 != null) {
+        if (!itemstack1.isEmpty()) {
             if (enumitemslot.a() == EnumItemSlot.Function.HAND) {
                 if (itemstack.getItem() instanceof ItemSword && !(itemstack1.getItem() instanceof ItemSword)) {
                     flag = true;
@@ -500,7 +490,7 @@
                 }
             } else if (itemstack.getItem() instanceof ItemArmor && !(itemstack1.getItem() instanceof ItemArmor)) {
                 flag = true;
-            } else if (itemstack.getItem() instanceof ItemArmor && itemstack1.getItem() instanceof ItemArmor) {
+            } else if (itemstack.getItem() instanceof ItemArmor && itemstack1.getItem() instanceof ItemArmor && !EnchantmentManager.b(itemstack1)) {
                 ItemArmor itemarmor = (ItemArmor) itemstack.getItem();
                 ItemArmor itemarmor1 = (ItemArmor) itemstack1.getItem();
 
@@ -517,12 +507,12 @@
         if (flag && this.c(itemstack)) {
             double d0;
 
-            switch (EntityInsentient.SyntheticClass_1.a[enumitemslot.a().ordinal()]) {
-            case 1:
+            switch (enumitemslot.a()) {
+            case HAND:
                 d0 = (double) this.dropChanceHand[enumitemslot.b()];
                 break;
 
-            case 2:
+            case ARMOR:
                 d0 = (double) this.dropChanceArmor[enumitemslot.b()];
                 break;
 
@@ -530,7 +520,7 @@
                 d0 = 0.0D;
             }
 
-            if (itemstack1 != null && (double) (this.random.nextFloat() - 0.1F) < d0) {
+            if (!itemstack1.isEmpty() && (double) (this.random.nextFloat() - 0.1F) < d0) {
                 this.a(itemstack1, 0.0F);
             }
 
@@ -543,17 +533,17 @@
             }
 
             this.setSlot(enumitemslot, itemstack);
-            switch (EntityInsentient.SyntheticClass_1.a[enumitemslot.a().ordinal()]) {
-            case 1:
+            switch (enumitemslot.a()) {
+            case HAND:
                 this.dropChanceHand[enumitemslot.b()] = 2.0F;
                 break;
 
-            case 2:
+            case ARMOR:
                 this.dropChanceArmor[enumitemslot.b()] = 2.0F;
             }
 
             this.persistent = true;
-            this.receive(entityitem, 1);
+            this.receive(entityitem, itemstack.getCount());
             entityitem.die();
         }
 
@@ -599,7 +589,7 @@
         this.L();
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("sensing");
-        this.bw.a();
+        this.bv.a();
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("targetSelector");
         this.targetSelector.a();
@@ -637,7 +627,7 @@
         return 40;
     }
 
-    public int cJ() {
+    public int cL() {
         return 10;
     }
 
@@ -655,8 +645,8 @@
         }
 
         double d3 = (double) MathHelper.sqrt(d0 * d0 + d1 * d1);
-        float f2 = (float) (MathHelper.b(d1, d0) * 57.2957763671875D) - 90.0F;
-        float f3 = (float) (-(MathHelper.b(d2, d3) * 57.2957763671875D));
+        float f2 = (float) (MathHelper.c(d1, d0) * 57.2957763671875D) - 90.0F;
+        float f3 = (float) (-(MathHelper.c(d2, d3) * 57.2957763671875D));
 
         this.pitch = this.b(this.pitch, f3, f1);
         this.yaw = this.b(this.yaw, f2, f);
@@ -676,7 +666,7 @@
         return f + f3;
     }
 
-    public boolean cK() {
+    public boolean cM() {
         IBlockData iblockdata = this.world.getType((new BlockPosition(this)).down());
 
         return iblockdata.a((Entity) this);
@@ -686,7 +676,7 @@
         return !this.world.containsLiquid(this.getBoundingBox()) && this.world.getCubes(this, this.getBoundingBox()).isEmpty() && this.world.a(this.getBoundingBox(), (Entity) this);
     }
 
-    public int cO() {
+    public int cQ() {
         return 4;
     }
 
@@ -706,37 +696,34 @@
     }
 
     public Iterable<ItemStack> aG() {
-        return Arrays.asList(this.bx);
+        return this.bw;
     }
 
     public Iterable<ItemStack> getArmorItems() {
-        return Arrays.asList(this.by);
+        return this.bx;
     }
 
-    @Nullable
     public ItemStack getEquipment(EnumItemSlot enumitemslot) {
-        ItemStack itemstack = null;
+        switch (enumitemslot.a()) {
+        case HAND:
+            return (ItemStack) this.bw.get(enumitemslot.b());
 
-        switch (EntityInsentient.SyntheticClass_1.a[enumitemslot.a().ordinal()]) {
-        case 1:
-            itemstack = this.bx[enumitemslot.b()];
-            break;
+        case ARMOR:
+            return (ItemStack) this.bx.get(enumitemslot.b());
 
-        case 2:
-            itemstack = this.by[enumitemslot.b()];
+        default:
+            return ItemStack.a;
         }
-
-        return itemstack;
     }
 
-    public void setSlot(EnumItemSlot enumitemslot, @Nullable ItemStack itemstack) {
-        switch (EntityInsentient.SyntheticClass_1.a[enumitemslot.a().ordinal()]) {
-        case 1:
-            this.bx[enumitemslot.b()] = itemstack;
+    public void setSlot(EnumItemSlot enumitemslot, ItemStack itemstack) {
+        switch (enumitemslot.a()) {
+        case HAND:
+            this.bw.set(enumitemslot.b(), itemstack);
             break;
 
-        case 2:
-            this.by[enumitemslot.b()] = itemstack;
+        case ARMOR:
+            this.bx.set(enumitemslot.b(), itemstack);
         }
 
     }
@@ -750,12 +737,12 @@
             ItemStack itemstack = this.getEquipment(enumitemslot);
             double d0;
 
-            switch (EntityInsentient.SyntheticClass_1.a[enumitemslot.a().ordinal()]) {
-            case 1:
+            switch (enumitemslot.a()) {
+            case HAND:
                 d0 = (double) this.dropChanceHand[enumitemslot.b()];
                 break;
 
-            case 2:
+            case ARMOR:
                 d0 = (double) this.dropChanceArmor[enumitemslot.b()];
                 break;
 
@@ -765,20 +752,9 @@
 
             boolean flag1 = d0 > 1.0D;
 
-            if (itemstack != null && (flag || flag1) && (double) (this.random.nextFloat() - (float) i * 0.01F) < d0) {
-                if (!flag1 && itemstack.e()) {
-                    int l = Math.max(itemstack.j() - 25, 1);
-                    int i1 = itemstack.j() - this.random.nextInt(this.random.nextInt(l) + 1);
-
-                    if (i1 > l) {
-                        i1 = l;
-                    }
-
-                    if (i1 < 1) {
-                        i1 = 1;
-                    }
-
-                    itemstack.setData(i1);
+            if (!itemstack.isEmpty() && !EnchantmentManager.c(itemstack) && (flag || flag1) && (double) (this.random.nextFloat() - (float) i * 0.01F) < d0) {
+                if (!flag1 && itemstack.f()) {
+                    itemstack.setData(itemstack.k() - this.random.nextInt(1 + this.random.nextInt(Math.max(itemstack.k() - 3, 1))));
                 }
 
                 this.a(itemstack, 0.0F);
@@ -819,7 +795,7 @@
                     }
 
                     flag = false;
-                    if (itemstack == null) {
+                    if (itemstack.isEmpty()) {
                         Item item = a(enumitemslot, i);
 
                         if (item != null) {
@@ -833,12 +809,13 @@
     }
 
     public static EnumItemSlot d(ItemStack itemstack) {
-        return itemstack.getItem() != Item.getItemOf(Blocks.PUMPKIN) && itemstack.getItem() != Items.SKULL ? (itemstack.getItem() instanceof ItemArmor ? ((ItemArmor) itemstack.getItem()).c : (itemstack.getItem() == Items.cR ? EnumItemSlot.CHEST : (itemstack.getItem() == Items.SHIELD ? EnumItemSlot.OFFHAND : EnumItemSlot.MAINHAND))) : EnumItemSlot.HEAD;
+        return itemstack.getItem() != Item.getItemOf(Blocks.PUMPKIN) && itemstack.getItem() != Items.SKULL ? (itemstack.getItem() instanceof ItemArmor ? ((ItemArmor) itemstack.getItem()).c : (itemstack.getItem() == Items.cS ? EnumItemSlot.CHEST : (itemstack.getItem() == Items.SHIELD ? EnumItemSlot.OFFHAND : EnumItemSlot.MAINHAND))) : EnumItemSlot.HEAD;
     }
 
+    @Nullable
     public static Item a(EnumItemSlot enumitemslot, int i) {
-        switch (EntityInsentient.SyntheticClass_1.b[enumitemslot.ordinal()]) {
-        case 1:
+        switch (enumitemslot) {
+        case HEAD:
             if (i == 0) {
                 return Items.LEATHER_HELMET;
             } else if (i == 1) {
@@ -851,7 +828,7 @@
                 return Items.DIAMOND_HELMET;
             }
 
-        case 2:
+        case CHEST:
             if (i == 0) {
                 return Items.LEATHER_CHESTPLATE;
             } else if (i == 1) {
@@ -864,7 +841,7 @@
                 return Items.DIAMOND_CHESTPLATE;
             }
 
-        case 3:
+        case LEGS:
             if (i == 0) {
                 return Items.LEATHER_LEGGINGS;
             } else if (i == 1) {
@@ -877,7 +854,7 @@
                 return Items.DIAMOND_LEGGINGS;
             }
 
-        case 4:
+        case FEET:
             if (i == 0) {
                 return Items.LEATHER_BOOTS;
             } else if (i == 1) {
@@ -898,8 +875,8 @@
     protected void b(DifficultyDamageScaler difficultydamagescaler) {
         float f = difficultydamagescaler.d();
 
-        if (this.getItemInMainHand() != null && this.random.nextFloat() < 0.25F * f) {
-            EnchantmentManager.a(this.random, this.getItemInMainHand(), (int) (5.0F + f * (float) this.random.nextInt(18)), false);
+        if (!this.getItemInMainHand().isEmpty() && this.random.nextFloat() < 0.25F * f) {
+            this.setSlot(EnumItemSlot.MAINHAND, EnchantmentManager.a(this.random, this.getItemInMainHand(), (int) (5.0F + f * (float) this.random.nextInt(18)), false));
         }
 
         EnumItemSlot[] aenumitemslot = EnumItemSlot.values();
@@ -911,8 +888,8 @@
             if (enumitemslot.a() == EnumItemSlot.Function.ARMOR) {
                 ItemStack itemstack = this.getEquipment(enumitemslot);
 
-                if (itemstack != null && this.random.nextFloat() < 0.5F * f) {
-                    EnchantmentManager.a(this.random, itemstack, (int) (5.0F + f * (float) this.random.nextInt(18)), false);
+                if (!itemstack.isEmpty() && this.random.nextFloat() < 0.5F * f) {
+                    this.setSlot(enumitemslot, EnchantmentManager.a(this.random, itemstack, (int) (5.0F + f * (float) this.random.nextInt(18)), false));
                 }
             }
         }
@@ -931,27 +908,27 @@
         return groupdataentity;
     }
 
-    public boolean cP() {
+    public boolean cR() {
         return false;
     }
 
-    public void cQ() {
+    public void cS() {
         this.persistent = true;
     }
 
     public void a(EnumItemSlot enumitemslot, float f) {
-        switch (EntityInsentient.SyntheticClass_1.a[enumitemslot.a().ordinal()]) {
-        case 1:
+        switch (enumitemslot.a()) {
+        case HAND:
             this.dropChanceHand[enumitemslot.b()] = f;
             break;
 
-        case 2:
+        case ARMOR:
             this.dropChanceArmor[enumitemslot.b()] = f;
         }
 
     }
 
-    public boolean cR() {
+    public boolean cT() {
         return this.canPickUpLoot;
     }
 
@@ -963,29 +940,33 @@
         return this.persistent;
     }
 
-    public final boolean a(EntityHuman entityhuman, @Nullable ItemStack itemstack, EnumHand enumhand) {
+    public final boolean b(EntityHuman entityhuman, EnumHand enumhand) {
         if (this.isLeashed() && this.getLeashHolder() == entityhuman) {
             this.unleash(true, !entityhuman.abilities.canInstantlyBuild);
             return true;
-        } else if (itemstack != null && itemstack.getItem() == Items.LEAD && this.a(entityhuman)) {
-            this.setLeashHolder(entityhuman, true);
-            --itemstack.count;
-            return true;
         } else {
-            return this.a(entityhuman, enumhand, itemstack) ? true : super.a(entityhuman, itemstack, enumhand);
+            ItemStack itemstack = entityhuman.b(enumhand);
+
+            if (itemstack.getItem() == Items.LEAD && this.a(entityhuman)) {
+                this.setLeashHolder(entityhuman, true);
+                itemstack.subtract(1);
+                return true;
+            } else {
+                return this.a(entityhuman, enumhand) ? true : super.b(entityhuman, enumhand);
+            }
         }
     }
 
-    protected boolean a(EntityHuman entityhuman, EnumHand enumhand, @Nullable ItemStack itemstack) {
+    protected boolean a(EntityHuman entityhuman, EnumHand enumhand) {
         return false;
     }
 
-    protected void cT() {
-        if (this.bG != null) {
-            this.cY();
+    protected void cV() {
+        if (this.bF != null) {
+            this.da();
         }
 
-        if (this.bE) {
+        if (this.bD) {
             if (!this.isAlive()) {
                 this.unleash(true, true);
             }
@@ -997,8 +978,8 @@
     }
 
     public void unleash(boolean flag, boolean flag1) {
-        if (this.bE) {
-            this.bE = false;
+        if (this.bD) {
+            this.bD = false;
             this.leashHolder = null;
             if (!this.world.isClientSide && flag1) {
                 this.a(Items.LEAD, 1);
@@ -1016,7 +997,7 @@
     }
 
     public boolean isLeashed() {
-        return this.bE;
+        return this.bD;
     }
 
     public Entity getLeashHolder() {
@@ -1024,7 +1005,7 @@
     }
 
     public void setLeashHolder(Entity entity, boolean flag) {
-        this.bE = true;
+        this.bD = true;
         this.leashHolder = entity;
         if (!this.world.isClientSide && flag && this.world instanceof WorldServer) {
             ((WorldServer) this.world).getTracker().a((Entity) this, (Packet) (new PacketPlayOutAttachEntity(this, this.leashHolder)));
@@ -1046,10 +1027,10 @@
         return flag1;
     }
 
-    private void cY() {
-        if (this.bE && this.bG != null) {
-            if (this.bG.b("UUID")) {
-                UUID uuid = this.bG.a("UUID");
+    private void da() {
+        if (this.bD && this.bF != null) {
+            if (this.bF.b("UUID")) {
+                UUID uuid = this.bF.a("UUID");
                 List list = this.world.a(EntityLiving.class, this.getBoundingBox().g(10.0D));
                 Iterator iterator = list.iterator();
 
@@ -1057,28 +1038,28 @@
                     EntityLiving entityliving = (EntityLiving) iterator.next();
 
                     if (entityliving.getUniqueID().equals(uuid)) {
-                        this.leashHolder = entityliving;
+                        this.setLeashHolder(entityliving, true);
                         break;
                     }
                 }
-            } else if (this.bG.hasKeyOfType("X", 99) && this.bG.hasKeyOfType("Y", 99) && this.bG.hasKeyOfType("Z", 99)) {
-                BlockPosition blockposition = new BlockPosition(this.bG.getInt("X"), this.bG.getInt("Y"), this.bG.getInt("Z"));
+            } else if (this.bF.hasKeyOfType("X", 99) && this.bF.hasKeyOfType("Y", 99) && this.bF.hasKeyOfType("Z", 99)) {
+                BlockPosition blockposition = new BlockPosition(this.bF.getInt("X"), this.bF.getInt("Y"), this.bF.getInt("Z"));
                 EntityLeash entityleash = EntityLeash.b(this.world, blockposition);
 
                 if (entityleash == null) {
                     entityleash = EntityLeash.a(this.world, blockposition);
                 }
 
-                this.leashHolder = entityleash;
+                this.setLeashHolder(entityleash, true);
             } else {
                 this.unleash(false, true);
             }
         }
 
-        this.bG = null;
+        this.bF = null;
     }
 
-    public boolean c(int i, @Nullable ItemStack itemstack) {
+    public boolean c(int i, ItemStack itemstack) {
         EnumItemSlot enumitemslot;
 
         if (i == 98) {
@@ -1099,7 +1080,7 @@
             enumitemslot = EnumItemSlot.FEET;
         }
 
-        if (itemstack != null && !b(enumitemslot, itemstack) && enumitemslot != EnumItemSlot.HEAD) {
+        if (!itemstack.isEmpty() && !b(enumitemslot, itemstack) && enumitemslot != EnumItemSlot.HEAD) {
             return false;
         } else {
             this.setSlot(enumitemslot, itemstack);
@@ -1107,14 +1088,18 @@
         }
     }
 
+    public boolean bA() {
+        return this.cR() && super.bA();
+    }
+
     public static boolean b(EnumItemSlot enumitemslot, ItemStack itemstack) {
         EnumItemSlot enumitemslot1 = d(itemstack);
 
         return enumitemslot1 == enumitemslot || enumitemslot1 == EnumItemSlot.MAINHAND && enumitemslot == EnumItemSlot.OFFHAND || enumitemslot1 == EnumItemSlot.OFFHAND && enumitemslot == EnumItemSlot.MAINHAND;
     }
 
-    public boolean ct() {
-        return super.ct() && !this.hasAI();
+    public boolean cu() {
+        return super.cu() && !this.hasAI();
     }
 
     public void setAI(boolean flag) {
@@ -1133,59 +1118,12 @@
         return (((Byte) this.datawatcher.get(EntityInsentient.a)).byteValue() & 1) != 0;
     }
 
-    public boolean cX() {
+    public boolean cZ() {
         return (((Byte) this.datawatcher.get(EntityInsentient.a)).byteValue() & 2) != 0;
     }
 
     public EnumMainHand getMainHand() {
-        return this.cX() ? EnumMainHand.LEFT : EnumMainHand.RIGHT;
-    }
-
-    static class SyntheticClass_1 {
-
-        static final int[] a;
-        static final int[] b = new int[EnumItemSlot.values().length];
-
-        static {
-            try {
-                EntityInsentient.SyntheticClass_1.b[EnumItemSlot.HEAD.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror) {
-                ;
-            }
-
-            try {
-                EntityInsentient.SyntheticClass_1.b[EnumItemSlot.CHEST.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror1) {
-                ;
-            }
-
-            try {
-                EntityInsentient.SyntheticClass_1.b[EnumItemSlot.LEGS.ordinal()] = 3;
-            } catch (NoSuchFieldError nosuchfielderror2) {
-                ;
-            }
-
-            try {
-                EntityInsentient.SyntheticClass_1.b[EnumItemSlot.FEET.ordinal()] = 4;
-            } catch (NoSuchFieldError nosuchfielderror3) {
-                ;
-            }
-
-            a = new int[EnumItemSlot.Function.values().length];
-
-            try {
-                EntityInsentient.SyntheticClass_1.a[EnumItemSlot.Function.HAND.ordinal()] = 1;
-            } catch (NoSuchFieldError nosuchfielderror4) {
-                ;
-            }
-
-            try {
-                EntityInsentient.SyntheticClass_1.a[EnumItemSlot.Function.ARMOR.ordinal()] = 2;
-            } catch (NoSuchFieldError nosuchfielderror5) {
-                ;
-            }
-
-        }
+        return this.cZ() ? EnumMainHand.LEFT : EnumMainHand.RIGHT;
     }
 
     public static enum EnumEntityPositionType {
