--- a/net/minecraft/server/PlayerInventory.java
+++ b/net/minecraft/server/PlayerInventory.java
@@ -1,35 +1,40 @@
 package net.minecraft.server;
 
 import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
 import javax.annotation.Nullable;
 
 public class PlayerInventory implements IInventory {
 
-    public final ItemStack[] items = new ItemStack[36];
-    public final ItemStack[] armor = new ItemStack[4];
-    public final ItemStack[] extraSlots = new ItemStack[1];
-    private final ItemStack[][] g;
+    public final NonNullList<ItemStack> items;
+    public final NonNullList<ItemStack> armor;
+    public final NonNullList<ItemStack> extraSlots;
+    private final List<NonNullList<ItemStack>> g;
     public int itemInHandIndex;
     public EntityHuman player;
     private ItemStack carried;
     public boolean f;
 
     public PlayerInventory(EntityHuman entityhuman) {
-        this.g = new ItemStack[][] { this.items, this.armor, this.extraSlots};
+        this.items = NonNullList.a(36, ItemStack.a);
+        this.armor = NonNullList.a(4, ItemStack.a);
+        this.extraSlots = NonNullList.a(1, ItemStack.a);
+        this.g = Arrays.asList(new NonNullList[] { this.items, this.armor, this.extraSlots});
+        this.carried = ItemStack.a;
         this.player = entityhuman;
     }
 
-    @Nullable
     public ItemStack getItemInHand() {
-        return e(this.itemInHandIndex) ? this.items[this.itemInHandIndex] : null;
+        return e(this.itemInHandIndex) ? (ItemStack) this.items.get(this.itemInHandIndex) : ItemStack.a;
     }
 
     public static int getHotbarSize() {
         return 9;
     }
 
-    private boolean a(@Nullable ItemStack itemstack, ItemStack itemstack1) {
-        return itemstack != null && this.b(itemstack, itemstack1) && itemstack.isStackable() && itemstack.count < itemstack.getMaxStackSize() && itemstack.count < this.getMaxStackSize();
+    private boolean a(ItemStack itemstack, ItemStack itemstack1) {
+        return !itemstack.isEmpty() && this.b(itemstack, itemstack1) && itemstack.isStackable() && itemstack.getCount() < itemstack.getMaxStackSize() && itemstack.getCount() < this.getMaxStackSize();
     }
 
     private boolean b(ItemStack itemstack, ItemStack itemstack1) {
@@ -37,8 +42,8 @@
     }
 
     public int getFirstEmptySlotIndex() {
-        for (int i = 0; i < this.items.length; ++i) {
-            if (this.items[i] == null) {
+        for (int i = 0; i < this.items.size(); ++i) {
+            if (((ItemStack) this.items.get(i)).isEmpty()) {
                 return i;
             }
         }
@@ -47,31 +52,31 @@
     }
 
     public void d(int i) {
-        this.itemInHandIndex = this.k();
-        ItemStack itemstack = this.items[this.itemInHandIndex];
+        this.itemInHandIndex = this.l();
+        ItemStack itemstack = (ItemStack) this.items.get(this.itemInHandIndex);
 
-        this.items[this.itemInHandIndex] = this.items[i];
-        this.items[i] = itemstack;
+        this.items.set(this.itemInHandIndex, this.items.get(i));
+        this.items.set(i, itemstack);
     }
 
     public static boolean e(int i) {
         return i >= 0 && i < 9;
     }
 
-    public int k() {
+    public int l() {
         int i;
         int j;
 
         for (i = 0; i < 9; ++i) {
             j = (this.itemInHandIndex + i) % 9;
-            if (this.items[j] == null) {
+            if (((ItemStack) this.items.get(j)).isEmpty()) {
                 return j;
             }
         }
 
         for (i = 0; i < 9; ++i) {
             j = (this.itemInHandIndex + i) % 9;
-            if (!this.items[j].hasEnchantments()) {
+            if (!((ItemStack) this.items.get(j)).hasEnchantments()) {
                 return j;
             }
         }
@@ -87,14 +92,14 @@
         for (l = 0; l < this.getSize(); ++l) {
             ItemStack itemstack = this.getItem(l);
 
-            if (itemstack != null && (item == null || itemstack.getItem() == item) && (i <= -1 || itemstack.getData() == i) && (nbttagcompound == null || GameProfileSerializer.a(nbttagcompound, itemstack.getTag(), true))) {
-                int i1 = j <= 0 ? itemstack.count : Math.min(j - k, itemstack.count);
+            if (!itemstack.isEmpty() && (item == null || itemstack.getItem() == item) && (i <= -1 || itemstack.getData() == i) && (nbttagcompound == null || GameProfileSerializer.a(nbttagcompound, itemstack.getTag(), true))) {
+                int i1 = j <= 0 ? itemstack.getCount() : Math.min(j - k, itemstack.getCount());
 
                 k += i1;
                 if (j != 0) {
-                    itemstack.count -= i1;
-                    if (itemstack.count == 0) {
-                        this.setItem(l, (ItemStack) null);
+                    itemstack.subtract(i1);
+                    if (itemstack.isEmpty()) {
+                        this.setItem(l, ItemStack.a);
                     }
 
                     if (j > 0 && k >= j) {
@@ -104,7 +109,7 @@
             }
         }
 
-        if (this.carried != null) {
+        if (!this.carried.isEmpty()) {
             if (item != null && this.carried.getItem() != item) {
                 return k;
             }
@@ -117,12 +122,12 @@
                 return k;
             }
 
-            l = j <= 0 ? this.carried.count : Math.min(j - k, this.carried.count);
+            l = j <= 0 ? this.carried.getCount() : Math.min(j - k, this.carried.getCount());
             k += l;
             if (j != 0) {
-                this.carried.count -= l;
-                if (this.carried.count == 0) {
-                    this.carried = null;
+                this.carried.subtract(l);
+                if (this.carried.isEmpty()) {
+                    this.carried = ItemStack.a;
                 }
 
                 if (j > 0 && k >= j) {
@@ -136,7 +141,7 @@
 
     private int g(ItemStack itemstack) {
         Item item = itemstack.getItem();
-        int i = itemstack.count;
+        int i = itemstack.getCount();
         int j = this.firstPartial(itemstack);
 
         if (j == -1) {
@@ -148,7 +153,7 @@
         } else {
             ItemStack itemstack1 = this.getItem(j);
 
-            if (itemstack1 == null) {
+            if (itemstack1.isEmpty()) {
                 itemstack1 = new ItemStack(item, 0, itemstack.getData());
                 if (itemstack.hasTag()) {
                     itemstack1.setTag(itemstack.getTag().g());
@@ -159,20 +164,20 @@
 
             int k = i;
 
-            if (i > itemstack1.getMaxStackSize() - itemstack1.count) {
-                k = itemstack1.getMaxStackSize() - itemstack1.count;
+            if (i > itemstack1.getMaxStackSize() - itemstack1.getCount()) {
+                k = itemstack1.getMaxStackSize() - itemstack1.getCount();
             }
 
-            if (k > this.getMaxStackSize() - itemstack1.count) {
-                k = this.getMaxStackSize() - itemstack1.count;
+            if (k > this.getMaxStackSize() - itemstack1.getCount()) {
+                k = this.getMaxStackSize() - itemstack1.getCount();
             }
 
             if (k == 0) {
                 return i;
             } else {
                 i -= k;
-                itemstack1.count += k;
-                itemstack1.c = 5;
+                itemstack1.add(k);
+                itemstack1.d(5);
                 return i;
             }
         }
@@ -184,8 +189,8 @@
         } else if (this.a(this.getItem(40), itemstack)) {
             return 40;
         } else {
-            for (int i = 0; i < this.items.length; ++i) {
-                if (this.a(this.items[i], itemstack)) {
+            for (int i = 0; i < this.items.size(); ++i) {
+                if (this.a((ItemStack) this.items.get(i), itemstack)) {
                     return i;
                 }
             }
@@ -194,51 +199,52 @@
         }
     }
 
-    public void m() {
-        ItemStack[][] aitemstack = this.g;
-        int i = aitemstack.length;
+    public void n() {
+        Iterator iterator = this.g.iterator();
 
-        for (int j = 0; j < i; ++j) {
-            ItemStack[] aitemstack1 = aitemstack[j];
+        while (iterator.hasNext()) {
+            NonNullList nonnulllist = (NonNullList) iterator.next();
 
-            for (int k = 0; k < aitemstack1.length; ++k) {
-                if (aitemstack1[k] != null) {
-                    aitemstack1[k].a(this.player.world, this.player, k, this.itemInHandIndex == k);
+            for (int i = 0; i < nonnulllist.size(); ++i) {
+                if (!((ItemStack) nonnulllist.get(i)).isEmpty()) {
+                    ((ItemStack) nonnulllist.get(i)).a(this.player.world, this.player, i, this.itemInHandIndex == i);
                 }
             }
         }
 
     }
 
-    public boolean pickup(@Nullable final ItemStack itemstack) {
-        if (itemstack != null && itemstack.count != 0 && itemstack.getItem() != null) {
+    public boolean pickup(final ItemStack itemstack) {
+        if (itemstack.isEmpty()) {
+            return false;
+        } else {
             try {
                 int i;
 
-                if (itemstack.g()) {
+                if (itemstack.h()) {
                     i = this.getFirstEmptySlotIndex();
                     if (i >= 0) {
-                        this.items[i] = ItemStack.c(itemstack);
-                        this.items[i].c = 5;
-                        itemstack.count = 0;
+                        this.items.set(i, itemstack.cloneItemStack());
+                        ((ItemStack) this.items.get(i)).d(5);
+                        itemstack.setCount(0);
                         return true;
                     } else if (this.player.abilities.canInstantlyBuild) {
-                        itemstack.count = 0;
+                        itemstack.setCount(0);
                         return true;
                     } else {
                         return false;
                     }
                 } else {
                     do {
-                        i = itemstack.count;
-                        itemstack.count = this.g(itemstack);
-                    } while (itemstack.count > 0 && itemstack.count < i);
+                        i = itemstack.getCount();
+                        itemstack.setCount(this.g(itemstack));
+                    } while (!itemstack.isEmpty() && itemstack.getCount() < i);
 
-                    if (itemstack.count == i && this.player.abilities.canInstantlyBuild) {
-                        itemstack.count = 0;
+                    if (itemstack.getCount() == i && this.player.abilities.canInstantlyBuild) {
+                        itemstack.setCount(0);
                         return true;
                     } else {
-                        return itemstack.count < i;
+                        return itemstack.getCount() < i;
                     }
                 }
             } catch (Throwable throwable) {
@@ -258,102 +264,79 @@
                 });
                 throw new ReportedException(crashreport);
             }
-        } else {
-            return false;
         }
     }
 
-    @Nullable
     public ItemStack splitStack(int i, int j) {
-        ItemStack[] aitemstack = null;
-        ItemStack[][] aitemstack1 = this.g;
-        int k = aitemstack1.length;
+        NonNullList nonnulllist = null;
 
-        for (int l = 0; l < k; ++l) {
-            ItemStack[] aitemstack2 = aitemstack1[l];
+        NonNullList nonnulllist1;
 
-            if (i < aitemstack2.length) {
-                aitemstack = aitemstack2;
+        for (Iterator iterator = this.g.iterator(); iterator.hasNext(); i -= nonnulllist1.size()) {
+            nonnulllist1 = (NonNullList) iterator.next();
+            if (i < nonnulllist1.size()) {
+                nonnulllist = nonnulllist1;
                 break;
             }
-
-            i -= aitemstack2.length;
         }
 
-        return aitemstack != null && aitemstack[i] != null ? ContainerUtil.a(aitemstack, i, j) : null;
+        return nonnulllist != null && !((ItemStack) nonnulllist.get(i)).isEmpty() ? ContainerUtil.a(nonnulllist, i, j) : ItemStack.a;
     }
 
     public void d(ItemStack itemstack) {
-        ItemStack[][] aitemstack = this.g;
-        int i = aitemstack.length;
-        int j = 0;
-
-        while (j < i) {
-            ItemStack[] aitemstack1 = aitemstack[j];
-            int k = 0;
-
-            while (true) {
-                if (k < aitemstack1.length) {
-                    if (aitemstack1[k] != itemstack) {
-                        ++k;
-                        continue;
-                    }
+        Iterator iterator = this.g.iterator();
 
-                    aitemstack1[k] = null;
-                }
+        while (iterator.hasNext()) {
+            NonNullList nonnulllist = (NonNullList) iterator.next();
 
-                ++j;
-                break;
+            for (int i = 0; i < nonnulllist.size(); ++i) {
+                if (nonnulllist.get(i) == itemstack) {
+                    nonnulllist.set(i, ItemStack.a);
+                    break;
+                }
             }
         }
 
     }
 
-    @Nullable
     public ItemStack splitWithoutUpdate(int i) {
-        ItemStack[] aitemstack = null;
-        ItemStack[][] aitemstack1 = this.g;
-        int j = aitemstack1.length;
+        NonNullList nonnulllist = null;
 
-        for (int k = 0; k < j; ++k) {
-            ItemStack[] aitemstack2 = aitemstack1[k];
+        NonNullList nonnulllist1;
 
-            if (i < aitemstack2.length) {
-                aitemstack = aitemstack2;
+        for (Iterator iterator = this.g.iterator(); iterator.hasNext(); i -= nonnulllist1.size()) {
+            nonnulllist1 = (NonNullList) iterator.next();
+            if (i < nonnulllist1.size()) {
+                nonnulllist = nonnulllist1;
                 break;
             }
-
-            i -= aitemstack2.length;
         }
 
-        if (aitemstack != null && aitemstack[i] != null) {
-            Object object = aitemstack[i];
+        if (nonnulllist != null && !((ItemStack) nonnulllist.get(i)).isEmpty()) {
+            ItemStack itemstack = (ItemStack) nonnulllist.get(i);
 
-            aitemstack[i] = null;
-            return (ItemStack) object;
+            nonnulllist.set(i, ItemStack.a);
+            return itemstack;
         } else {
-            return null;
+            return ItemStack.a;
         }
     }
 
-    public void setItem(int i, @Nullable ItemStack itemstack) {
-        ItemStack[] aitemstack = null;
-        ItemStack[][] aitemstack1 = this.g;
-        int j = aitemstack1.length;
+    public void setItem(int i, ItemStack itemstack) {
+        NonNullList nonnulllist = null;
 
-        for (int k = 0; k < j; ++k) {
-            ItemStack[] aitemstack2 = aitemstack1[k];
+        NonNullList nonnulllist1;
 
-            if (i < aitemstack2.length) {
-                aitemstack = aitemstack2;
+        for (Iterator iterator = this.g.iterator(); iterator.hasNext(); i -= nonnulllist1.size()) {
+            nonnulllist1 = (NonNullList) iterator.next();
+            if (i < nonnulllist1.size()) {
+                nonnulllist = nonnulllist1;
                 break;
             }
-
-            i -= aitemstack2.length;
         }
 
-        if (aitemstack != null) {
-            aitemstack[i] = itemstack;
+        if (nonnulllist != null) {
+            nonnulllist.set(i, itemstack);
         }
 
     }
@@ -361,8 +344,8 @@
     public float a(IBlockData iblockdata) {
         float f = 1.0F;
 
-        if (this.items[this.itemInHandIndex] != null) {
-            f *= this.items[this.itemInHandIndex].a(iblockdata);
+        if (!((ItemStack) this.items.get(this.itemInHandIndex)).isEmpty()) {
+            f *= ((ItemStack) this.items.get(this.itemInHandIndex)).a(iblockdata);
         }
 
         return f;
@@ -372,29 +355,29 @@
         int i;
         NBTTagCompound nbttagcompound;
 
-        for (i = 0; i < this.items.length; ++i) {
-            if (this.items[i] != null) {
+        for (i = 0; i < this.items.size(); ++i) {
+            if (!((ItemStack) this.items.get(i)).isEmpty()) {
                 nbttagcompound = new NBTTagCompound();
                 nbttagcompound.setByte("Slot", (byte) i);
-                this.items[i].save(nbttagcompound);
+                ((ItemStack) this.items.get(i)).save(nbttagcompound);
                 nbttaglist.add(nbttagcompound);
             }
         }
 
-        for (i = 0; i < this.armor.length; ++i) {
-            if (this.armor[i] != null) {
+        for (i = 0; i < this.armor.size(); ++i) {
+            if (!((ItemStack) this.armor.get(i)).isEmpty()) {
                 nbttagcompound = new NBTTagCompound();
                 nbttagcompound.setByte("Slot", (byte) (i + 100));
-                this.armor[i].save(nbttagcompound);
+                ((ItemStack) this.armor.get(i)).save(nbttagcompound);
                 nbttaglist.add(nbttagcompound);
             }
         }
 
-        for (i = 0; i < this.extraSlots.length; ++i) {
-            if (this.extraSlots[i] != null) {
+        for (i = 0; i < this.extraSlots.size(); ++i) {
+            if (!((ItemStack) this.extraSlots.get(i)).isEmpty()) {
                 nbttagcompound = new NBTTagCompound();
                 nbttagcompound.setByte("Slot", (byte) (i + 150));
-                this.extraSlots[i].save(nbttagcompound);
+                ((ItemStack) this.extraSlots.get(i)).save(nbttagcompound);
                 nbttaglist.add(nbttagcompound);
             }
         }
@@ -403,22 +386,22 @@
     }
 
     public void b(NBTTagList nbttaglist) {
-        Arrays.fill(this.items, (Object) null);
-        Arrays.fill(this.armor, (Object) null);
-        Arrays.fill(this.extraSlots, (Object) null);
+        this.items.clear();
+        this.armor.clear();
+        this.extraSlots.clear();
 
         for (int i = 0; i < nbttaglist.size(); ++i) {
             NBTTagCompound nbttagcompound = nbttaglist.get(i);
             int j = nbttagcompound.getByte("Slot") & 255;
-            ItemStack itemstack = ItemStack.createStack(nbttagcompound);
+            ItemStack itemstack = new ItemStack(nbttagcompound);
 
-            if (itemstack != null) {
-                if (j >= 0 && j < this.items.length) {
-                    this.items[j] = itemstack;
-                } else if (j >= 100 && j < this.armor.length + 100) {
-                    this.armor[j - 100] = itemstack;
-                } else if (j >= 150 && j < this.extraSlots.length + 150) {
-                    this.extraSlots[j - 150] = itemstack;
+            if (!itemstack.isEmpty()) {
+                if (j >= 0 && j < this.items.size()) {
+                    this.items.set(j, itemstack);
+                } else if (j >= 100 && j < this.armor.size() + 100) {
+                    this.armor.set(j - 100, itemstack);
+                } else if (j >= 150 && j < this.extraSlots.size() + 150) {
+                    this.extraSlots.set(j - 150, itemstack);
                 }
             }
         }
@@ -426,27 +409,59 @@
     }
 
     public int getSize() {
-        return this.items.length + this.armor.length + this.extraSlots.length;
+        return this.items.size() + this.armor.size() + this.extraSlots.size();
+    }
+
+    public boolean w_() {
+        Iterator iterator = this.items.iterator();
+
+        ItemStack itemstack;
+
+        do {
+            if (!iterator.hasNext()) {
+                iterator = this.armor.iterator();
+
+                do {
+                    if (!iterator.hasNext()) {
+                        iterator = this.extraSlots.iterator();
+
+                        do {
+                            if (!iterator.hasNext()) {
+                                return true;
+                            }
+
+                            itemstack = (ItemStack) iterator.next();
+                        } while (itemstack.isEmpty());
+
+                        return false;
+                    }
+
+                    itemstack = (ItemStack) iterator.next();
+                } while (itemstack.isEmpty());
+
+                return false;
+            }
+
+            itemstack = (ItemStack) iterator.next();
+        } while (itemstack.isEmpty());
+
+        return false;
     }
 
-    @Nullable
     public ItemStack getItem(int i) {
-        ItemStack[] aitemstack = null;
-        ItemStack[][] aitemstack1 = this.g;
-        int j = aitemstack1.length;
+        NonNullList nonnulllist = null;
 
-        for (int k = 0; k < j; ++k) {
-            ItemStack[] aitemstack2 = aitemstack1[k];
+        NonNullList nonnulllist1;
 
-            if (i < aitemstack2.length) {
-                aitemstack = aitemstack2;
+        for (Iterator iterator = this.g.iterator(); iterator.hasNext(); i -= nonnulllist1.size()) {
+            nonnulllist1 = (NonNullList) iterator.next();
+            if (i < nonnulllist1.size()) {
+                nonnulllist = nonnulllist1;
                 break;
             }
-
-            i -= aitemstack2.length;
         }
 
-        return aitemstack == null ? null : aitemstack[i];
+        return nonnulllist == null ? ItemStack.a : (ItemStack) nonnulllist.get(i);
     }
 
     public String getName() {
@@ -471,7 +486,7 @@
         } else {
             ItemStack itemstack = this.getItem(this.itemInHandIndex);
 
-            return itemstack != null ? itemstack.b(iblockdata) : false;
+            return !itemstack.isEmpty() ? itemstack.b(iblockdata) : false;
         }
     }
 
@@ -481,28 +496,28 @@
             f = 1.0F;
         }
 
-        for (int i = 0; i < this.armor.length; ++i) {
-            if (this.armor[i] != null && this.armor[i].getItem() instanceof ItemArmor) {
-                this.armor[i].damage((int) f, this.player);
-                if (this.armor[i].count == 0) {
-                    this.armor[i] = null;
-                }
+        for (int i = 0; i < this.armor.size(); ++i) {
+            ItemStack itemstack = (ItemStack) this.armor.get(i);
+
+            if (itemstack.getItem() instanceof ItemArmor) {
+                itemstack.damage((int) f, this.player);
             }
         }
 
     }
 
-    public void n() {
-        ItemStack[][] aitemstack = this.g;
-        int i = aitemstack.length;
+    public void o() {
+        Iterator iterator = this.g.iterator();
 
-        for (int j = 0; j < i; ++j) {
-            ItemStack[] aitemstack1 = aitemstack[j];
+        while (iterator.hasNext()) {
+            List list = (List) iterator.next();
 
-            for (int k = 0; k < aitemstack1.length; ++k) {
-                if (aitemstack1[k] != null) {
-                    this.player.a(aitemstack1[k], true, false);
-                    aitemstack1[k] = null;
+            for (int i = 0; i < list.size(); ++i) {
+                ItemStack itemstack = (ItemStack) list.get(i);
+
+                if (!itemstack.isEmpty()) {
+                    this.player.a(itemstack, true, false);
+                    list.set(i, ItemStack.a);
                 }
             }
         }
@@ -513,11 +528,10 @@
         this.f = true;
     }
 
-    public void setCarried(@Nullable ItemStack itemstack) {
+    public void setCarried(ItemStack itemstack) {
         this.carried = itemstack;
     }
 
-    @Nullable
     public ItemStack getCarried() {
         return this.carried;
     }
@@ -527,18 +541,16 @@
     }
 
     public boolean f(ItemStack itemstack) {
-        ItemStack[][] aitemstack = this.g;
-        int i = aitemstack.length;
+        Iterator iterator = this.g.iterator();
 
-        for (int j = 0; j < i; ++j) {
-            ItemStack[] aitemstack1 = aitemstack[j];
-            ItemStack[] aitemstack2 = aitemstack1;
-            int k = aitemstack1.length;
+        while (iterator.hasNext()) {
+            List list = (List) iterator.next();
+            Iterator iterator1 = list.iterator();
 
-            for (int l = 0; l < k; ++l) {
-                ItemStack itemstack1 = aitemstack2[l];
+            while (iterator1.hasNext()) {
+                ItemStack itemstack1 = (ItemStack) iterator1.next();
 
-                if (itemstack1 != null && itemstack1.doMaterialsMatch(itemstack)) {
+                if (!itemstack1.isEmpty() && itemstack1.doMaterialsMatch(itemstack)) {
                     return true;
                 }
             }
@@ -569,20 +581,17 @@
 
     public void setProperty(int i, int j) {}
 
-    public int g() {
+    public int h() {
         return 0;
     }
 
-    public void l() {
-        ItemStack[][] aitemstack = this.g;
-        int i = aitemstack.length;
+    public void clear() {
+        Iterator iterator = this.g.iterator();
 
-        for (int j = 0; j < i; ++j) {
-            ItemStack[] aitemstack1 = aitemstack[j];
+        while (iterator.hasNext()) {
+            List list = (List) iterator.next();
 
-            for (int k = 0; k < aitemstack1.length; ++k) {
-                aitemstack1[k] = null;
-            }
+            list.clear();
         }
 
     }
