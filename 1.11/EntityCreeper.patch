--- a/net/minecraft/server/EntityCreeper.java
+++ b/net/minecraft/server/EntityCreeper.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import java.util.Collection;
+import java.util.Iterator;
 import javax.annotation.Nullable;
 
 public class EntityCreeper extends EntityMonster {
@@ -7,11 +9,11 @@
     private static final DataWatcherObject<Integer> a = DataWatcher.a(EntityCreeper.class, DataWatcherRegistry.b);
     private static final DataWatcherObject<Boolean> b = DataWatcher.a(EntityCreeper.class, DataWatcherRegistry.h);
     private static final DataWatcherObject<Boolean> c = DataWatcher.a(EntityCreeper.class, DataWatcherRegistry.h);
-    private int bx;
+    private int bw;
     private int fuseTicks;
     private int maxFuseTicks = 30;
     private int explosionRadius = 3;
-    private int bB;
+    private int bA;
 
     public EntityCreeper(World world) {
         super(world);
@@ -23,7 +25,7 @@
         this.goalSelector.a(2, new PathfinderGoalSwell(this));
         this.goalSelector.a(3, new PathfinderGoalAvoidTarget(this, EntityOcelot.class, 6.0F, 1.0D, 1.2D));
         this.goalSelector.a(4, new PathfinderGoalMeleeAttack(this, 1.0D, false));
-        this.goalSelector.a(5, new PathfinderGoalRandomStroll(this, 0.8D));
+        this.goalSelector.a(5, new PathfinderGoalRandomStrollLand(this, 0.8D));
         this.goalSelector.a(6, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 8.0F));
         this.goalSelector.a(6, new PathfinderGoalRandomLookaround(this));
         this.targetSelector.a(1, new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true));
@@ -56,7 +58,7 @@
     }
 
     public static void b(DataConverterManager dataconvertermanager) {
-        EntityInsentient.a(dataconvertermanager, "Creeper");
+        EntityInsentient.a(dataconvertermanager, EntityCreeper.class);
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -82,22 +84,22 @@
         }
 
         if (nbttagcompound.getBoolean("ignited")) {
-            this.dh();
+            this.dk();
         }
 
     }
 
-    public void m() {
+    public void A_() {
         if (this.isAlive()) {
-            this.bx = this.fuseTicks;
+            this.bw = this.fuseTicks;
             if (this.isIgnited()) {
                 this.a(1);
             }
 
-            int i = this.df();
+            int i = this.di();
 
             if (i > 0 && this.fuseTicks == 0) {
-                this.a(SoundEffects.at, 1.0F, 0.5F);
+                this.a(SoundEffects.av, 1.0F, 0.5F);
             }
 
             this.fuseTicks += i;
@@ -107,19 +109,19 @@
 
             if (this.fuseTicks >= this.maxFuseTicks) {
                 this.fuseTicks = this.maxFuseTicks;
-                this.dk();
+                this.dn();
             }
         }
 
-        super.m();
+        super.A_();
     }
 
-    protected SoundEffect bV() {
-        return SoundEffects.as;
+    protected SoundEffect bW() {
+        return SoundEffects.au;
     }
 
-    protected SoundEffect bW() {
-        return SoundEffects.ar;
+    protected SoundEffect bX() {
+        return SoundEffects.at;
     }
 
     public void die(DamageSource damagesource) {
@@ -149,10 +151,10 @@
 
     @Nullable
     protected MinecraftKey J() {
-        return LootTables.q;
+        return LootTables.r;
     }
 
-    public int df() {
+    public int di() {
         return ((Integer) this.datawatcher.get(EntityCreeper.a)).intValue();
     }
 
@@ -165,28 +167,55 @@
         this.datawatcher.set(EntityCreeper.b, Boolean.valueOf(true));
     }
 
-    protected boolean a(EntityHuman entityhuman, EnumHand enumhand, @Nullable ItemStack itemstack) {
-        if (itemstack != null && itemstack.getItem() == Items.FLINT_AND_STEEL) {
-            this.world.a(entityhuman, this.locX, this.locY, this.locZ, SoundEffects.by, this.bC(), 1.0F, this.random.nextFloat() * 0.4F + 0.8F);
+    protected boolean a(EntityHuman entityhuman, EnumHand enumhand) {
+        ItemStack itemstack = entityhuman.b(enumhand);
+
+        if (itemstack.getItem() == Items.FLINT_AND_STEEL) {
+            this.world.a(entityhuman, this.locX, this.locY, this.locZ, SoundEffects.bI, this.bC(), 1.0F, this.random.nextFloat() * 0.4F + 0.8F);
             entityhuman.a(enumhand);
             if (!this.world.isClientSide) {
-                this.dh();
+                this.dk();
                 itemstack.damage(1, entityhuman);
                 return true;
             }
         }
 
-        return super.a(entityhuman, enumhand, itemstack);
+        return super.a(entityhuman, enumhand);
     }
 
-    private void dk() {
+    private void dn() {
         if (!this.world.isClientSide) {
             boolean flag = this.world.getGameRules().getBoolean("mobGriefing");
             float f = this.isPowered() ? 2.0F : 1.0F;
 
-            this.aV = true;
+            this.aU = true;
             this.world.explode(this, this.locX, this.locY, this.locZ, (float) this.explosionRadius * f, flag);
             this.die();
+            this.do_();
+        }
+
+    }
+
+    private void do_() {
+        Collection collection = this.getEffects();
+
+        if (!collection.isEmpty()) {
+            EntityAreaEffectCloud entityareaeffectcloud = new EntityAreaEffectCloud(this.world, this.locX, this.locY, this.locZ);
+
+            entityareaeffectcloud.setRadius(2.5F);
+            entityareaeffectcloud.setRadiusOnUse(-0.5F);
+            entityareaeffectcloud.setWaitTime(10);
+            entityareaeffectcloud.setDuration(entityareaeffectcloud.getDuration() / 2);
+            entityareaeffectcloud.setRadiusPerTick(-entityareaeffectcloud.getRadius() / (float) entityareaeffectcloud.getDuration());
+            Iterator iterator = collection.iterator();
+
+            while (iterator.hasNext()) {
+                MobEffect mobeffect = (MobEffect) iterator.next();
+
+                entityareaeffectcloud.a(new MobEffect(mobeffect));
+            }
+
+            this.world.addEntity(entityareaeffectcloud);
         }
 
     }
@@ -195,15 +224,15 @@
         return ((Boolean) this.datawatcher.get(EntityCreeper.c)).booleanValue();
     }
 
-    public void dh() {
+    public void dk() {
         this.datawatcher.set(EntityCreeper.c, Boolean.valueOf(true));
     }
 
     public boolean canCauseHeadDrop() {
-        return this.bB < 1 && this.world.getGameRules().getBoolean("doMobLoot");
+        return this.bA < 1 && this.world.getGameRules().getBoolean("doMobLoot");
     }
 
     public void setCausedHeadDrop() {
-        ++this.bB;
+        ++this.bA;
     }
 }
