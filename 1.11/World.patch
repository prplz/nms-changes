--- a/net/minecraft/server/World.java
+++ b/net/minecraft/server/World.java
@@ -201,6 +201,10 @@
         return this.chunkProvider.getChunkAt(i, j);
     }
 
+    public boolean b(int i, int j) {
+        return this.isChunkLoaded(i, j, false) ? true : this.chunkProvider.e(i, j);
+    }
+
     public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
         if (this.E(blockposition)) {
             return false;
@@ -225,10 +229,12 @@
                 }
 
                 if (!this.isClientSide && (i & 1) != 0) {
-                    this.update(blockposition, iblockdata1.getBlock());
-                    if (iblockdata.n()) {
+                    this.update(blockposition, iblockdata1.getBlock(), true);
+                    if (iblockdata.o()) {
                         this.updateAdjacentComparators(blockposition, block);
                     }
+                } else if (!this.isClientSide && (i & 16) == 0) {
+                    this.c(blockposition, block);
                 }
 
                 return true;
@@ -267,9 +273,9 @@
 
     }
 
-    public void update(BlockPosition blockposition, Block block) {
+    public void update(BlockPosition blockposition, Block block, boolean flag) {
         if (this.worldData.getType() != WorldType.DEBUG_ALL_BLOCK_STATES) {
-            this.applyPhysics(blockposition, block);
+            this.applyPhysics(blockposition, block, flag);
         }
 
     }
@@ -283,7 +289,7 @@
             k = i1;
         }
 
-        if (!this.worldProvider.m()) {
+        if (this.worldProvider.m()) {
             for (i1 = k; i1 <= l; ++i1) {
                 this.c(EnumSkyBlock.SKY, new BlockPosition(i, i1, j));
             }
@@ -303,48 +309,61 @@
 
     }
 
-    public void applyPhysics(BlockPosition blockposition, Block block) {
-        this.e(blockposition.west(), block);
-        this.e(blockposition.east(), block);
-        this.e(blockposition.down(), block);
-        this.e(blockposition.up(), block);
-        this.e(blockposition.north(), block);
-        this.e(blockposition.south(), block);
+    public void c(BlockPosition blockposition, Block block) {
+        this.b(blockposition.west(), block, blockposition);
+        this.b(blockposition.east(), block, blockposition);
+        this.b(blockposition.down(), block, blockposition);
+        this.b(blockposition.up(), block, blockposition);
+        this.b(blockposition.north(), block, blockposition);
+        this.b(blockposition.south(), block, blockposition);
+    }
+
+    public void applyPhysics(BlockPosition blockposition, Block block, boolean flag) {
+        this.a(blockposition.west(), block, blockposition);
+        this.a(blockposition.east(), block, blockposition);
+        this.a(blockposition.down(), block, blockposition);
+        this.a(blockposition.up(), block, blockposition);
+        this.a(blockposition.north(), block, blockposition);
+        this.a(blockposition.south(), block, blockposition);
+        if (flag) {
+            this.c(blockposition, block);
+        }
+
     }
 
     public void a(BlockPosition blockposition, Block block, EnumDirection enumdirection) {
         if (enumdirection != EnumDirection.WEST) {
-            this.e(blockposition.west(), block);
+            this.a(blockposition.west(), block, blockposition);
         }
 
         if (enumdirection != EnumDirection.EAST) {
-            this.e(blockposition.east(), block);
+            this.a(blockposition.east(), block, blockposition);
         }
 
         if (enumdirection != EnumDirection.DOWN) {
-            this.e(blockposition.down(), block);
+            this.a(blockposition.down(), block, blockposition);
         }
 
         if (enumdirection != EnumDirection.UP) {
-            this.e(blockposition.up(), block);
+            this.a(blockposition.up(), block, blockposition);
         }
 
         if (enumdirection != EnumDirection.NORTH) {
-            this.e(blockposition.north(), block);
+            this.a(blockposition.north(), block, blockposition);
         }
 
         if (enumdirection != EnumDirection.SOUTH) {
-            this.e(blockposition.south(), block);
+            this.a(blockposition.south(), block, blockposition);
         }
 
     }
 
-    public void e(BlockPosition blockposition, final Block block) {
+    public void a(BlockPosition blockposition, final Block block, BlockPosition blockposition1) {
         if (!this.isClientSide) {
             IBlockData iblockdata = this.getType(blockposition);
 
             try {
-                iblockdata.doPhysics(this, blockposition, block);
+                iblockdata.doPhysics(this, blockposition, block, blockposition1);
             } catch (Throwable throwable) {
                 CrashReport crashreport = CrashReport.a(throwable, "Exception while updating neighbours");
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Block being updated");
@@ -368,6 +387,37 @@
         }
     }
 
+    public void b(BlockPosition blockposition, final Block block, BlockPosition blockposition1) {
+        if (!this.isClientSide) {
+            IBlockData iblockdata = this.getType(blockposition);
+
+            if (iblockdata.getBlock() == Blocks.dk) {
+                try {
+                    ((BlockObserver) iblockdata.getBlock()).b(iblockdata, this, blockposition, block, blockposition1);
+                } catch (Throwable throwable) {
+                    CrashReport crashreport = CrashReport.a(throwable, "Exception while updating neighbours");
+                    CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Block being updated");
+
+                    crashreportsystemdetails.a("Source block type", new CrashReportCallable() {
+                        public String a() throws Exception {
+                            try {
+                                return String.format("ID #%d (%s // %s)", new Object[] { Integer.valueOf(Block.getId(block)), block.a(), block.getClass().getCanonicalName()});
+                            } catch (Throwable throwable) {
+                                return "ID #" + Block.getId(block);
+                            }
+                        }
+
+                        public Object call() throws Exception {
+                            return this.a();
+                        }
+                    });
+                    CrashReportSystemDetails.a(crashreportsystemdetails, blockposition, iblockdata);
+                    throw new ReportedException(crashreport);
+                }
+            }
+        }
+    }
+
     public boolean a(BlockPosition blockposition, Block block) {
         return false;
     }
@@ -457,10 +507,10 @@
     }
 
     public BlockPosition getHighestBlockYAt(BlockPosition blockposition) {
-        return new BlockPosition(blockposition.getX(), this.b(blockposition.getX(), blockposition.getZ()), blockposition.getZ());
+        return new BlockPosition(blockposition.getX(), this.c(blockposition.getX(), blockposition.getZ()), blockposition.getZ());
     }
 
-    public int b(int i, int j) {
+    public int c(int i, int j) {
         int k;
 
         if (i >= -30000000 && j >= -30000000 && i < 30000000 && j < 30000000) {
@@ -477,7 +527,7 @@
     }
 
     @Deprecated
-    public int c(int i, int j) {
+    public int d(int i, int j) {
         if (i >= -30000000 && j >= -30000000 && i < 30000000 && j < 30000000) {
             if (!this.isChunkLoaded(i >> 4, j >> 4, true)) {
                 return 0;
@@ -491,7 +541,7 @@
         }
     }
 
-    public int b(EnumSkyBlock enumskyblock, BlockPosition blockposition) {
+    public int getBrightness(EnumSkyBlock enumskyblock, BlockPosition blockposition) {
         if (blockposition.getY() < 0) {
             blockposition = new BlockPosition(blockposition.getX(), 0, blockposition.getZ());
         }
@@ -526,7 +576,7 @@
     }
 
     public float n(BlockPosition blockposition) {
-        return this.worldProvider.n()[this.getLightLevel(blockposition)];
+        return this.worldProvider.o()[this.getLightLevel(blockposition)];
     }
 
     public IBlockData getType(BlockPosition blockposition) {
@@ -567,7 +617,7 @@
                 IBlockData iblockdata = this.getType(blockposition);
                 Block block = iblockdata.getBlock();
 
-                if ((!flag1 || iblockdata.d(this, blockposition) != Block.k) && block.a(iblockdata, flag)) {
+                if ((!flag1 || iblockdata.c(this, blockposition) != Block.k) && block.a(iblockdata, flag)) {
                     MovingObjectPosition movingobjectposition = iblockdata.a(this, blockposition, vec3d, vec3d1);
 
                     if (movingobjectposition != null) {
@@ -669,7 +719,7 @@
                     IBlockData iblockdata1 = this.getType(blockposition);
                     Block block1 = iblockdata1.getBlock();
 
-                    if (!flag1 || iblockdata1.getMaterial() == Material.PORTAL || iblockdata1.d(this, blockposition) != Block.k) {
+                    if (!flag1 || iblockdata1.getMaterial() == Material.PORTAL || iblockdata1.c(this, blockposition) != Block.k) {
                         if (block1.a(iblockdata1, flag)) {
                             MovingObjectPosition movingobjectposition2 = iblockdata1.a(this, blockposition, vec3d, vec3d1);
 
@@ -715,6 +765,13 @@
         this.a(enumparticle.c(), enumparticle.e(), d0, d1, d2, d3, d4, d5, aint);
     }
 
+    public void a(int i, double d0, double d1, double d2, double d3, double d4, double d5, int... aint) {
+        for (int j = 0; j < this.u.size(); ++j) {
+            ((IWorldAccess) this.u.get(j)).a(i, false, true, d0, d1, d2, d3, d4, d5, aint);
+        }
+
+    }
+
     private void a(int i, boolean flag, double d0, double d1, double d2, double d3, double d4, double d5, int... aint) {
         for (int j = 0; j < this.u.size(); ++j) {
             ((IWorldAccess) this.u.get(j)).a(i, flag, d0, d1, d2, d3, d4, d5, aint);
@@ -793,10 +850,10 @@
             this.everyoneSleeping();
         }
 
-        int i = entity.ac;
-        int j = entity.ae;
+        int i = entity.ab;
+        int j = entity.ad;
 
-        if (entity.ab && this.isChunkLoaded(i, j, true)) {
+        if (entity.aa && this.isChunkLoaded(i, j, true)) {
             this.getChunkAt(i, j).b(entity);
         }
 
@@ -863,12 +920,12 @@
                 if (!entity.x(entity1)) {
                     AxisAlignedBB axisalignedbb1 = entity1.ag();
 
-                    if (axisalignedbb1 != null && axisalignedbb1.b(axisalignedbb)) {
+                    if (axisalignedbb1 != null && axisalignedbb1.c(axisalignedbb)) {
                         arraylist.add(axisalignedbb1);
                     }
 
                     axisalignedbb1 = entity.j(entity1);
-                    if (axisalignedbb1 != null && axisalignedbb1.b(axisalignedbb)) {
+                    if (axisalignedbb1 != null && axisalignedbb1.c(axisalignedbb)) {
                         arraylist.add(axisalignedbb1);
                     }
                 }
@@ -899,43 +956,6 @@
         return entity.locX > d0 && entity.locX < d2 && entity.locZ > d1 && entity.locZ < d3;
     }
 
-    public List<AxisAlignedBB> a(AxisAlignedBB axisalignedbb) {
-        ArrayList arraylist = Lists.newArrayList();
-        int i = MathHelper.floor(axisalignedbb.a) - 1;
-        int j = MathHelper.f(axisalignedbb.d) + 1;
-        int k = MathHelper.floor(axisalignedbb.b) - 1;
-        int l = MathHelper.f(axisalignedbb.e) + 1;
-        int i1 = MathHelper.floor(axisalignedbb.c) - 1;
-        int j1 = MathHelper.f(axisalignedbb.f) + 1;
-        BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.s();
-
-        for (int k1 = i; k1 < j; ++k1) {
-            for (int l1 = i1; l1 < j1; ++l1) {
-                int i2 = (k1 != i && k1 != j - 1 ? 0 : 1) + (l1 != i1 && l1 != j1 - 1 ? 0 : 1);
-
-                if (i2 != 2 && this.isLoaded(blockposition_pooledblockposition.f(k1, 64, l1))) {
-                    for (int j2 = k; j2 < l; ++j2) {
-                        if (i2 <= 0 || j2 != k && j2 != l - 1) {
-                            blockposition_pooledblockposition.f(k1, j2, l1);
-                            IBlockData iblockdata;
-
-                            if (k1 >= -30000000 && k1 < 30000000 && l1 >= -30000000 && l1 < 30000000) {
-                                iblockdata = this.getType(blockposition_pooledblockposition);
-                            } else {
-                                iblockdata = Blocks.BEDROCK.getBlockData();
-                            }
-
-                            iblockdata.a(this, blockposition_pooledblockposition, axisalignedbb, arraylist, (Entity) null);
-                        }
-                    }
-                }
-            }
-        }
-
-        blockposition_pooledblockposition.t();
-        return arraylist;
-    }
-
     public boolean b(AxisAlignedBB axisalignedbb) {
         ArrayList arraylist = Lists.newArrayList();
         int i = MathHelper.floor(axisalignedbb.a) - 1;
@@ -1051,7 +1071,7 @@
 
             try {
                 ++entity.ticksLived;
-                entity.m();
+                entity.A_();
             } catch (Throwable throwable) {
                 CrashReport crashreport = CrashReport.a(throwable, "Ticking entity");
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity being ticked");
@@ -1077,10 +1097,10 @@
 
         for (i = 0; i < this.f.size(); ++i) {
             entity = (Entity) this.f.get(i);
-            int k = entity.ac;
+            int k = entity.ab;
 
-            j = entity.ae;
-            if (entity.ab && this.isChunkLoaded(k, j, true)) {
+            j = entity.ad;
+            if (entity.aa && this.isChunkLoaded(k, j, true)) {
                 this.getChunkAt(k, j).b(entity);
             }
         }
@@ -1123,10 +1143,10 @@
             this.methodProfiler.b();
             this.methodProfiler.a("remove");
             if (entity.dead) {
-                j = entity.ac;
-                int l = entity.ae;
+                j = entity.ab;
+                int l = entity.ad;
 
-                if (entity.ab && this.isChunkLoaded(j, l, true)) {
+                if (entity.aa && this.isChunkLoaded(j, l, true)) {
                     this.getChunkAt(j, l).b(entity);
                 }
 
@@ -1144,13 +1164,13 @@
         while (iterator.hasNext()) {
             TileEntity tileentity = (TileEntity) iterator.next();
 
-            if (!tileentity.x() && tileentity.t()) {
+            if (!tileentity.y() && tileentity.u()) {
                 BlockPosition blockposition = tileentity.getPosition();
 
                 if (this.isLoaded(blockposition) && this.N.a(blockposition)) {
                     try {
                         this.methodProfiler.a(tileentity.getClass().getSimpleName());
-                        ((ITickable) tileentity).E_();
+                        ((ITickable) tileentity).F_();
                         this.methodProfiler.b();
                     } catch (Throwable throwable2) {
                         crashreport1 = CrashReport.a(throwable2, "Ticking block entity");
@@ -1161,7 +1181,7 @@
                 }
             }
 
-            if (tileentity.x()) {
+            if (tileentity.y()) {
                 iterator.remove();
                 this.tileEntityList.remove(tileentity);
                 if (this.isLoaded(tileentity.getPosition())) {
@@ -1182,7 +1202,7 @@
             for (int i1 = 0; i1 < this.b.size(); ++i1) {
                 TileEntity tileentity1 = (TileEntity) this.b.get(i1);
 
-                if (!tileentity1.x()) {
+                if (!tileentity1.y()) {
                     if (!this.tileEntityList.contains(tileentity1)) {
                         this.a(tileentity1);
                     }
@@ -1253,12 +1273,12 @@
             entity.O = entity.locZ;
             entity.lastYaw = entity.yaw;
             entity.lastPitch = entity.pitch;
-            if (flag && entity.ab) {
+            if (flag && entity.aa) {
                 ++entity.ticksLived;
                 if (entity.isPassenger()) {
                     entity.aw();
                 } else {
-                    entity.m();
+                    entity.A_();
                 }
             }
 
@@ -1287,20 +1307,20 @@
             int l = MathHelper.floor(entity.locY / 16.0D);
             int i1 = MathHelper.floor(entity.locZ / 16.0D);
 
-            if (!entity.ab || entity.ac != k || entity.ad != l || entity.ae != i1) {
-                if (entity.ab && this.isChunkLoaded(entity.ac, entity.ae, true)) {
-                    this.getChunkAt(entity.ac, entity.ae).a(entity, entity.ad);
+            if (!entity.aa || entity.ab != k || entity.ac != l || entity.ad != i1) {
+                if (entity.aa && this.isChunkLoaded(entity.ab, entity.ad, true)) {
+                    this.getChunkAt(entity.ab, entity.ad).a(entity, entity.ac);
                 }
 
                 if (!entity.bv() && !this.isChunkLoaded(k, i1, true)) {
-                    entity.ab = false;
+                    entity.aa = false;
                 } else {
                     this.getChunkAt(k, i1).a(entity);
                 }
             }
 
             this.methodProfiler.b();
-            if (flag && entity.ab) {
+            if (flag && entity.aa) {
                 Iterator iterator = entity.bx().iterator();
 
                 while (iterator.hasNext()) {
@@ -1495,41 +1515,6 @@
         return false;
     }
 
-    public boolean b(AxisAlignedBB axisalignedbb, Material material) {
-        int i = MathHelper.floor(axisalignedbb.a);
-        int j = MathHelper.f(axisalignedbb.d);
-        int k = MathHelper.floor(axisalignedbb.b);
-        int l = MathHelper.f(axisalignedbb.e);
-        int i1 = MathHelper.floor(axisalignedbb.c);
-        int j1 = MathHelper.f(axisalignedbb.f);
-        BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.s();
-
-        for (int k1 = i; k1 < j; ++k1) {
-            for (int l1 = k; l1 < l; ++l1) {
-                for (int i2 = i1; i2 < j1; ++i2) {
-                    IBlockData iblockdata = this.getType(blockposition_pooledblockposition.f(k1, l1, i2));
-
-                    if (iblockdata.getMaterial() == material) {
-                        int j2 = ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue();
-                        double d0 = (double) (l1 + 1);
-
-                        if (j2 < 8) {
-                            d0 = (double) (l1 + 1) - (double) j2 / 8.0D;
-                        }
-
-                        if (d0 >= axisalignedbb.b) {
-                            blockposition_pooledblockposition.t();
-                            return true;
-                        }
-                    }
-                }
-            }
-        }
-
-        blockposition_pooledblockposition.t();
-        return false;
-    }
-
     public Explosion explode(@Nullable Entity entity, double d0, double d1, double d2, float f, boolean flag) {
         return this.createExplosion(entity, d0, d1, d2, f, false, flag);
     }
@@ -1614,7 +1599,7 @@
         for (int i = 0; i < this.b.size(); ++i) {
             TileEntity tileentity = (TileEntity) this.b.get(i);
 
-            if (!tileentity.x() && tileentity.getPosition().equals(blockposition)) {
+            if (!tileentity.y() && tileentity.getPosition().equals(blockposition)) {
                 return tileentity;
             }
         }
@@ -1624,7 +1609,7 @@
 
     public void setTileEntity(BlockPosition blockposition, @Nullable TileEntity tileentity) {
         if (!this.E(blockposition)) {
-            if (tileentity != null && !tileentity.x()) {
+            if (tileentity != null && !tileentity.y()) {
                 if (this.M) {
                     tileentity.setPosition(blockposition);
                     Iterator iterator = this.b.iterator();
@@ -1633,15 +1618,15 @@
                         TileEntity tileentity1 = (TileEntity) iterator.next();
 
                         if (tileentity1.getPosition().equals(blockposition)) {
-                            tileentity1.y();
+                            tileentity1.z();
                             iterator.remove();
                         }
                     }
 
                     this.b.add(tileentity);
                 } else {
-                    this.a(tileentity);
                     this.getChunkAtWorldCoords(blockposition).a(blockposition, tileentity);
+                    this.a(tileentity);
                 }
             }
 
@@ -1652,7 +1637,7 @@
         TileEntity tileentity = this.getTileEntity(blockposition);
 
         if (tileentity != null && this.M) {
-            tileentity.y();
+            tileentity.z();
             this.b.remove(tileentity);
         } else {
             if (tileentity != null) {
@@ -1671,7 +1656,7 @@
     }
 
     public boolean t(BlockPosition blockposition) {
-        AxisAlignedBB axisalignedbb = this.getType(blockposition).d(this, blockposition);
+        AxisAlignedBB axisalignedbb = this.getType(blockposition).c(this, blockposition);
 
         return axisalignedbb != Block.k && axisalignedbb.a() >= 1.0D;
     }
@@ -1721,30 +1706,50 @@
     }
 
     protected void t() {
-        if (!this.worldProvider.m()) {
+        if (this.worldProvider.m()) {
             if (!this.isClientSide) {
-                int i = this.worldData.z();
+                boolean flag = this.getGameRules().getBoolean("doWeatherCycle");
 
-                if (i > 0) {
-                    --i;
-                    this.worldData.i(i);
-                    this.worldData.setThunderDuration(this.worldData.isThundering() ? 1 : 2);
-                    this.worldData.setWeatherDuration(this.worldData.hasStorm() ? 1 : 2);
-                }
+                if (flag) {
+                    int i = this.worldData.z();
 
-                int j = this.worldData.getThunderDuration();
+                    if (i > 0) {
+                        --i;
+                        this.worldData.i(i);
+                        this.worldData.setThunderDuration(this.worldData.isThundering() ? 1 : 2);
+                        this.worldData.setWeatherDuration(this.worldData.hasStorm() ? 1 : 2);
+                    }
+
+                    int j = this.worldData.getThunderDuration();
 
-                if (j <= 0) {
-                    if (this.worldData.isThundering()) {
-                        this.worldData.setThunderDuration(this.random.nextInt(12000) + 3600);
+                    if (j <= 0) {
+                        if (this.worldData.isThundering()) {
+                            this.worldData.setThunderDuration(this.random.nextInt(12000) + 3600);
+                        } else {
+                            this.worldData.setThunderDuration(this.random.nextInt(168000) + 12000);
+                        }
                     } else {
-                        this.worldData.setThunderDuration(this.random.nextInt(168000) + 12000);
+                        --j;
+                        this.worldData.setThunderDuration(j);
+                        if (j <= 0) {
+                            this.worldData.setThundering(!this.worldData.isThundering());
+                        }
                     }
-                } else {
-                    --j;
-                    this.worldData.setThunderDuration(j);
-                    if (j <= 0) {
-                        this.worldData.setThundering(!this.worldData.isThundering());
+
+                    int k = this.worldData.getWeatherDuration();
+
+                    if (k <= 0) {
+                        if (this.worldData.hasStorm()) {
+                            this.worldData.setWeatherDuration(this.random.nextInt(12000) + 12000);
+                        } else {
+                            this.worldData.setWeatherDuration(this.random.nextInt(168000) + 12000);
+                        }
+                    } else {
+                        --k;
+                        this.worldData.setWeatherDuration(k);
+                        if (k <= 0) {
+                            this.worldData.setStorm(!this.worldData.hasStorm());
+                        }
                     }
                 }
 
@@ -1756,22 +1761,6 @@
                 }
 
                 this.q = MathHelper.a(this.q, 0.0F, 1.0F);
-                int k = this.worldData.getWeatherDuration();
-
-                if (k <= 0) {
-                    if (this.worldData.hasStorm()) {
-                        this.worldData.setWeatherDuration(this.random.nextInt(12000) + 12000);
-                    } else {
-                        this.worldData.setWeatherDuration(this.random.nextInt(168000) + 12000);
-                    }
-                } else {
-                    --k;
-                    this.worldData.setWeatherDuration(k);
-                    if (k <= 0) {
-                        this.worldData.setStorm(!this.worldData.hasStorm());
-                    }
-                }
-
                 this.n = this.o;
                 if (this.worldData.hasStorm()) {
                     this.o = (float) ((double) this.o + 0.01D);
@@ -1804,10 +1793,10 @@
         BiomeBase biomebase = this.getBiome(blockposition);
         float f = biomebase.a(blockposition);
 
-        if (f > 0.15F) {
+        if (f >= 0.15F) {
             return false;
         } else {
-            if (blockposition.getY() >= 0 && blockposition.getY() < 256 && this.b(EnumSkyBlock.BLOCK, blockposition) < 10) {
+            if (blockposition.getY() >= 0 && blockposition.getY() < 256 && this.getBrightness(EnumSkyBlock.BLOCK, blockposition) < 10) {
                 IBlockData iblockdata = this.getType(blockposition);
                 Block block = iblockdata.getBlock();
 
@@ -1836,12 +1825,12 @@
         BiomeBase biomebase = this.getBiome(blockposition);
         float f = biomebase.a(blockposition);
 
-        if (f > 0.15F) {
+        if (f >= 0.15F) {
             return false;
         } else if (!flag) {
             return true;
         } else {
-            if (blockposition.getY() >= 0 && blockposition.getY() < 256 && this.b(EnumSkyBlock.BLOCK, blockposition) < 10) {
+            if (blockposition.getY() >= 0 && blockposition.getY() < 256 && this.getBrightness(EnumSkyBlock.BLOCK, blockposition) < 10) {
                 IBlockData iblockdata = this.getType(blockposition);
 
                 if (iblockdata.getMaterial() == Material.AIR && Blocks.SNOW_LAYER.canPlace(this, blockposition)) {
@@ -1856,7 +1845,7 @@
     public boolean w(BlockPosition blockposition) {
         boolean flag = false;
 
-        if (!this.worldProvider.m()) {
+        if (this.worldProvider.m()) {
             flag |= this.c(EnumSkyBlock.SKY, blockposition);
         }
 
@@ -1893,7 +1882,7 @@
                     EnumDirection enumdirection = aenumdirection[l];
 
                     blockposition_pooledblockposition.j(blockposition).d(enumdirection);
-                    int i1 = this.b(enumskyblock, (BlockPosition) blockposition_pooledblockposition) - j;
+                    int i1 = this.getBrightness(enumskyblock, blockposition_pooledblockposition) - j;
 
                     if (i1 > i) {
                         i = i1;
@@ -1918,7 +1907,7 @@
             int j = 0;
 
             this.methodProfiler.a("getBrightness");
-            int k = this.b(enumskyblock, blockposition);
+            int k = this.getBrightness(enumskyblock, blockposition);
             int l = this.a(blockposition, enumskyblock);
             int i1 = blockposition.getX();
             int j1 = blockposition.getY();
@@ -1945,7 +1934,7 @@
                     int l3 = l1 >> 18 & 15;
                     BlockPosition blockposition1 = new BlockPosition(i2, j2, k2);
 
-                    l2 = this.b(enumskyblock, blockposition1);
+                    l2 = this.getBrightness(enumskyblock, blockposition1);
                     if (l2 == l3) {
                         this.a(enumskyblock, blockposition1, 0);
                         if (l3 > 0) {
@@ -1966,7 +1955,7 @@
                                     blockposition_pooledblockposition.f(k4, l4, i5);
                                     int j5 = Math.max(1, this.getType(blockposition_pooledblockposition).c());
 
-                                    l2 = this.b(enumskyblock, (BlockPosition) blockposition_pooledblockposition);
+                                    l2 = this.getBrightness(enumskyblock, blockposition_pooledblockposition);
                                     if (l2 == l3 - j5 && j < this.H.length) {
                                         this.H[j++] = k4 - i1 + 32 | l4 - j1 + 32 << 6 | i5 - k1 + 32 << 12 | l3 - j5 << 18;
                                     }
@@ -1990,7 +1979,7 @@
                 j2 = (l1 >> 6 & 63) - 32 + j1;
                 k2 = (l1 >> 12 & 63) - 32 + k1;
                 BlockPosition blockposition2 = new BlockPosition(i2, j2, k2);
-                int k5 = this.b(enumskyblock, blockposition2);
+                int k5 = this.getBrightness(enumskyblock, blockposition2);
 
                 l2 = this.a(blockposition2, enumskyblock);
                 if (l2 != k5) {
@@ -2002,27 +1991,27 @@
                         boolean flag = j < this.H.length - 6;
 
                         if (i3 + j3 + k3 < 17 && flag) {
-                            if (this.b(enumskyblock, blockposition2.west()) < l2) {
+                            if (this.getBrightness(enumskyblock, blockposition2.west()) < l2) {
                                 this.H[j++] = i2 - 1 - i1 + 32 + (j2 - j1 + 32 << 6) + (k2 - k1 + 32 << 12);
                             }
 
-                            if (this.b(enumskyblock, blockposition2.east()) < l2) {
+                            if (this.getBrightness(enumskyblock, blockposition2.east()) < l2) {
                                 this.H[j++] = i2 + 1 - i1 + 32 + (j2 - j1 + 32 << 6) + (k2 - k1 + 32 << 12);
                             }
 
-                            if (this.b(enumskyblock, blockposition2.down()) < l2) {
+                            if (this.getBrightness(enumskyblock, blockposition2.down()) < l2) {
                                 this.H[j++] = i2 - i1 + 32 + (j2 - 1 - j1 + 32 << 6) + (k2 - k1 + 32 << 12);
                             }
 
-                            if (this.b(enumskyblock, blockposition2.up()) < l2) {
+                            if (this.getBrightness(enumskyblock, blockposition2.up()) < l2) {
                                 this.H[j++] = i2 - i1 + 32 + (j2 + 1 - j1 + 32 << 6) + (k2 - k1 + 32 << 12);
                             }
 
-                            if (this.b(enumskyblock, blockposition2.north()) < l2) {
+                            if (this.getBrightness(enumskyblock, blockposition2.north()) < l2) {
                                 this.H[j++] = i2 - i1 + 32 + (j2 - j1 + 32 << 6) + (k2 - 1 - k1 + 32 << 12);
                             }
 
-                            if (this.b(enumskyblock, blockposition2.south()) < l2) {
+                            if (this.getBrightness(enumskyblock, blockposition2.south()) < l2) {
                                 this.H[j++] = i2 - i1 + 32 + (j2 - j1 + 32 << 6) + (k2 + 1 - k1 + 32 << 12);
                             }
                         }
@@ -2188,11 +2177,11 @@
         this.f.addAll(collection);
     }
 
-    public boolean a(Block block, BlockPosition blockposition, boolean flag, EnumDirection enumdirection, @Nullable Entity entity, @Nullable ItemStack itemstack) {
+    public boolean a(Block block, BlockPosition blockposition, boolean flag, EnumDirection enumdirection, @Nullable Entity entity) {
         IBlockData iblockdata = this.getType(blockposition);
-        AxisAlignedBB axisalignedbb = flag ? null : block.getBlockData().d(this, blockposition);
+        AxisAlignedBB axisalignedbb = flag ? null : block.getBlockData().c(this, blockposition);
 
-        return axisalignedbb != Block.k && !this.a(axisalignedbb.a(blockposition), entity) ? false : (iblockdata.getMaterial() == Material.ORIENTABLE && block == Blocks.ANVIL ? true : iblockdata.getMaterial().isReplaceable() && block.canPlace(this, blockposition, enumdirection, itemstack));
+        return axisalignedbb != Block.k && !this.a(axisalignedbb.a(blockposition), entity) ? false : (iblockdata.getMaterial() == Material.ORIENTABLE && block == Blocks.ANVIL ? true : iblockdata.getMaterial().isReplaceable() && block.canPlace(this, blockposition, enumdirection));
     }
 
     public int K() {
@@ -2250,7 +2239,7 @@
     public int getBlockFacePower(BlockPosition blockposition, EnumDirection enumdirection) {
         IBlockData iblockdata = this.getType(blockposition);
 
-        return iblockdata.l() ? this.getBlockPower(blockposition) : iblockdata.a((IBlockAccess) this, blockposition, enumdirection);
+        return iblockdata.m() ? this.getBlockPower(blockposition) : iblockdata.a((IBlockAccess) this, blockposition, enumdirection);
     }
 
     public boolean isBlockIndirectlyPowered(BlockPosition blockposition) {
@@ -2290,14 +2279,21 @@
 
     @Nullable
     public EntityHuman a(double d0, double d1, double d2, double d3, boolean flag) {
+        Predicate predicate = flag ? IEntitySelector.d : IEntitySelector.e;
+
+        return this.a(d0, d1, d2, d3, predicate);
+    }
+
+    @Nullable
+    public EntityHuman a(double d0, double d1, double d2, double d3, Predicate<Entity> predicate) {
         double d4 = -1.0D;
         EntityHuman entityhuman = null;
 
         for (int i = 0; i < this.players.size(); ++i) {
             EntityHuman entityhuman1 = (EntityHuman) this.players.get(i);
 
-            if ((IEntitySelector.d.apply(entityhuman1) || !flag) && (IEntitySelector.e.apply(entityhuman1) || flag)) {
-                double d5 = entityhuman1.e(d0, d1, d2);
+            if (predicate.apply(entityhuman1)) {
+                double d5 = entityhuman1.d(d0, d1, d2);
 
                 if ((d3 < 0.0D || d5 < d3 * d3) && (d4 == -1.0D || d5 < d4)) {
                     d4 = d5;
@@ -2314,7 +2310,7 @@
             EntityHuman entityhuman = (EntityHuman) this.players.get(i);
 
             if (IEntitySelector.e.apply(entityhuman)) {
-                double d4 = entityhuman.e(d0, d1, d2);
+                double d4 = entityhuman.d(d0, d1, d2);
 
                 if (d3 < 0.0D || d4 < d3 * d3) {
                     return true;
@@ -2344,7 +2340,7 @@
             EntityHuman entityhuman1 = (EntityHuman) this.players.get(i);
 
             if (!entityhuman1.abilities.isInvulnerable && entityhuman1.isAlive() && !entityhuman1.isSpectator() && (predicate == null || predicate.apply(entityhuman1))) {
-                double d6 = entityhuman1.e(d0, entityhuman1.locY, d2);
+                double d6 = entityhuman1.d(d0, entityhuman1.locY, d2);
                 double d7 = d3;
 
                 if (entityhuman1.isSneaking()) {
@@ -2352,7 +2348,7 @@
                 }
 
                 if (entityhuman1.isInvisible()) {
-                    float f = entityhuman1.cL();
+                    float f = entityhuman1.cO();
 
                     if (f < 0.1F) {
                         f = 0.1F;
@@ -2551,7 +2547,7 @@
     }
 
     public int Z() {
-        return this.worldProvider.m() ? 128 : 256;
+        return this.worldProvider.n() ? 128 : 256;
     }
 
     public Random a(int i, int j, int k) {
@@ -2604,7 +2600,7 @@
 
     public Calendar ac() {
         if (this.getTime() % 600L == 0L) {
-            this.L.setTimeInMillis(MinecraftServer.av());
+            this.L.setTimeInMillis(MinecraftServer.aw());
         }
 
         return this.L;
@@ -2624,13 +2620,13 @@
             if (this.isLoaded(blockposition1)) {
                 IBlockData iblockdata = this.getType(blockposition1);
 
-                if (Blocks.UNPOWERED_COMPARATOR.C(iblockdata)) {
-                    iblockdata.doPhysics(this, blockposition1, block);
-                } else if (iblockdata.l()) {
+                if (Blocks.UNPOWERED_COMPARATOR.E(iblockdata)) {
+                    iblockdata.doPhysics(this, blockposition1, block, blockposition);
+                } else if (iblockdata.m()) {
                     blockposition1 = blockposition1.shift(enumdirection);
                     iblockdata = this.getType(blockposition1);
-                    if (Blocks.UNPOWERED_COMPARATOR.C(iblockdata)) {
-                        iblockdata.doPhysics(this, blockposition1, block);
+                    if (Blocks.UNPOWERED_COMPARATOR.E(iblockdata)) {
+                        iblockdata.doPhysics(this, blockposition1, block, blockposition);
                     }
                 }
             }
@@ -2674,7 +2670,7 @@
         return this.N;
     }
 
-    public boolean d(int i, int j) {
+    public boolean e(int i, int j) {
         BlockPosition blockposition = this.getSpawn();
         int k = i * 16 + 8 - blockposition.getX();
         int l = j * 16 + 8 - blockposition.getZ();
@@ -2690,4 +2686,9 @@
     public LootTableRegistry ak() {
         return this.B;
     }
+
+    @Nullable
+    public BlockPosition a(String s, BlockPosition blockposition, boolean flag) {
+        return null;
+    }
 }
