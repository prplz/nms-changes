--- a/net/minecraft/server/RecipeArmorDye.java
+++ b/net/minecraft/server/RecipeArmorDye.java
@@ -2,24 +2,23 @@
 
 import com.google.common.collect.Lists;
 import java.util.ArrayList;
-import javax.annotation.Nullable;
 
 public class RecipeArmorDye implements IRecipe {
 
     public RecipeArmorDye() {}
 
     public boolean a(InventoryCrafting inventorycrafting, World world) {
-        ItemStack itemstack = null;
+        ItemStack itemstack = ItemStack.a;
         ArrayList arraylist = Lists.newArrayList();
 
         for (int i = 0; i < inventorycrafting.getSize(); ++i) {
             ItemStack itemstack1 = inventorycrafting.getItem(i);
 
-            if (itemstack1 != null) {
+            if (!itemstack1.isEmpty()) {
                 if (itemstack1.getItem() instanceof ItemArmor) {
                     ItemArmor itemarmor = (ItemArmor) itemstack1.getItem();
 
-                    if (itemarmor.d() != ItemArmor.EnumArmorMaterial.LEATHER || itemstack != null) {
+                    if (itemarmor.d() != ItemArmor.EnumArmorMaterial.LEATHER || !itemstack.isEmpty()) {
                         return false;
                     }
 
@@ -34,12 +33,11 @@
             }
         }
 
-        return itemstack != null && !arraylist.isEmpty();
+        return !itemstack.isEmpty() && !arraylist.isEmpty();
     }
 
-    @Nullable
     public ItemStack craftItem(InventoryCrafting inventorycrafting) {
-        ItemStack itemstack = null;
+        ItemStack itemstack = ItemStack.a;
         int[] aint = new int[3];
         int i = 0;
         int j = 0;
@@ -54,17 +52,17 @@
         for (k = 0; k < inventorycrafting.getSize(); ++k) {
             ItemStack itemstack1 = inventorycrafting.getItem(k);
 
-            if (itemstack1 != null) {
+            if (!itemstack1.isEmpty()) {
                 if (itemstack1.getItem() instanceof ItemArmor) {
                     itemarmor = (ItemArmor) itemstack1.getItem();
-                    if (itemarmor.d() != ItemArmor.EnumArmorMaterial.LEATHER || itemstack != null) {
-                        return null;
+                    if (itemarmor.d() != ItemArmor.EnumArmorMaterial.LEATHER || !itemstack.isEmpty()) {
+                        return ItemStack.a;
                     }
 
                     itemstack = itemstack1.cloneItemStack();
-                    itemstack.count = 1;
+                    itemstack.setCount(1);
                     if (itemarmor.e_(itemstack1)) {
-                        l = itemarmor.b(itemstack);
+                        l = itemarmor.c(itemstack);
                         f = (float) (l >> 16 & 255) / 255.0F;
                         f1 = (float) (l >> 8 & 255) / 255.0F;
                         float f2 = (float) (l & 255) / 255.0F;
@@ -77,7 +75,7 @@
                     }
                 } else {
                     if (itemstack1.getItem() != Items.DYE) {
-                        return null;
+                        return ItemStack.a;
                     }
 
                     float[] afloat = EntitySheep.a(EnumColor.fromInvColorIndex(itemstack1.getData()));
@@ -95,7 +93,7 @@
         }
 
         if (itemarmor == null) {
-            return null;
+            return ItemStack.a;
         } else {
             k = aint[0] / j;
             int l1 = aint[1] / j;
@@ -117,22 +115,21 @@
         return 10;
     }
 
-    @Nullable
     public ItemStack b() {
-        return null;
+        return ItemStack.a;
     }
 
-    public ItemStack[] b(InventoryCrafting inventorycrafting) {
-        ItemStack[] aitemstack = new ItemStack[inventorycrafting.getSize()];
+    public NonNullList<ItemStack> b(InventoryCrafting inventorycrafting) {
+        NonNullList nonnulllist = NonNullList.a(inventorycrafting.getSize(), ItemStack.a);
 
-        for (int i = 0; i < aitemstack.length; ++i) {
+        for (int i = 0; i < nonnulllist.size(); ++i) {
             ItemStack itemstack = inventorycrafting.getItem(i);
 
-            if (itemstack != null && itemstack.getItem().r()) {
-                aitemstack[i] = new ItemStack(itemstack.getItem().q());
+            if (itemstack.getItem().s()) {
+                nonnulllist.set(i, new ItemStack(itemstack.getItem().r()));
             }
         }
 
-        return aitemstack;
+        return nonnulllist;
     }
 }
