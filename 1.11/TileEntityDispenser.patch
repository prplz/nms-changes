--- a/net/minecraft/server/TileEntityDispenser.java
+++ b/net/minecraft/server/TileEntityDispenser.java
@@ -1,51 +1,44 @@
 package net.minecraft.server;
 
+import java.util.Iterator;
 import java.util.Random;
-import javax.annotation.Nullable;
 
-public class TileEntityDispenser extends TileEntityLootable implements IInventory {
+public class TileEntityDispenser extends TileEntityLootable {
 
-    private static final Random f = new Random();
-    private ItemStack[] items = new ItemStack[9];
-    protected String a;
+    private static final Random a = new Random();
+    private NonNullList<ItemStack> items;
 
-    public TileEntityDispenser() {}
+    public TileEntityDispenser() {
+        this.items = NonNullList.a(9, ItemStack.a);
+    }
 
     public int getSize() {
         return 9;
     }
 
-    @Nullable
-    public ItemStack getItem(int i) {
-        this.d((EntityHuman) null);
-        return this.items[i];
-    }
+    public boolean w_() {
+        Iterator iterator = this.items.iterator();
 
-    @Nullable
-    public ItemStack splitStack(int i, int j) {
-        this.d((EntityHuman) null);
-        ItemStack itemstack = ContainerUtil.a(this.items, i, j);
+        ItemStack itemstack;
 
-        if (itemstack != null) {
-            this.update();
-        }
+        do {
+            if (!iterator.hasNext()) {
+                return true;
+            }
 
-        return itemstack;
-    }
+            itemstack = (ItemStack) iterator.next();
+        } while (itemstack.isEmpty());
 
-    @Nullable
-    public ItemStack splitWithoutUpdate(int i) {
-        this.d((EntityHuman) null);
-        return ContainerUtil.a(this.items, i);
+        return false;
     }
 
-    public int m() {
+    public int o() {
         this.d((EntityHuman) null);
         int i = -1;
         int j = 1;
 
-        for (int k = 0; k < this.items.length; ++k) {
-            if (this.items[k] != null && TileEntityDispenser.f.nextInt(j++) == 0) {
+        for (int k = 0; k < this.items.size(); ++k) {
+            if (!((ItemStack) this.items.get(k)).isEmpty() && TileEntityDispenser.a.nextInt(j++) == 0) {
                 i = k;
             }
         }
@@ -53,19 +46,9 @@
         return i;
     }
 
-    public void setItem(int i, @Nullable ItemStack itemstack) {
-        this.d((EntityHuman) null);
-        this.items[i] = itemstack;
-        if (itemstack != null && itemstack.count > this.getMaxStackSize()) {
-            itemstack.count = this.getMaxStackSize();
-        }
-
-        this.update();
-    }
-
     public int addItem(ItemStack itemstack) {
-        for (int i = 0; i < this.items.length; ++i) {
-            if (this.items[i] == null || this.items[i].getItem() == null) {
+        for (int i = 0; i < this.items.size(); ++i) {
+            if (((ItemStack) this.items.get(i)).isEmpty()) {
                 this.setItem(i, itemstack);
                 return i;
             }
@@ -75,40 +58,22 @@
     }
 
     public String getName() {
-        return this.hasCustomName() ? this.a : "container.dispenser";
-    }
-
-    public void a(String s) {
-        this.a = s;
-    }
-
-    public boolean hasCustomName() {
-        return this.a != null;
+        return this.hasCustomName() ? this.o : "container.dispenser";
     }
 
     public static void a(DataConverterManager dataconvertermanager) {
-        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, (DataInspector) (new DataInspectorItemList("Trap", new String[] { "Items"})));
+        dataconvertermanager.a(DataConverterTypes.BLOCK_ENTITY, (DataInspector) (new DataInspectorItemList(TileEntityDispenser.class, new String[] { "Items"})));
     }
 
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
+        this.items = NonNullList.a(this.getSize(), ItemStack.a);
         if (!this.c(nbttagcompound)) {
-            NBTTagList nbttaglist = nbttagcompound.getList("Items", 10);
-
-            this.items = new ItemStack[this.getSize()];
-
-            for (int i = 0; i < nbttaglist.size(); ++i) {
-                NBTTagCompound nbttagcompound1 = nbttaglist.get(i);
-                int j = nbttagcompound1.getByte("Slot") & 255;
-
-                if (j >= 0 && j < this.items.length) {
-                    this.items[j] = ItemStack.createStack(nbttagcompound1);
-                }
-            }
+            ContainerUtil.b(nbttagcompound, this.items);
         }
 
         if (nbttagcompound.hasKeyOfType("CustomName", 8)) {
-            this.a = nbttagcompound.getString("CustomName");
+            this.o = nbttagcompound.getString("CustomName");
         }
 
     }
@@ -116,23 +81,11 @@
     public NBTTagCompound save(NBTTagCompound nbttagcompound) {
         super.save(nbttagcompound);
         if (!this.d(nbttagcompound)) {
-            NBTTagList nbttaglist = new NBTTagList();
-
-            for (int i = 0; i < this.items.length; ++i) {
-                if (this.items[i] != null) {
-                    NBTTagCompound nbttagcompound1 = new NBTTagCompound();
-
-                    nbttagcompound1.setByte("Slot", (byte) i);
-                    this.items[i].save(nbttagcompound1);
-                    nbttaglist.add(nbttagcompound1);
-                }
-            }
-
-            nbttagcompound.set("Items", nbttaglist);
+            ContainerUtil.a(nbttagcompound, this.items);
         }
 
         if (this.hasCustomName()) {
-            nbttagcompound.setString("CustomName", this.a);
+            nbttagcompound.setString("CustomName", this.o);
         }
 
         return nbttagcompound;
@@ -142,18 +95,6 @@
         return 64;
     }
 
-    public boolean a(EntityHuman entityhuman) {
-        return this.world.getTileEntity(this.position) != this ? false : entityhuman.e((double) this.position.getX() + 0.5D, (double) this.position.getY() + 0.5D, (double) this.position.getZ() + 0.5D) <= 64.0D;
-    }
-
-    public void startOpen(EntityHuman entityhuman) {}
-
-    public void closeContainer(EntityHuman entityhuman) {}
-
-    public boolean b(int i, ItemStack itemstack) {
-        return true;
-    }
-
     public String getContainerName() {
         return "minecraft:dispenser";
     }
@@ -163,22 +104,7 @@
         return new ContainerDispenser(playerinventory, this);
     }
 
-    public int getProperty(int i) {
-        return 0;
-    }
-
-    public void setProperty(int i, int j) {}
-
-    public int g() {
-        return 0;
-    }
-
-    public void l() {
-        this.d((EntityHuman) null);
-
-        for (int i = 0; i < this.items.length; ++i) {
-            this.items[i] = null;
-        }
-
+    protected NonNullList<ItemStack> q() {
+        return this.items;
     }
 }
