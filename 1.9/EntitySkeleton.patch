--- a/net/minecraft/server/EntitySkeleton.java
+++ b/net/minecraft/server/EntitySkeleton.java
@@ -4,25 +4,37 @@
 
 public class EntitySkeleton extends EntityMonster implements IRangedEntity {
 
-    private PathfinderGoalArrowAttack a = new PathfinderGoalArrowAttack(this, 1.0D, 20, 60, 15.0F);
-    private PathfinderGoalMeleeAttack b = new PathfinderGoalMeleeAttack(this, EntityHuman.class, 1.2D, false);
+    private static final DataWatcherObject<Integer> a = DataWatcher.a(EntitySkeleton.class, DataWatcherRegistry.b);
+    private static final DataWatcherObject<Boolean> b = DataWatcher.a(EntitySkeleton.class, DataWatcherRegistry.h);
+    private final PathfinderGoalBowShoot c = new PathfinderGoalBowShoot(this, 1.0D, 20, 15.0F);
+    private final PathfinderGoalMeleeAttack bv = new PathfinderGoalMeleeAttack(this, 1.2D, flag) {
+        public void d() {
+            super.d();
+            EntitySkeleton.this.a(false);
+        }
+
+        public void c() {
+            super.c();
+            EntitySkeleton.this.a(true);
+        }
+    };
 
     public EntitySkeleton(World world) {
         super(world);
+        this.o();
+    }
+
+    protected void r() {
         this.goalSelector.a(1, new PathfinderGoalFloat(this));
         this.goalSelector.a(2, new PathfinderGoalRestrictSun(this));
         this.goalSelector.a(3, new PathfinderGoalFleeSun(this, 1.0D));
         this.goalSelector.a(3, new PathfinderGoalAvoidTarget(this, EntityWolf.class, 6.0F, 1.0D, 1.2D));
-        this.goalSelector.a(4, new PathfinderGoalRandomStroll(this, 1.0D));
+        this.goalSelector.a(5, new PathfinderGoalRandomStroll(this, 1.0D));
         this.goalSelector.a(6, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 8.0F));
         this.goalSelector.a(6, new PathfinderGoalRandomLookaround(this));
         this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false, new Class[0]));
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget(this, EntityHuman.class, true));
         this.targetSelector.a(3, new PathfinderGoalNearestAttackableTarget(this, EntityIronGolem.class, true));
-        if (world != null && !world.isClientSide) {
-            this.n();
-        }
-
     }
 
     protected void initAttributes() {
@@ -30,31 +42,32 @@
         this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue(0.25D);
     }
 
-    protected void h() {
-        super.h();
-        this.datawatcher.a(13, new Byte((byte) 0));
+    protected void i() {
+        super.i();
+        this.datawatcher.register(EntitySkeleton.a, Integer.valueOf(0));
+        this.datawatcher.register(EntitySkeleton.b, Boolean.valueOf(false));
     }
 
-    protected String z() {
-        return "mob.skeleton.say";
+    protected SoundEffect G() {
+        return SoundEffects.fh;
     }
 
-    protected String bo() {
-        return "mob.skeleton.hurt";
+    protected SoundEffect bR() {
+        return SoundEffects.fm;
     }
 
-    protected String bp() {
-        return "mob.skeleton.death";
+    protected SoundEffect bS() {
+        return SoundEffects.fi;
     }
 
     protected void a(BlockPosition blockposition, Block block) {
-        this.makeSound("mob.skeleton.step", 0.15F, 1.0F);
+        this.a(SoundEffects.fo, 0.15F, 1.0F);
     }
 
-    public boolean r(Entity entity) {
-        if (super.r(entity)) {
+    public boolean B(Entity entity) {
+        if (super.B(entity)) {
             if (this.getSkeletonType() == 1 && entity instanceof EntityLiving) {
-                ((EntityLiving) entity).addEffect(new MobEffect(MobEffectList.WITHER.id, 200));
+                ((EntityLiving) entity).addEffect(new MobEffect(MobEffects.WITHER, 200));
             }
 
             return true;
@@ -67,21 +80,21 @@
         return EnumMonsterType.UNDEAD;
     }
 
-    public void m() {
-        if (this.world.w() && !this.world.isClientSide) {
-            float f = this.c(1.0F);
-            BlockPosition blockposition = new BlockPosition(this.locX, (double) Math.round(this.locY), this.locZ);
+    public void n() {
+        if (this.world.B() && !this.world.isClientSide) {
+            float f = this.e(1.0F);
+            BlockPosition blockposition = this.by() instanceof EntityBoat ? (new BlockPosition(this.locX, (double) Math.round(this.locY), this.locZ)).up() : new BlockPosition(this.locX, (double) Math.round(this.locY), this.locZ);
 
-            if (f > 0.5F && this.random.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && this.world.i(blockposition)) {
+            if (f > 0.5F && this.random.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && this.world.h(blockposition)) {
                 boolean flag = true;
-                ItemStack itemstack = this.getEquipment(4);
+                ItemStack itemstack = this.getEquipment(EnumItemSlot.HEAD);
 
                 if (itemstack != null) {
                     if (itemstack.e()) {
                         itemstack.setData(itemstack.h() + this.random.nextInt(2));
                         if (itemstack.h() >= itemstack.j()) {
                             this.b(itemstack);
-                            this.setEquipment(4, (ItemStack) null);
+                            this.setSlot(EnumItemSlot.HEAD, (ItemStack) null);
                         }
                     }
 
@@ -94,19 +107,19 @@
             }
         }
 
-        if (this.world.isClientSide && this.getSkeletonType() == 1) {
-            this.setSize(0.72F, 2.535F);
+        if (this.world.isClientSide) {
+            this.b(this.getSkeletonType());
         }
 
-        super.m();
+        super.n();
     }
 
-    public void ak() {
-        super.ak();
-        if (this.vehicle instanceof EntityCreature) {
-            EntityCreature entitycreature = (EntityCreature) this.vehicle;
+    public void aw() {
+        super.aw();
+        if (this.by() instanceof EntityCreature) {
+            EntityCreature entitycreature = (EntityCreature) this.by();
 
-            this.aI = entitycreature.aI;
+            this.aM = entitycreature.aM;
         }
 
     }
@@ -121,127 +134,106 @@
             if (d0 * d0 + d1 * d1 >= 2500.0D) {
                 entityhuman.b((Statistic) AchievementList.v);
             }
-        } else if (damagesource.getEntity() instanceof EntityCreeper && ((EntityCreeper) damagesource.getEntity()).isPowered() && ((EntityCreeper) damagesource.getEntity()).cp()) {
-            ((EntityCreeper) damagesource.getEntity()).cq();
+        } else if (damagesource.getEntity() instanceof EntityCreeper && ((EntityCreeper) damagesource.getEntity()).isPowered() && ((EntityCreeper) damagesource.getEntity()).canCauseHeadDrop()) {
+            ((EntityCreeper) damagesource.getEntity()).setCausedHeadDrop();
             this.a(new ItemStack(Items.SKULL, 1, this.getSkeletonType() == 1 ? 1 : 0), 0.0F);
         }
 
     }
 
-    protected Item getLoot() {
-        return Items.ARROW;
-    }
-
-    protected void dropDeathLoot(boolean flag, int i) {
-        int j;
-        int k;
-
-        if (this.getSkeletonType() == 1) {
-            j = this.random.nextInt(3 + i) - 1;
-
-            for (k = 0; k < j; ++k) {
-                this.a(Items.COAL, 1);
-            }
-        } else {
-            j = this.random.nextInt(3 + i);
-
-            for (k = 0; k < j; ++k) {
-                this.a(Items.ARROW, 1);
-            }
-        }
-
-        j = this.random.nextInt(3 + i);
-
-        for (k = 0; k < j; ++k) {
-            this.a(Items.BONE, 1);
-        }
-
-    }
-
-    protected void getRareDrop() {
-        if (this.getSkeletonType() == 1) {
-            this.a(new ItemStack(Items.SKULL, 1, 1), 0.0F);
-        }
-
+    protected MinecraftKey J() {
+        return this.getSkeletonType() == 1 ? LootTables.ak : LootTables.aj;
     }
 
     protected void a(DifficultyDamageScaler difficultydamagescaler) {
         super.a(difficultydamagescaler);
-        this.setEquipment(0, new ItemStack(Items.BOW));
+        this.setSlot(EnumItemSlot.MAINHAND, new ItemStack(Items.BOW));
     }
 
     public GroupDataEntity prepare(DifficultyDamageScaler difficultydamagescaler, GroupDataEntity groupdataentity) {
         groupdataentity = super.prepare(difficultydamagescaler, groupdataentity);
-        if (this.world.worldProvider instanceof WorldProviderHell && this.bc().nextInt(5) > 0) {
-            this.goalSelector.a(4, this.b);
+        if (this.world.worldProvider instanceof WorldProviderHell && this.getRandom().nextInt(5) > 0) {
+            this.goalSelector.a(4, this.bv);
             this.setSkeletonType(1);
-            this.setEquipment(0, new ItemStack(Items.STONE_SWORD));
+            this.setSlot(EnumItemSlot.MAINHAND, new ItemStack(Items.STONE_SWORD));
             this.getAttributeInstance(GenericAttributes.ATTACK_DAMAGE).setValue(4.0D);
         } else {
-            this.goalSelector.a(4, this.a);
+            this.goalSelector.a(4, this.c);
             this.a(difficultydamagescaler);
             this.b(difficultydamagescaler);
         }
 
-        this.j(this.random.nextFloat() < 0.55F * difficultydamagescaler.c());
-        if (this.getEquipment(4) == null) {
-            Calendar calendar = this.world.Y();
+        this.l(this.random.nextFloat() < 0.55F * difficultydamagescaler.c());
+        if (this.getEquipment(EnumItemSlot.HEAD) == null) {
+            Calendar calendar = this.world.ac();
 
             if (calendar.get(2) + 1 == 10 && calendar.get(5) == 31 && this.random.nextFloat() < 0.25F) {
-                this.setEquipment(4, new ItemStack(this.random.nextFloat() < 0.1F ? Blocks.LIT_PUMPKIN : Blocks.PUMPKIN));
-                this.dropChances[4] = 0.0F;
+                this.setSlot(EnumItemSlot.HEAD, new ItemStack(this.random.nextFloat() < 0.1F ? Blocks.LIT_PUMPKIN : Blocks.PUMPKIN));
+                this.dropChanceArmor[EnumItemSlot.HEAD.b()] = 0.0F;
             }
         }
 
         return groupdataentity;
     }
 
-    public void n() {
-        this.goalSelector.a((PathfinderGoal) this.b);
-        this.goalSelector.a((PathfinderGoal) this.a);
-        ItemStack itemstack = this.bA();
-
-        if (itemstack != null && itemstack.getItem() == Items.BOW) {
-            this.goalSelector.a(4, this.a);
-        } else {
-            this.goalSelector.a(4, this.b);
+    public void o() {
+        if (this.world != null && !this.world.isClientSide) {
+            this.goalSelector.a((PathfinderGoal) this.bv);
+            this.goalSelector.a((PathfinderGoal) this.c);
+            ItemStack itemstack = this.getItemInMainHand();
+
+            if (itemstack != null && itemstack.getItem() == Items.BOW) {
+                this.goalSelector.a(4, this.c);
+            } else {
+                this.goalSelector.a(4, this.bv);
+            }
         }
 
     }
 
     public void a(EntityLiving entityliving, float f) {
-        EntityArrow entityarrow = new EntityArrow(this.world, this, entityliving, 1.6F, (float) (14 - this.world.getDifficulty().a() * 4));
-        int i = EnchantmentManager.getEnchantmentLevel(Enchantment.ARROW_DAMAGE.id, this.bA());
-        int j = EnchantmentManager.getEnchantmentLevel(Enchantment.ARROW_KNOCKBACK.id, this.bA());
+        EntityTippedArrow entitytippedarrow = new EntityTippedArrow(this.world, this);
+        double d0 = entityliving.locX - this.locX;
+        double d1 = entityliving.getBoundingBox().b + (double) (entityliving.length / 3.0F) - entitytippedarrow.locY;
+        double d2 = entityliving.locZ - this.locZ;
+        double d3 = (double) MathHelper.sqrt(d0 * d0 + d2 * d2);
+
+        entitytippedarrow.shoot(d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - this.world.getDifficulty().a() * 4));
+        int i = EnchantmentManager.a(Enchantments.ARROW_DAMAGE, (EntityLiving) this);
+        int j = EnchantmentManager.a(Enchantments.ARROW_KNOCKBACK, (EntityLiving) this);
 
-        entityarrow.b((double) (f * 2.0F) + this.random.nextGaussian() * 0.25D + (double) ((float) this.world.getDifficulty().a() * 0.11F));
+        entitytippedarrow.c((double) (f * 2.0F) + this.random.nextGaussian() * 0.25D + (double) ((float) this.world.getDifficulty().a() * 0.11F));
         if (i > 0) {
-            entityarrow.b(entityarrow.j() + (double) i * 0.5D + 0.5D);
+            entitytippedarrow.c(entitytippedarrow.k() + (double) i * 0.5D + 0.5D);
         }
 
         if (j > 0) {
-            entityarrow.setKnockbackStrength(j);
+            entitytippedarrow.setKnockbackStrength(j);
         }
 
-        if (EnchantmentManager.getEnchantmentLevel(Enchantment.ARROW_FIRE.id, this.bA()) > 0 || this.getSkeletonType() == 1) {
-            entityarrow.setOnFire(100);
+        if (EnchantmentManager.a(Enchantments.ARROW_FIRE, (EntityLiving) this) > 0 || this.getSkeletonType() == 1) {
+            entitytippedarrow.setOnFire(100);
         }
 
-        this.makeSound("random.bow", 1.0F, 1.0F / (this.bc().nextFloat() * 0.4F + 0.8F));
-        this.world.addEntity(entityarrow);
+        this.a(SoundEffects.fn, 1.0F, 1.0F / (this.getRandom().nextFloat() * 0.4F + 0.8F));
+        this.world.addEntity(entitytippedarrow);
     }
 
     public int getSkeletonType() {
-        return this.datawatcher.getByte(13);
+        return ((Integer) this.datawatcher.get(EntitySkeleton.a)).intValue();
     }
 
     public void setSkeletonType(int i) {
-        this.datawatcher.watch(13, Byte.valueOf((byte) i));
+        this.datawatcher.set(EntitySkeleton.a, Integer.valueOf(i));
         this.fireProof = i == 1;
+        this.b(i);
+    }
+
+    private void b(int i) {
         if (i == 1) {
-            this.setSize(0.72F, 2.535F);
+            this.setSize(0.7F, 2.4F);
         } else {
-            this.setSize(0.6F, 1.95F);
+            this.setSize(0.6F, 1.99F);
         }
 
     }
@@ -254,7 +246,7 @@
             this.setSkeletonType(b0);
         }
 
-        this.n();
+        this.o();
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -262,19 +254,23 @@
         nbttagcompound.setByte("SkeletonType", (byte) this.getSkeletonType());
     }
 
-    public void setEquipment(int i, ItemStack itemstack) {
-        super.setEquipment(i, itemstack);
-        if (!this.world.isClientSide && i == 0) {
-            this.n();
+    public void setSlot(EnumItemSlot enumitemslot, ItemStack itemstack) {
+        super.setSlot(enumitemslot, itemstack);
+        if (!this.world.isClientSide && enumitemslot == EnumItemSlot.MAINHAND) {
+            this.o();
         }
 
     }
 
     public float getHeadHeight() {
-        return this.getSkeletonType() == 1 ? super.getHeadHeight() : 1.74F;
+        return this.getSkeletonType() == 1 ? 2.1F : 1.74F;
+    }
+
+    public double ax() {
+        return -0.35D;
     }
 
-    public double am() {
-        return this.isBaby() ? 0.0D : -0.35D;
+    public void a(boolean flag) {
+        this.datawatcher.set(EntitySkeleton.b, Boolean.valueOf(flag));
     }
 }
