--- a/net/minecraft/server/BlockPosition.java
+++ b/net/minecraft/server/BlockPosition.java
@@ -1,19 +1,24 @@
 package net.minecraft.server;
 
 import com.google.common.collect.AbstractIterator;
+import com.google.common.collect.Lists;
 import java.util.Iterator;
+import java.util.List;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public class BlockPosition extends BaseBlockPosition {
 
+    private static final Logger c = LogManager.getLogger();
     public static final BlockPosition ZERO = new BlockPosition(0, 0, 0);
-    private static final int c = 1 + MathHelper.c(MathHelper.b(30000000));
-    private static final int d = BlockPosition.c;
-    private static final int e = 64 - BlockPosition.c - BlockPosition.d;
-    private static final int f = 0 + BlockPosition.d;
-    private static final int g = BlockPosition.f + BlockPosition.e;
-    private static final long h = (1L << BlockPosition.c) - 1L;
-    private static final long i = (1L << BlockPosition.e) - 1L;
-    private static final long j = (1L << BlockPosition.d) - 1L;
+    private static final int d = 1 + MathHelper.e(MathHelper.c(30000000));
+    private static final int e = BlockPosition.d;
+    private static final int f = 64 - BlockPosition.d - BlockPosition.e;
+    private static final int g = 0 + BlockPosition.e;
+    private static final int h = BlockPosition.g + BlockPosition.f;
+    private static final long i = (1L << BlockPosition.d) - 1L;
+    private static final long j = (1L << BlockPosition.f) - 1L;
+    private static final long k = (1L << BlockPosition.e) - 1L;
 
     public BlockPosition(int i, int j, int k) {
         super(i, j, k);
@@ -28,7 +33,7 @@
     }
 
     public BlockPosition(Vec3D vec3d) {
-        this(vec3d.a, vec3d.b, vec3d.c);
+        this(vec3d.x, vec3d.y, vec3d.z);
     }
 
     public BlockPosition(BaseBlockPosition baseblockposition) {
@@ -112,13 +117,13 @@
     }
 
     public long asLong() {
-        return ((long) this.getX() & BlockPosition.h) << BlockPosition.g | ((long) this.getY() & BlockPosition.i) << BlockPosition.f | ((long) this.getZ() & BlockPosition.j) << 0;
+        return ((long) this.getX() & BlockPosition.i) << BlockPosition.h | ((long) this.getY() & BlockPosition.j) << BlockPosition.g | ((long) this.getZ() & BlockPosition.k) << 0;
     }
 
     public static BlockPosition fromLong(long i) {
-        int j = (int) (i << 64 - BlockPosition.g - BlockPosition.c >> 64 - BlockPosition.c);
-        int k = (int) (i << 64 - BlockPosition.f - BlockPosition.e >> 64 - BlockPosition.e);
-        int l = (int) (i << 64 - BlockPosition.d >> 64 - BlockPosition.d);
+        int j = (int) (i << 64 - BlockPosition.h - BlockPosition.d >> 64 - BlockPosition.d);
+        int k = (int) (i << 64 - BlockPosition.g - BlockPosition.f >> 64 - BlockPosition.f);
+        int l = (int) (i << 64 - BlockPosition.e >> 64 - BlockPosition.e);
 
         return new BlockPosition(j, k, l);
     }
@@ -167,6 +172,10 @@
         };
     }
 
+    public BlockPosition h() {
+        return this;
+    }
+
     public static Iterable<BlockPosition.MutableBlockPosition> b(BlockPosition blockposition, BlockPosition blockposition1) {
         final BlockPosition blockposition2 = new BlockPosition(Math.min(blockposition.getX(), blockposition1.getX()), Math.min(blockposition.getY(), blockposition1.getY()), Math.min(blockposition.getZ(), blockposition1.getZ()));
         final BlockPosition blockposition3 = new BlockPosition(Math.max(blockposition.getX(), blockposition1.getX()), Math.max(blockposition.getY(), blockposition1.getY()), Math.max(blockposition.getZ(), blockposition1.getZ()));
@@ -217,6 +226,100 @@
         return this.c(baseblockposition);
     }
 
+    public static final class PooledBlockPosition extends BlockPosition {
+
+        private int c;
+        private int d;
+        private int e;
+        private boolean f;
+        private static final List<BlockPosition.PooledBlockPosition> g = Lists.newArrayList();
+
+        private PooledBlockPosition(int i, int j, int k) {
+            super(0, 0, 0);
+            this.c = i;
+            this.d = j;
+            this.e = k;
+        }
+
+        public static BlockPosition.PooledBlockPosition s() {
+            return c(0, 0, 0);
+        }
+
+        public static BlockPosition.PooledBlockPosition c(double d0, double d1, double d2) {
+            return c(MathHelper.floor(d0), MathHelper.floor(d1), MathHelper.floor(d2));
+        }
+
+        public static BlockPosition.PooledBlockPosition c(int i, int j, int k) {
+            List list = BlockPosition.PooledBlockPosition.g;
+
+            synchronized (BlockPosition.PooledBlockPosition.g) {
+                if (!BlockPosition.PooledBlockPosition.g.isEmpty()) {
+                    BlockPosition.PooledBlockPosition blockposition_pooledblockposition = (BlockPosition.PooledBlockPosition) BlockPosition.PooledBlockPosition.g.remove(BlockPosition.PooledBlockPosition.g.size() - 1);
+
+                    if (blockposition_pooledblockposition != null && blockposition_pooledblockposition.f) {
+                        blockposition_pooledblockposition.f = false;
+                        blockposition_pooledblockposition.d(i, j, k);
+                        return blockposition_pooledblockposition;
+                    }
+                }
+            }
+
+            return new BlockPosition.PooledBlockPosition(i, j, k);
+        }
+
+        public void t() {
+            List list = BlockPosition.PooledBlockPosition.g;
+
+            synchronized (BlockPosition.PooledBlockPosition.g) {
+                if (BlockPosition.PooledBlockPosition.g.size() < 100) {
+                    BlockPosition.PooledBlockPosition.g.add(this);
+                }
+
+                this.f = true;
+            }
+        }
+
+        public int getX() {
+            return this.c;
+        }
+
+        public int getY() {
+            return this.d;
+        }
+
+        public int getZ() {
+            return this.e;
+        }
+
+        public BlockPosition.PooledBlockPosition d(int i, int j, int k) {
+            if (this.f) {
+                BlockPosition.c.error("PooledMutableBlockPosition modified after it was released.", new Throwable());
+                this.f = false;
+            }
+
+            this.c = i;
+            this.d = j;
+            this.e = k;
+            return this;
+        }
+
+        public BlockPosition.PooledBlockPosition d(double d0, double d1, double d2) {
+            return this.d(MathHelper.floor(d0), MathHelper.floor(d1), MathHelper.floor(d2));
+        }
+
+        public BlockPosition.PooledBlockPosition h(BaseBlockPosition baseblockposition) {
+            return this.d(baseblockposition.getX(), baseblockposition.getY(), baseblockposition.getZ());
+        }
+
+        public BlockPosition.PooledBlockPosition c(EnumDirection enumdirection) {
+            return this.d(this.c + enumdirection.getAdjacentX(), this.d + enumdirection.getAdjacentY(), this.e + enumdirection.getAdjacentZ());
+        }
+
+        public BaseBlockPosition d(BaseBlockPosition baseblockposition) {
+            return super.c(baseblockposition);
+        }
+    }
+
     public static final class MutableBlockPosition extends BlockPosition {
 
         private int c;
@@ -227,6 +330,10 @@
             this(0, 0, 0);
         }
 
+        public MutableBlockPosition(BlockPosition blockposition) {
+            this(blockposition.getX(), blockposition.getY(), blockposition.getZ());
+        }
+
         public MutableBlockPosition(int i, int j, int k) {
             super(0, 0, 0);
             this.c = i;
@@ -253,6 +360,20 @@
             return this;
         }
 
+        public void c(EnumDirection enumdirection) {
+            this.c += enumdirection.getAdjacentX();
+            this.d += enumdirection.getAdjacentY();
+            this.e += enumdirection.getAdjacentZ();
+        }
+
+        public void p(int i) {
+            this.d = i;
+        }
+
+        public BlockPosition h() {
+            return new BlockPosition(this);
+        }
+
         public BaseBlockPosition d(BaseBlockPosition baseblockposition) {
             return super.c(baseblockposition);
         }
