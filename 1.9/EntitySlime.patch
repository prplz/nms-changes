--- a/net/minecraft/server/EntitySlime.java
+++ b/net/minecraft/server/EntitySlime.java
@@ -2,14 +2,18 @@
 
 public class EntitySlime extends EntityInsentient implements IMonster {
 
+    private static final DataWatcherObject<Integer> bt = DataWatcher.a(EntitySlime.class, DataWatcherRegistry.b);
     public float a;
     public float b;
     public float c;
-    private boolean bk;
+    private boolean bu;
 
     public EntitySlime(World world) {
         super(world);
         this.moveController = new EntitySlime.ControllerMoveSlime(this);
+    }
+
+    protected void r() {
         this.goalSelector.a(1, new EntitySlime.PathfinderGoalSlimeRandomJump(this));
         this.goalSelector.a(2, new EntitySlime.PathfinderGoalSlimeNearestPlayer(this));
         this.goalSelector.a(3, new EntitySlime.PathfinderGoalSlimeRandomDirection(this));
@@ -18,13 +22,13 @@
         this.targetSelector.a(3, new PathfinderGoalNearestAttackableTargetInsentient(this, EntityIronGolem.class));
     }
 
-    protected void h() {
-        super.h();
-        this.datawatcher.a(16, Byte.valueOf((byte) 1));
+    protected void i() {
+        super.i();
+        this.datawatcher.register(EntitySlime.bt, Integer.valueOf(1));
     }
 
     public void setSize(int i) {
-        this.datawatcher.watch(16, Byte.valueOf((byte) i));
+        this.datawatcher.set(EntitySlime.bt, Integer.valueOf(i));
         this.setSize(0.51000005F * (float) i, 0.51000005F * (float) i);
         this.setPosition(this.locX, this.locY, this.locZ);
         this.getAttributeInstance(GenericAttributes.maxHealth).setValue((double) (i * i));
@@ -34,13 +38,17 @@
     }
 
     public int getSize() {
-        return this.datawatcher.getByte(16);
+        return ((Integer) this.datawatcher.get(EntitySlime.bt)).intValue();
     }
 
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
         nbttagcompound.setInt("Size", this.getSize() - 1);
-        nbttagcompound.setBoolean("wasOnGround", this.bk);
+        nbttagcompound.setBoolean("wasOnGround", this.bu);
+    }
+
+    public boolean db() {
+        return this.getSize() <= 1;
     }
 
     public void a(NBTTagCompound nbttagcompound) {
@@ -52,79 +60,72 @@
         }
 
         this.setSize(i + 1);
-        this.bk = nbttagcompound.getBoolean("wasOnGround");
+        this.bu = nbttagcompound.getBoolean("wasOnGround");
     }
 
-    protected EnumParticle n() {
+    protected EnumParticle o() {
         return EnumParticle.SLIME;
     }
 
-    protected String ck() {
-        return "mob.slime." + (this.getSize() > 1 ? "big" : "small");
-    }
-
-    public void t_() {
+    public void m() {
         if (!this.world.isClientSide && this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.getSize() > 0) {
             this.dead = true;
         }
 
         this.b += (this.a - this.b) * 0.5F;
         this.c = this.b;
-        super.t_();
-        if (this.onGround && !this.bk) {
+        super.m();
+        if (this.onGround && !this.bu) {
             int i = this.getSize();
 
             for (int j = 0; j < i * 8; ++j) {
-                float f = this.random.nextFloat() * 3.1415927F * 2.0F;
+                float f = this.random.nextFloat() * 6.2831855F;
                 float f1 = this.random.nextFloat() * 0.5F + 0.5F;
                 float f2 = MathHelper.sin(f) * (float) i * 0.5F * f1;
                 float f3 = MathHelper.cos(f) * (float) i * 0.5F * f1;
                 World world = this.world;
-                EnumParticle enumparticle = this.n();
+                EnumParticle enumparticle = this.o();
                 double d0 = this.locX + (double) f2;
                 double d1 = this.locZ + (double) f3;
 
                 world.addParticle(enumparticle, d0, this.getBoundingBox().b, d1, 0.0D, 0.0D, 0.0D, new int[0]);
             }
 
-            if (this.cl()) {
-                this.makeSound(this.ck(), this.bB(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) / 0.8F);
-            }
-
+            this.a(this.cY(), this.cd(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) / 0.8F);
             this.a = -0.5F;
-        } else if (!this.onGround && this.bk) {
+        } else if (!this.onGround && this.bu) {
             this.a = 1.0F;
         }
 
-        this.bk = this.onGround;
-        this.ch();
+        this.bu = this.onGround;
+        this.cV();
     }
 
-    protected void ch() {
+    protected void cV() {
         this.a *= 0.6F;
     }
 
-    protected int cg() {
+    protected int cU() {
         return this.random.nextInt(20) + 10;
     }
 
-    protected EntitySlime cf() {
+    protected EntitySlime cT() {
         return new EntitySlime(this.world);
     }
 
-    public void i(int i) {
-        if (i == 16) {
-            int j = this.getSize();
-
-            this.setSize(0.51000005F * (float) j, 0.51000005F * (float) j);
-            this.yaw = this.aK;
-            this.aI = this.aK;
-            if (this.V() && this.random.nextInt(20) == 0) {
-                this.X();
+    public void a(DataWatcherObject<?> datawatcherobject) {
+        if (EntitySlime.bt.equals(datawatcherobject)) {
+            int i = this.getSize();
+
+            this.setSize(0.51000005F * (float) i, 0.51000005F * (float) i);
+            this.yaw = this.aO;
+            this.aM = this.aO;
+            if (this.isInWater() && this.random.nextInt(20) == 0) {
+                this.ak();
             }
         }
 
-        super.i(i);
+        super.a(datawatcherobject);
     }
 
     public void die() {
@@ -136,14 +137,14 @@
             for (int k = 0; k < j; ++k) {
                 float f = ((float) (k % 2) - 0.5F) * (float) i / 4.0F;
                 float f1 = ((float) (k / 2) - 0.5F) * (float) i / 4.0F;
-                EntitySlime entityslime = this.cf();
+                EntitySlime entityslime = this.cT();
 
                 if (this.hasCustomName()) {
                     entityslime.setCustomName(this.getCustomName());
                 }
 
                 if (this.isPersistent()) {
-                    entityslime.bX();
+                    entityslime.cL();
                 }
 
                 entityslime.setSize(i / 2);
@@ -157,24 +158,24 @@
 
     public void collide(Entity entity) {
         super.collide(entity);
-        if (entity instanceof EntityIronGolem && this.ci()) {
-            this.e((EntityLiving) entity);
+        if (entity instanceof EntityIronGolem && this.cW()) {
+            this.d((EntityLiving) entity);
         }
 
     }
 
     public void d(EntityHuman entityhuman) {
-        if (this.ci()) {
-            this.e((EntityLiving) entityhuman);
+        if (this.cW()) {
+            this.d((EntityLiving) entityhuman);
         }
 
     }
 
-    protected void e(EntityLiving entityliving) {
+    protected void d(EntityLiving entityliving) {
         int i = this.getSize();
 
-        if (this.hasLineOfSight(entityliving) && this.h(entityliving) < 0.6D * (double) i * 0.6D * (double) i && entityliving.damageEntity(DamageSource.mobAttack(this), (float) this.cj())) {
-            this.makeSound("mob.attack", 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+        if (this.hasLineOfSight(entityliving) && this.h(entityliving) < 0.6D * (double) i * 0.6D * (double) i && entityliving.damageEntity(DamageSource.mobAttack(this), (float) this.cX())) {
+            this.a(SoundEffects.fp, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
             this.a((EntityLiving) this, (Entity) entityliving);
         }
 
@@ -184,27 +185,35 @@
         return 0.625F * this.length;
     }
 
-    protected boolean ci() {
-        return this.getSize() > 1;
+    protected boolean cW() {
+        return !this.db();
     }
 
-    protected int cj() {
+    protected int cX() {
         return this.getSize();
     }
 
-    protected String bo() {
-        return "mob.slime." + (this.getSize() > 1 ? "big" : "small");
+    protected SoundEffect bR() {
+        return this.db() ? SoundEffects.fD : SoundEffects.fu;
+    }
+
+    protected SoundEffect bS() {
+        return this.db() ? SoundEffects.fC : SoundEffects.fr;
     }
 
-    protected String bp() {
-        return "mob.slime." + (this.getSize() > 1 ? "big" : "small");
+    protected SoundEffect cY() {
+        return this.db() ? SoundEffects.fF : SoundEffects.fx;
     }
 
     protected Item getLoot() {
         return this.getSize() == 1 ? Items.SLIME : null;
     }
 
-    public boolean bR() {
+    protected MinecraftKey J() {
+        return this.getSize() == 1 ? LootTables.ac : LootTables.a;
+    }
+
+    public boolean cF() {
         BlockPosition blockposition = new BlockPosition(MathHelper.floor(this.locX), 0, MathHelper.floor(this.locZ));
         Chunk chunk = this.world.getChunkAtWorldCoords(blockposition);
 
@@ -214,12 +223,12 @@
             if (this.world.getDifficulty() != EnumDifficulty.PEACEFUL) {
                 BiomeBase biomebase = this.world.getBiome(blockposition);
 
-                if (biomebase == BiomeBase.SWAMPLAND && this.locY > 50.0D && this.locY < 70.0D && this.random.nextFloat() < 0.5F && this.random.nextFloat() < this.world.y() && this.world.getLightLevel(new BlockPosition(this)) <= this.random.nextInt(8)) {
-                    return super.bR();
+                if (biomebase == Biomes.h && this.locY > 50.0D && this.locY < 70.0D && this.random.nextFloat() < 0.5F && this.random.nextFloat() < this.world.E() && this.world.getLightLevel(new BlockPosition(this)) <= this.random.nextInt(8)) {
+                    return super.cF();
                 }
 
                 if (this.random.nextInt(10) == 0 && chunk.a(987234911L).nextInt(10) == 0 && this.locY < 40.0D) {
-                    return super.bR();
+                    return super.cF();
                 }
             }
 
@@ -227,25 +236,21 @@
         }
     }
 
-    protected float bB() {
+    protected float cd() {
         return 0.4F * (float) this.getSize();
     }
 
-    public int bQ() {
+    public int N() {
         return 0;
     }
 
-    protected boolean cn() {
+    protected boolean dc() {
         return this.getSize() > 0;
     }
 
-    protected boolean cl() {
-        return this.getSize() > 2;
-    }
-
-    protected void bF() {
+    protected void ch() {
         this.motY = 0.41999998688697815D;
-        this.ai = true;
+        this.impulse = true;
     }
 
     public GroupDataEntity prepare(DifficultyDamageScaler difficultydamagescaler, GroupDataEntity groupdataentity) {
@@ -261,6 +266,10 @@
         return super.prepare(difficultydamagescaler, groupdataentity);
     }
 
+    protected SoundEffect cZ() {
+        return this.db() ? SoundEffects.fE : SoundEffects.fv;
+    }
+
     static class PathfinderGoalSlimeIdle extends PathfinderGoal {
 
         private EntitySlime a;
@@ -286,15 +295,15 @@
         public PathfinderGoalSlimeRandomJump(EntitySlime entityslime) {
             this.a = entityslime;
             this.a(5);
-            ((Navigation) entityslime.getNavigation()).d(true);
+            ((Navigation) entityslime.getNavigation()).c(true);
         }
 
         public boolean a() {
-            return this.a.V() || this.a.ab();
+            return this.a.isInWater() || this.a.an();
         }
 
         public void e() {
-            if (this.a.bc().nextFloat() < 0.8F) {
+            if (this.a.getRandom().nextFloat() < 0.8F) {
                 this.a.getControllerJump().a();
             }
 
@@ -314,13 +323,13 @@
         }
 
         public boolean a() {
-            return this.a.getGoalTarget() == null && (this.a.onGround || this.a.V() || this.a.ab());
+            return this.a.getGoalTarget() == null && (this.a.onGround || this.a.isInWater() || this.a.an() || this.a.hasEffect(MobEffects.LEVITATION));
         }
 
         public void e() {
             if (--this.c <= 0) {
-                this.c = 40 + this.a.bc().nextInt(60);
-                this.b = (float) this.a.bc().nextInt(360);
+                this.c = 40 + this.a.getRandom().nextInt(60);
+                this.b = (float) this.a.getRandom().nextInt(360);
             }
 
             ((EntitySlime.ControllerMoveSlime) this.a.getControllerMove()).a(this.b, false);
@@ -355,59 +364,60 @@
         }
 
         public void e() {
-            this.a.a(this.a.getGoalTarget(), 10.0F, 10.0F);
-            ((EntitySlime.ControllerMoveSlime) this.a.getControllerMove()).a(this.a.yaw, this.a.ci());
+            this.a.a((Entity) this.a.getGoalTarget(), 10.0F, 10.0F);
+            ((EntitySlime.ControllerMoveSlime) this.a.getControllerMove()).a(this.a.yaw, this.a.cW());
         }
     }
 
     static class ControllerMoveSlime extends ControllerMove {
 
-        private float g;
-        private int h;
-        private EntitySlime i;
-        private boolean j;
+        private float i;
+        private int j;
+        private EntitySlime k;
+        private boolean l;
 
         public ControllerMoveSlime(EntitySlime entityslime) {
             super(entityslime);
-            this.i = entityslime;
+            this.k = entityslime;
+            this.i = 180.0F * entityslime.yaw / 3.1415927F;
         }
 
         public void a(float f, boolean flag) {
-            this.g = f;
-            this.j = flag;
+            this.i = f;
+            this.l = flag;
         }
 
         public void a(double d0) {
             this.e = d0;
-            this.f = true;
+            this.h = ControllerMove.Operation.MOVE_TO;
         }
 
         public void c() {
-            this.a.yaw = this.a(this.a.yaw, this.g, 30.0F);
-            this.a.aK = this.a.yaw;
-            this.a.aI = this.a.yaw;
-            if (!this.f) {
-                this.a.n(0.0F);
+            this.a.yaw = this.a(this.a.yaw, this.i, 90.0F);
+            this.a.aO = this.a.yaw;
+            this.a.aM = this.a.yaw;
+            if (this.h != ControllerMove.Operation.MOVE_TO) {
+                this.a.o(0.0F);
             } else {
-                this.f = false;
+                this.h = ControllerMove.Operation.WAIT;
                 if (this.a.onGround) {
-                    this.a.k((float) (this.e * this.a.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getValue()));
-                    if (this.h-- <= 0) {
-                        this.h = this.i.cg();
-                        if (this.j) {
-                            this.h /= 3;
+                    this.a.l((float) (this.e * this.a.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getValue()));
+                    if (this.j-- <= 0) {
+                        this.j = this.k.cU();
+                        if (this.l) {
+                            this.j /= 3;
                         }
 
-                        this.i.getControllerJump().a();
-                        if (this.i.cn()) {
-                            this.i.makeSound(this.i.ck(), this.i.bB(), ((this.i.bc().nextFloat() - this.i.bc().nextFloat()) * 0.2F + 1.0F) * 0.8F);
+                        this.k.getControllerJump().a();
+                        if (this.k.dc()) {
+                            this.k.a(this.k.cZ(), this.k.cd(), ((this.k.getRandom().nextFloat() - this.k.getRandom().nextFloat()) * 0.2F + 1.0F) * 0.8F);
                         }
                     } else {
-                        this.i.aZ = this.i.ba = 0.0F;
-                        this.a.k(0.0F);
+                        this.k.bd = this.k.be = 0.0F;
+                        this.a.l(0.0F);
                     }
                 } else {
-                    this.a.k((float) (this.e * this.a.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getValue()));
+                    this.a.l((float) (this.e * this.a.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getValue()));
                 }
 
             }
