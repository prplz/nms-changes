--- a/net/minecraft/server/EntityArrow.java
+++ b/net/minecraft/server/EntityArrow.java
@@ -1,85 +1,76 @@
 package net.minecraft.server;
 
+import com.google.common.base.Predicate;
+import com.google.common.base.Predicates;
 import java.util.List;
 
-public class EntityArrow extends Entity implements IProjectile {
+public abstract class EntityArrow extends Entity implements IProjectile {
 
-    private int d = -1;
-    private int e = -1;
-    private int f = -1;
-    private Block g;
+    private static final Predicate<Entity> f = Predicates.and(new Predicate[] { IEntitySelector.e, IEntitySelector.a, new Predicate() {
+        public boolean a(Entity entity) {
+            return entity.isInteractable();
+        }
+
+        public boolean apply(Object object) {
+            return this.a((Entity) object);
+        }
+    }});
+    private static final DataWatcherObject<Byte> g = DataWatcher.a(EntityArrow.class, DataWatcherRegistry.a);
     private int h;
-    private boolean inGround;
-    public int fromPlayer;
+    private int as;
+    private int at;
+    private Block au;
+    private int av;
+    protected boolean inGround;
+    protected int b;
+    public EntityArrow.PickupStatus fromPlayer;
     public int shake;
     public Entity shooter;
-    private int ar;
-    private int as;
-    private double damage = 2.0D;
+    private int aw;
+    private int ax;
+    private double damage;
     public int knockbackStrength;
 
     public EntityArrow(World world) {
         super(world);
-        this.j = 10.0D;
+        this.h = -1;
+        this.as = -1;
+        this.at = -1;
+        this.fromPlayer = EntityArrow.PickupStatus.DISALLOWED;
+        this.damage = 2.0D;
         this.setSize(0.5F, 0.5F);
     }
 
     public EntityArrow(World world, double d0, double d1, double d2) {
-        super(world);
-        this.j = 10.0D;
-        this.setSize(0.5F, 0.5F);
+        this(world);
         this.setPosition(d0, d1, d2);
     }
 
-    public EntityArrow(World world, EntityLiving entityliving, EntityLiving entityliving1, float f, float f1) {
-        super(world);
-        this.j = 10.0D;
+    public EntityArrow(World world, EntityLiving entityliving) {
+        this(world, entityliving.locX, entityliving.locY + (double) entityliving.getHeadHeight() - 0.10000000149011612D, entityliving.locZ);
         this.shooter = entityliving;
         if (entityliving instanceof EntityHuman) {
-            this.fromPlayer = 1;
+            this.fromPlayer = EntityArrow.PickupStatus.ALLOWED;
         }
 
-        this.locY = entityliving.locY + (double) entityliving.getHeadHeight() - 0.10000000149011612D;
-        double d0 = entityliving1.locX - entityliving.locX;
-        double d1 = entityliving1.getBoundingBox().b + (double) (entityliving1.length / 3.0F) - this.locY;
-        double d2 = entityliving1.locZ - entityliving.locZ;
-        double d3 = (double) MathHelper.sqrt(d0 * d0 + d2 * d2);
-
-        if (d3 >= 1.0E-7D) {
-            float f2 = (float) (MathHelper.b(d2, d0) * 180.0D / 3.1415927410125732D) - 90.0F;
-            float f3 = (float) (-(MathHelper.b(d1, d3) * 180.0D / 3.1415927410125732D));
-            double d4 = d0 / d3;
-            double d5 = d2 / d3;
-
-            this.setPositionRotation(entityliving.locX + d4, this.locY, entityliving.locZ + d5, f2, f3);
-            float f4 = (float) (d3 * 0.20000000298023224D);
+    }
 
-            this.shoot(d0, d1 + (double) f4, d2, f, f1);
-        }
+    protected void i() {
+        this.datawatcher.register(EntityArrow.g, Byte.valueOf((byte) 0));
     }
 
-    public EntityArrow(World world, EntityLiving entityliving, float f) {
-        super(world);
-        this.j = 10.0D;
-        this.shooter = entityliving;
-        if (entityliving instanceof EntityHuman) {
-            this.fromPlayer = 1;
-        }
+    public void a(Entity entity, float f, float f1, float f2, float f3, float f4) {
+        float f5 = -MathHelper.sin(f1 * 0.017453292F) * MathHelper.cos(f * 0.017453292F);
+        float f6 = -MathHelper.sin(f * 0.017453292F);
+        float f7 = MathHelper.cos(f1 * 0.017453292F) * MathHelper.cos(f * 0.017453292F);
 
-        this.setSize(0.5F, 0.5F);
-        this.setPositionRotation(entityliving.locX, entityliving.locY + (double) entityliving.getHeadHeight(), entityliving.locZ, entityliving.yaw, entityliving.pitch);
-        this.locX -= (double) (MathHelper.cos(this.yaw / 180.0F * 3.1415927F) * 0.16F);
-        this.locY -= 0.10000000149011612D;
-        this.locZ -= (double) (MathHelper.sin(this.yaw / 180.0F * 3.1415927F) * 0.16F);
-        this.setPosition(this.locX, this.locY, this.locZ);
-        this.motX = (double) (-MathHelper.sin(this.yaw / 180.0F * 3.1415927F) * MathHelper.cos(this.pitch / 180.0F * 3.1415927F));
-        this.motZ = (double) (MathHelper.cos(this.yaw / 180.0F * 3.1415927F) * MathHelper.cos(this.pitch / 180.0F * 3.1415927F));
-        this.motY = (double) (-MathHelper.sin(this.pitch / 180.0F * 3.1415927F));
-        this.shoot(this.motX, this.motY, this.motZ, f * 1.5F, 1.0F);
-    }
+        this.shoot((double) f5, (double) f6, (double) f7, f3, f4);
+        this.motX += entity.motX;
+        this.motZ += entity.motZ;
+        if (!entity.onGround) {
+            this.motY += entity.motY;
+        }
 
-    protected void h() {
-        this.datawatcher.a(16, Byte.valueOf((byte) 0));
     }
 
     public void shoot(double d0, double d1, double d2, float f, float f1) {
@@ -88,9 +79,9 @@
         d0 /= (double) f2;
         d1 /= (double) f2;
         d2 /= (double) f2;
-        d0 += this.random.nextGaussian() * (double) (this.random.nextBoolean() ? -1 : 1) * 0.007499999832361937D * (double) f1;
-        d1 += this.random.nextGaussian() * (double) (this.random.nextBoolean() ? -1 : 1) * 0.007499999832361937D * (double) f1;
-        d2 += this.random.nextGaussian() * (double) (this.random.nextBoolean() ? -1 : 1) * 0.007499999832361937D * (double) f1;
+        d0 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
+        d1 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
+        d2 += this.random.nextGaussian() * 0.007499999832361937D * (double) f1;
         d0 *= (double) f;
         d1 *= (double) f;
         d2 *= (double) f;
@@ -99,29 +90,28 @@
         this.motZ = d2;
         float f3 = MathHelper.sqrt(d0 * d0 + d2 * d2);
 
-        this.lastYaw = this.yaw = (float) (MathHelper.b(d0, d2) * 180.0D / 3.1415927410125732D);
-        this.lastPitch = this.pitch = (float) (MathHelper.b(d1, (double) f3) * 180.0D / 3.1415927410125732D);
-        this.ar = 0;
+        this.lastYaw = this.yaw = (float) (MathHelper.b(d0, d2) * 57.2957763671875D);
+        this.lastPitch = this.pitch = (float) (MathHelper.b(d1, (double) f3) * 57.2957763671875D);
+        this.aw = 0;
     }
 
-    public void t_() {
-        super.t_();
+    public void m() {
+        super.m();
         if (this.lastPitch == 0.0F && this.lastYaw == 0.0F) {
             float f = MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ);
 
-            this.lastYaw = this.yaw = (float) (MathHelper.b(this.motX, this.motZ) * 180.0D / 3.1415927410125732D);
-            this.lastPitch = this.pitch = (float) (MathHelper.b(this.motY, (double) f) * 180.0D / 3.1415927410125732D);
+            this.lastYaw = this.yaw = (float) (MathHelper.b(this.motX, this.motZ) * 57.2957763671875D);
+            this.lastPitch = this.pitch = (float) (MathHelper.b(this.motY, (double) f) * 57.2957763671875D);
         }
 
-        BlockPosition blockposition = new BlockPosition(this.d, this.e, this.f);
+        BlockPosition blockposition = new BlockPosition(this.h, this.as, this.at);
         IBlockData iblockdata = this.world.getType(blockposition);
         Block block = iblockdata.getBlock();
 
-        if (block.getMaterial() != Material.AIR) {
-            block.updateShape(this.world, blockposition);
-            AxisAlignedBB axisalignedbb = block.a(this.world, blockposition, iblockdata);
+        if (iblockdata.getMaterial() != Material.AIR) {
+            AxisAlignedBB axisalignedbb = iblockdata.d(this.world, blockposition);
 
-            if (axisalignedbb != null && axisalignedbb.a(new Vec3D(this.locX, this.locY, this.locZ))) {
+            if (axisalignedbb != Block.k && axisalignedbb.a(blockposition).a(new Vec3D(this.locX, this.locY, this.locZ))) {
                 this.inGround = true;
             }
         }
@@ -133,9 +123,9 @@
         if (this.inGround) {
             int i = block.toLegacyData(iblockdata);
 
-            if (block == this.g && i == this.h) {
-                ++this.ar;
-                if (this.ar >= 1200) {
+            if (block == this.au && i == this.av) {
+                ++this.aw;
+                if (this.aw >= 1200) {
                     this.die();
                 }
             } else {
@@ -143,12 +133,14 @@
                 this.motX *= (double) (this.random.nextFloat() * 0.2F);
                 this.motY *= (double) (this.random.nextFloat() * 0.2F);
                 this.motZ *= (double) (this.random.nextFloat() * 0.2F);
-                this.ar = 0;
-                this.as = 0;
+                this.aw = 0;
+                this.ax = 0;
             }
 
+            ++this.b;
         } else {
-            ++this.as;
+            this.b = 0;
+            ++this.ax;
             Vec3D vec3d = new Vec3D(this.locX, this.locY, this.locZ);
             Vec3D vec3d1 = new Vec3D(this.locX + this.motX, this.locY + this.motY, this.locZ + this.motZ);
             MovingObjectPosition movingobjectposition = this.world.rayTrace(vec3d, vec3d1, false, true, false);
@@ -156,34 +148,10 @@
             vec3d = new Vec3D(this.locX, this.locY, this.locZ);
             vec3d1 = new Vec3D(this.locX + this.motX, this.locY + this.motY, this.locZ + this.motZ);
             if (movingobjectposition != null) {
-                vec3d1 = new Vec3D(movingobjectposition.pos.a, movingobjectposition.pos.b, movingobjectposition.pos.c);
+                vec3d1 = new Vec3D(movingobjectposition.pos.x, movingobjectposition.pos.y, movingobjectposition.pos.z);
             }
 
-            Entity entity = null;
-            List list = this.world.getEntities(this, this.getBoundingBox().a(this.motX, this.motY, this.motZ).grow(1.0D, 1.0D, 1.0D));
-            double d0 = 0.0D;
-
-            int j;
-            float f1;
-
-            for (j = 0; j < list.size(); ++j) {
-                Entity entity1 = (Entity) list.get(j);
-
-                if (entity1.ad() && (entity1 != this.shooter || this.as >= 5)) {
-                    f1 = 0.3F;
-                    AxisAlignedBB axisalignedbb1 = entity1.getBoundingBox().grow((double) f1, (double) f1, (double) f1);
-                    MovingObjectPosition movingobjectposition1 = axisalignedbb1.a(vec3d, vec3d1);
-
-                    if (movingobjectposition1 != null) {
-                        double d1 = vec3d.distanceSquared(movingobjectposition1.pos);
-
-                        if (d1 < d0 || d0 == 0.0D) {
-                            entity = entity1;
-                            d0 = d1;
-                        }
-                    }
-                }
-            }
+            Entity entity = this.a(vec3d, vec3d1);
 
             if (entity != null) {
                 movingobjectposition = new MovingObjectPosition(entity);
@@ -192,101 +160,17 @@
             if (movingobjectposition != null && movingobjectposition.entity != null && movingobjectposition.entity instanceof EntityHuman) {
                 EntityHuman entityhuman = (EntityHuman) movingobjectposition.entity;
 
-                if (entityhuman.abilities.isInvulnerable || this.shooter instanceof EntityHuman && !((EntityHuman) this.shooter).a(entityhuman)) {
+                if (this.shooter instanceof EntityHuman && !((EntityHuman) this.shooter).a(entityhuman)) {
                     movingobjectposition = null;
                 }
             }
 
-            float f2;
-            float f3;
-
             if (movingobjectposition != null) {
-                if (movingobjectposition.entity != null) {
-                    f2 = MathHelper.sqrt(this.motX * this.motX + this.motY * this.motY + this.motZ * this.motZ);
-                    int k = MathHelper.f((double) f2 * this.damage);
-
-                    if (this.isCritical()) {
-                        k += this.random.nextInt(k / 2 + 2);
-                    }
-
-                    DamageSource damagesource;
-
-                    if (this.shooter == null) {
-                        damagesource = DamageSource.arrow(this, this);
-                    } else {
-                        damagesource = DamageSource.arrow(this, this.shooter);
-                    }
-
-                    if (this.isBurning() && !(movingobjectposition.entity instanceof EntityEnderman)) {
-                        movingobjectposition.entity.setOnFire(5);
-                    }
-
-                    if (movingobjectposition.entity.damageEntity(damagesource, (float) k)) {
-                        if (movingobjectposition.entity instanceof EntityLiving) {
-                            EntityLiving entityliving = (EntityLiving) movingobjectposition.entity;
-
-                            if (!this.world.isClientSide) {
-                                entityliving.o(entityliving.bv() + 1);
-                            }
-
-                            if (this.knockbackStrength > 0) {
-                                f3 = MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ);
-                                if (f3 > 0.0F) {
-                                    movingobjectposition.entity.g(this.motX * (double) this.knockbackStrength * 0.6000000238418579D / (double) f3, 0.1D, this.motZ * (double) this.knockbackStrength * 0.6000000238418579D / (double) f3);
-                                }
-                            }
-
-                            if (this.shooter instanceof EntityLiving) {
-                                EnchantmentManager.a(entityliving, this.shooter);
-                                EnchantmentManager.b((EntityLiving) this.shooter, entityliving);
-                            }
-
-                            if (this.shooter != null && movingobjectposition.entity != this.shooter && movingobjectposition.entity instanceof EntityHuman && this.shooter instanceof EntityPlayer) {
-                                ((EntityPlayer) this.shooter).playerConnection.sendPacket(new PacketPlayOutGameStateChange(6, 0.0F));
-                            }
-                        }
-
-                        this.makeSound("random.bowhit", 1.0F, 1.2F / (this.random.nextFloat() * 0.2F + 0.9F));
-                        if (!(movingobjectposition.entity instanceof EntityEnderman)) {
-                            this.die();
-                        }
-                    } else {
-                        this.motX *= -0.10000000149011612D;
-                        this.motY *= -0.10000000149011612D;
-                        this.motZ *= -0.10000000149011612D;
-                        this.yaw += 180.0F;
-                        this.lastYaw += 180.0F;
-                        this.as = 0;
-                    }
-                } else {
-                    BlockPosition blockposition1 = movingobjectposition.a();
-
-                    this.d = blockposition1.getX();
-                    this.e = blockposition1.getY();
-                    this.f = blockposition1.getZ();
-                    IBlockData iblockdata1 = this.world.getType(blockposition1);
-
-                    this.g = iblockdata1.getBlock();
-                    this.h = this.g.toLegacyData(iblockdata1);
-                    this.motX = (double) ((float) (movingobjectposition.pos.a - this.locX));
-                    this.motY = (double) ((float) (movingobjectposition.pos.b - this.locY));
-                    this.motZ = (double) ((float) (movingobjectposition.pos.c - this.locZ));
-                    f1 = MathHelper.sqrt(this.motX * this.motX + this.motY * this.motY + this.motZ * this.motZ);
-                    this.locX -= this.motX / (double) f1 * 0.05000000074505806D;
-                    this.locY -= this.motY / (double) f1 * 0.05000000074505806D;
-                    this.locZ -= this.motZ / (double) f1 * 0.05000000074505806D;
-                    this.makeSound("random.bowhit", 1.0F, 1.2F / (this.random.nextFloat() * 0.2F + 0.9F));
-                    this.inGround = true;
-                    this.shake = 7;
-                    this.setCritical(false);
-                    if (this.g.getMaterial() != Material.AIR) {
-                        this.g.a(this.world, blockposition1, iblockdata1, (Entity) this);
-                    }
-                }
+                this.a(movingobjectposition);
             }
 
             if (this.isCritical()) {
-                for (j = 0; j < 4; ++j) {
+                for (int j = 0; j < 4; ++j) {
                     this.world.addParticle(EnumParticle.CRIT, this.locX + this.motX * (double) j / 4.0D, this.locY + this.motY * (double) j / 4.0D, this.locZ + this.motZ * (double) j / 4.0D, -this.motX, -this.motY + 0.2D, -this.motZ, new int[0]);
                 }
             }
@@ -294,10 +178,11 @@
             this.locX += this.motX;
             this.locY += this.motY;
             this.locZ += this.motZ;
-            f2 = MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ);
-            this.yaw = (float) (MathHelper.b(this.motX, this.motZ) * 180.0D / 3.1415927410125732D);
+            float f1 = MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ);
+
+            this.yaw = (float) (MathHelper.b(this.motX, this.motZ) * 57.2957763671875D);
 
-            for (this.pitch = (float) (MathHelper.b(this.motY, (double) f2) * 180.0D / 3.1415927410125732D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
+            for (this.pitch = (float) (MathHelper.b(this.motY, (double) f1) * 57.2957763671875D); this.pitch - this.lastPitch < -180.0F; this.lastPitch -= 360.0F) {
                 ;
             }
 
@@ -315,58 +200,185 @@
 
             this.pitch = this.lastPitch + (this.pitch - this.lastPitch) * 0.2F;
             this.yaw = this.lastYaw + (this.yaw - this.lastYaw) * 0.2F;
-            float f4 = 0.99F;
+            float f2 = 0.99F;
+            float f3 = 0.05F;
 
-            f1 = 0.05F;
-            if (this.V()) {
-                for (int l = 0; l < 4; ++l) {
-                    f3 = 0.25F;
-                    this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * (double) f3, this.locY - this.motY * (double) f3, this.locZ - this.motZ * (double) f3, this.motX, this.motY, this.motZ, new int[0]);
+            if (this.isInWater()) {
+                for (int k = 0; k < 4; ++k) {
+                    float f4 = 0.25F;
+
+                    this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX - this.motX * (double) f4, this.locY - this.motY * (double) f4, this.locZ - this.motZ * (double) f4, this.motX, this.motY, this.motZ, new int[0]);
                 }
 
-                f4 = 0.6F;
+                f2 = 0.6F;
             }
 
-            if (this.U()) {
+            if (this.ah()) {
                 this.extinguish();
             }
 
-            this.motX *= (double) f4;
-            this.motY *= (double) f4;
-            this.motZ *= (double) f4;
-            this.motY -= (double) f1;
+            this.motX *= (double) f2;
+            this.motY *= (double) f2;
+            this.motZ *= (double) f2;
+            this.motY -= (double) f3;
             this.setPosition(this.locX, this.locY, this.locZ);
             this.checkBlockCollisions();
         }
     }
 
+    protected void a(MovingObjectPosition movingobjectposition) {
+        Entity entity = movingobjectposition.entity;
+
+        if (entity != null) {
+            float f = MathHelper.sqrt(this.motX * this.motX + this.motY * this.motY + this.motZ * this.motZ);
+            int i = MathHelper.f((double) f * this.damage);
+
+            if (this.isCritical()) {
+                i += this.random.nextInt(i / 2 + 2);
+            }
+
+            DamageSource damagesource;
+
+            if (this.shooter == null) {
+                damagesource = DamageSource.arrow(this, this);
+            } else {
+                damagesource = DamageSource.arrow(this, this.shooter);
+            }
+
+            if (this.isBurning() && !(entity instanceof EntityEnderman)) {
+                entity.setOnFire(5);
+            }
+
+            if (entity.damageEntity(damagesource, (float) i)) {
+                if (entity instanceof EntityLiving) {
+                    EntityLiving entityliving = (EntityLiving) entity;
+
+                    if (!this.world.isClientSide) {
+                        entityliving.k(entityliving.bX() + 1);
+                    }
+
+                    if (this.knockbackStrength > 0) {
+                        float f1 = MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ);
+
+                        if (f1 > 0.0F) {
+                            entityliving.g(this.motX * (double) this.knockbackStrength * 0.6000000238418579D / (double) f1, 0.1D, this.motZ * (double) this.knockbackStrength * 0.6000000238418579D / (double) f1);
+                        }
+                    }
+
+                    if (this.shooter instanceof EntityLiving) {
+                        EnchantmentManager.a(entityliving, this.shooter);
+                        EnchantmentManager.b((EntityLiving) this.shooter, (Entity) entityliving);
+                    }
+
+                    this.a(entityliving);
+                    if (this.shooter != null && entityliving != this.shooter && entityliving instanceof EntityHuman && this.shooter instanceof EntityPlayer) {
+                        ((EntityPlayer) this.shooter).playerConnection.sendPacket(new PacketPlayOutGameStateChange(6, 0.0F));
+                    }
+                }
+
+                this.a(SoundEffects.t, 1.0F, 1.2F / (this.random.nextFloat() * 0.2F + 0.9F));
+                if (!(entity instanceof EntityEnderman)) {
+                    this.die();
+                }
+            } else {
+                this.motX *= -0.10000000149011612D;
+                this.motY *= -0.10000000149011612D;
+                this.motZ *= -0.10000000149011612D;
+                this.yaw += 180.0F;
+                this.lastYaw += 180.0F;
+                this.ax = 0;
+                if (!this.world.isClientSide && this.motX * this.motX + this.motY * this.motY + this.motZ * this.motZ < 0.0010000000474974513D) {
+                    if (this.fromPlayer == EntityArrow.PickupStatus.ALLOWED) {
+                        this.a(this.j(), 0.1F);
+                    }
+
+                    this.die();
+                }
+            }
+        } else {
+            BlockPosition blockposition = movingobjectposition.a();
+
+            this.h = blockposition.getX();
+            this.as = blockposition.getY();
+            this.at = blockposition.getZ();
+            IBlockData iblockdata = this.world.getType(blockposition);
+
+            this.au = iblockdata.getBlock();
+            this.av = this.au.toLegacyData(iblockdata);
+            this.motX = (double) ((float) (movingobjectposition.pos.x - this.locX));
+            this.motY = (double) ((float) (movingobjectposition.pos.y - this.locY));
+            this.motZ = (double) ((float) (movingobjectposition.pos.z - this.locZ));
+            float f2 = MathHelper.sqrt(this.motX * this.motX + this.motY * this.motY + this.motZ * this.motZ);
+
+            this.locX -= this.motX / (double) f2 * 0.05000000074505806D;
+            this.locY -= this.motY / (double) f2 * 0.05000000074505806D;
+            this.locZ -= this.motZ / (double) f2 * 0.05000000074505806D;
+            this.a(SoundEffects.t, 1.0F, 1.2F / (this.random.nextFloat() * 0.2F + 0.9F));
+            this.inGround = true;
+            this.shake = 7;
+            this.setCritical(false);
+            if (iblockdata.getMaterial() != Material.AIR) {
+                this.au.a(this.world, blockposition, iblockdata, (Entity) this);
+            }
+        }
+
+    }
+
+    protected void a(EntityLiving entityliving) {}
+
+    protected Entity a(Vec3D vec3d, Vec3D vec3d1) {
+        Entity entity = null;
+        List list = this.world.a((Entity) this, this.getBoundingBox().a(this.motX, this.motY, this.motZ).g(1.0D), EntityArrow.f);
+        double d0 = 0.0D;
+
+        for (int i = 0; i < list.size(); ++i) {
+            Entity entity1 = (Entity) list.get(i);
+
+            if (entity1 != this.shooter || this.ax >= 5) {
+                AxisAlignedBB axisalignedbb = entity1.getBoundingBox().g(0.30000001192092896D);
+                MovingObjectPosition movingobjectposition = axisalignedbb.a(vec3d, vec3d1);
+
+                if (movingobjectposition != null) {
+                    double d1 = vec3d.distanceSquared(movingobjectposition.pos);
+
+                    if (d1 < d0 || d0 == 0.0D) {
+                        entity = entity1;
+                        d0 = d1;
+                    }
+                }
+            }
+        }
+
+        return entity;
+    }
+
     public void b(NBTTagCompound nbttagcompound) {
-        nbttagcompound.setShort("xTile", (short) this.d);
-        nbttagcompound.setShort("yTile", (short) this.e);
-        nbttagcompound.setShort("zTile", (short) this.f);
-        nbttagcompound.setShort("life", (short) this.ar);
-        MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.c(this.g);
+        nbttagcompound.setInt("xTile", this.h);
+        nbttagcompound.setInt("yTile", this.as);
+        nbttagcompound.setInt("zTile", this.at);
+        nbttagcompound.setShort("life", (short) this.aw);
+        MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.b(this.au);
 
         nbttagcompound.setString("inTile", minecraftkey == null ? "" : minecraftkey.toString());
-        nbttagcompound.setByte("inData", (byte) this.h);
+        nbttagcompound.setByte("inData", (byte) this.av);
         nbttagcompound.setByte("shake", (byte) this.shake);
         nbttagcompound.setByte("inGround", (byte) (this.inGround ? 1 : 0));
-        nbttagcompound.setByte("pickup", (byte) this.fromPlayer);
+        nbttagcompound.setByte("pickup", (byte) this.fromPlayer.ordinal());
         nbttagcompound.setDouble("damage", this.damage);
     }
 
     public void a(NBTTagCompound nbttagcompound) {
-        this.d = nbttagcompound.getShort("xTile");
-        this.e = nbttagcompound.getShort("yTile");
-        this.f = nbttagcompound.getShort("zTile");
-        this.ar = nbttagcompound.getShort("life");
+        this.h = nbttagcompound.getInt("xTile");
+        this.as = nbttagcompound.getInt("yTile");
+        this.at = nbttagcompound.getInt("zTile");
+        this.aw = nbttagcompound.getShort("life");
         if (nbttagcompound.hasKeyOfType("inTile", 8)) {
-            this.g = Block.getByName(nbttagcompound.getString("inTile"));
+            this.au = Block.getByName(nbttagcompound.getString("inTile"));
         } else {
-            this.g = Block.getById(nbttagcompound.getByte("inTile") & 255);
+            this.au = Block.getById(nbttagcompound.getByte("inTile") & 255);
         }
 
-        this.h = nbttagcompound.getByte("inData") & 255;
+        this.av = nbttagcompound.getByte("inData") & 255;
         this.shake = nbttagcompound.getByte("shake") & 255;
         this.inGround = nbttagcompound.getByte("inGround") == 1;
         if (nbttagcompound.hasKeyOfType("damage", 99)) {
@@ -374,23 +386,23 @@
         }
 
         if (nbttagcompound.hasKeyOfType("pickup", 99)) {
-            this.fromPlayer = nbttagcompound.getByte("pickup");
+            this.fromPlayer = EntityArrow.PickupStatus.a(nbttagcompound.getByte("pickup"));
         } else if (nbttagcompound.hasKeyOfType("player", 99)) {
-            this.fromPlayer = nbttagcompound.getBoolean("player") ? 1 : 0;
+            this.fromPlayer = nbttagcompound.getBoolean("player") ? EntityArrow.PickupStatus.ALLOWED : EntityArrow.PickupStatus.DISALLOWED;
         }
 
     }
 
     public void d(EntityHuman entityhuman) {
         if (!this.world.isClientSide && this.inGround && this.shake <= 0) {
-            boolean flag = this.fromPlayer == 1 || this.fromPlayer == 2 && entityhuman.abilities.canInstantlyBuild;
+            boolean flag = this.fromPlayer == EntityArrow.PickupStatus.ALLOWED || this.fromPlayer == EntityArrow.PickupStatus.CREATIVE_ONLY && entityhuman.abilities.canInstantlyBuild;
 
-            if (this.fromPlayer == 1 && !entityhuman.inventory.pickup(new ItemStack(Items.ARROW, 1))) {
+            if (this.fromPlayer == EntityArrow.PickupStatus.ALLOWED && !entityhuman.inventory.pickup(this.j())) {
                 flag = false;
             }
 
             if (flag) {
-                this.makeSound("random.pop", 0.2F, ((this.random.nextFloat() - this.random.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+                this.a(SoundEffects.cU, 0.2F, ((this.random.nextFloat() - this.random.nextFloat()) * 0.7F + 1.0F) * 2.0F);
                 entityhuman.receive(this, 1);
                 this.die();
             }
@@ -398,15 +410,17 @@
         }
     }
 
-    protected boolean s_() {
+    protected abstract ItemStack j();
+
+    protected boolean playStepSound() {
         return false;
     }
 
-    public void b(double d0) {
+    public void c(double d0) {
         this.damage = d0;
     }
 
-    public double j() {
+    public double k() {
         return this.damage;
     }
 
@@ -414,7 +428,7 @@
         this.knockbackStrength = i;
     }
 
-    public boolean aD() {
+    public boolean aT() {
         return false;
     }
 
@@ -423,19 +437,34 @@
     }
 
     public void setCritical(boolean flag) {
-        byte b0 = this.datawatcher.getByte(16);
+        byte b0 = ((Byte) this.datawatcher.get(EntityArrow.g)).byteValue();
 
         if (flag) {
-            this.datawatcher.watch(16, Byte.valueOf((byte) (b0 | 1)));
+            this.datawatcher.set(EntityArrow.g, Byte.valueOf((byte) (b0 | 1)));
         } else {
-            this.datawatcher.watch(16, Byte.valueOf((byte) (b0 & -2)));
+            this.datawatcher.set(EntityArrow.g, Byte.valueOf((byte) (b0 & -2)));
         }
 
     }
 
     public boolean isCritical() {
-        byte b0 = this.datawatcher.getByte(16);
+        byte b0 = ((Byte) this.datawatcher.get(EntityArrow.g)).byteValue();
 
         return (b0 & 1) != 0;
     }
+
+    public static enum PickupStatus {
+
+        DISALLOWED, ALLOWED, CREATIVE_ONLY;
+
+        private PickupStatus() {}
+
+        public static EntityArrow.PickupStatus a(int i) {
+            if (i < 0 || i > values().length) {
+                i = 0;
+            }
+
+            return values()[i];
+        }
+    }
 }
