--- a/net/minecraft/server/PlayerInventory.java
+++ b/net/minecraft/server/PlayerInventory.java
@@ -1,41 +1,43 @@
 package net.minecraft.server;
 
+import java.util.Arrays;
 import java.util.concurrent.Callable;
 
 public class PlayerInventory implements IInventory {
 
-    public ItemStack[] items = new ItemStack[36];
-    public ItemStack[] armor = new ItemStack[4];
+    public final ItemStack[] items = new ItemStack[36];
+    public final ItemStack[] armor = new ItemStack[4];
+    public final ItemStack[] extraSlots = new ItemStack[1];
+    private final ItemStack[][] g;
     public int itemInHandIndex;
     public EntityHuman player;
-    private ItemStack f;
-    public boolean e;
+    private ItemStack carried;
+    public boolean f;
 
     public PlayerInventory(EntityHuman entityhuman) {
+        this.g = new ItemStack[][] { this.items, this.armor, this.extraSlots};
         this.player = entityhuman;
     }
 
     public ItemStack getItemInHand() {
-        return this.itemInHandIndex < 9 && this.itemInHandIndex >= 0 ? this.items[this.itemInHandIndex] : null;
+        return e(this.itemInHandIndex) ? this.items[this.itemInHandIndex] : null;
     }
 
     public static int getHotbarSize() {
         return 9;
     }
 
-    private int c(Item item) {
-        for (int i = 0; i < this.items.length; ++i) {
-            if (this.items[i] != null && this.items[i].getItem() == item) {
-                return i;
-            }
-        }
+    private boolean a(ItemStack itemstack, ItemStack itemstack1) {
+        return itemstack != null && this.b(itemstack, itemstack1) && itemstack.isStackable() && itemstack.count < itemstack.getMaxStackSize() && itemstack.count < this.getMaxStackSize();
+    }
 
-        return -1;
+    private boolean b(ItemStack itemstack, ItemStack itemstack1) {
+        return itemstack.getItem() == itemstack1.getItem() && (!itemstack.usesData() || itemstack.getData() == itemstack1.getData()) && ItemStack.equals(itemstack, itemstack1);
     }
 
-    private int firstPartial(ItemStack itemstack) {
+    public int getFirstEmptySlotIndex() {
         for (int i = 0; i < this.items.length; ++i) {
-            if (this.items[i] != null && this.items[i].getItem() == itemstack.getItem() && this.items[i].isStackable() && this.items[i].count < this.items[i].getMaxStackSize() && this.items[i].count < this.getMaxStackSize() && (!this.items[i].usesData() || this.items[i].getData() == itemstack.getData()) && ItemStack.equals(this.items[i], itemstack)) {
+            if (this.items[i] == null) {
                 return i;
             }
         }
@@ -43,50 +45,55 @@
         return -1;
     }
 
-    public int getFirstEmptySlotIndex() {
-        for (int i = 0; i < this.items.length; ++i) {
-            if (this.items[i] == null) {
-                return i;
+    public void d(int i) {
+        this.itemInHandIndex = this.k();
+        ItemStack itemstack = this.items[this.itemInHandIndex];
+
+        this.items[this.itemInHandIndex] = this.items[i];
+        this.items[i] = itemstack;
+    }
+
+    public static boolean e(int i) {
+        return i >= 0 && i < 9;
+    }
+
+    public int k() {
+        int i;
+        int j;
+
+        for (i = 0; i < 9; ++i) {
+            j = (this.itemInHandIndex + i) % 9;
+            if (this.items[j] == null) {
+                return j;
             }
         }
 
-        return -1;
+        for (i = 0; i < 9; ++i) {
+            j = (this.itemInHandIndex + i) % 9;
+            if (!this.items[j].hasEnchantments()) {
+                return j;
+            }
+        }
+
+        return this.itemInHandIndex;
     }
 
     public int a(Item item, int i, int j, NBTTagCompound nbttagcompound) {
         int k = 0;
 
         int l;
-        ItemStack itemstack;
-        int i1;
 
-        for (l = 0; l < this.items.length; ++l) {
-            itemstack = this.items[l];
-            if (itemstack != null && (item == null || itemstack.getItem() == item) && (i <= -1 || itemstack.getData() == i) && (nbttagcompound == null || GameProfileSerializer.a(nbttagcompound, itemstack.getTag(), true))) {
-                i1 = j <= 0 ? itemstack.count : Math.min(j - k, itemstack.count);
-                k += i1;
-                if (j != 0) {
-                    this.items[l].count -= i1;
-                    if (this.items[l].count == 0) {
-                        this.items[l] = null;
-                    }
+        for (l = 0; l < this.getSize(); ++l) {
+            ItemStack itemstack = this.getItem(l);
 
-                    if (j > 0 && k >= j) {
-                        return k;
-                    }
-                }
-            }
-        }
+            if (itemstack != null && (item == null || itemstack.getItem() == item) && (i <= -1 || itemstack.getData() == i) && (nbttagcompound == null || GameProfileSerializer.a(nbttagcompound, itemstack.getTag(), true))) {
+                int i1 = j <= 0 ? itemstack.count : Math.min(j - k, itemstack.count);
 
-        for (l = 0; l < this.armor.length; ++l) {
-            itemstack = this.armor[l];
-            if (itemstack != null && (item == null || itemstack.getItem() == item) && (i <= -1 || itemstack.getData() == i) && (nbttagcompound == null || GameProfileSerializer.a(nbttagcompound, itemstack.getTag(), false))) {
-                i1 = j <= 0 ? itemstack.count : Math.min(j - k, itemstack.count);
                 k += i1;
                 if (j != 0) {
-                    this.armor[l].count -= i1;
-                    if (this.armor[l].count == 0) {
-                        this.armor[l] = null;
+                    itemstack.count -= i1;
+                    if (itemstack.count == 0) {
+                        this.setItem(l, (ItemStack) null);
                     }
 
                     if (j > 0 && k >= j) {
@@ -96,25 +103,25 @@
             }
         }
 
-        if (this.f != null) {
-            if (item != null && this.f.getItem() != item) {
+        if (this.carried != null) {
+            if (item != null && this.carried.getItem() != item) {
                 return k;
             }
 
-            if (i > -1 && this.f.getData() != i) {
+            if (i > -1 && this.carried.getData() != i) {
                 return k;
             }
 
-            if (nbttagcompound != null && !GameProfileSerializer.a(nbttagcompound, this.f.getTag(), false)) {
+            if (nbttagcompound != null && !GameProfileSerializer.a(nbttagcompound, this.carried.getTag(), true)) {
                 return k;
             }
 
-            l = j <= 0 ? this.f.count : Math.min(j - k, this.f.count);
+            l = j <= 0 ? this.carried.count : Math.min(j - k, this.carried.count);
             k += l;
             if (j != 0) {
-                this.f.count -= l;
-                if (this.f.count == 0) {
-                    this.f = null;
+                this.carried.count -= l;
+                if (this.carried.count == 0) {
+                    this.carried = null;
                 }
 
                 if (j > 0 && k >= j) {
@@ -126,73 +133,77 @@
         return k;
     }
 
-    private int e(ItemStack itemstack) {
+    private int g(ItemStack itemstack) {
         Item item = itemstack.getItem();
         int i = itemstack.count;
         int j = this.firstPartial(itemstack);
 
-        if (j < 0) {
+        if (j == -1) {
             j = this.getFirstEmptySlotIndex();
         }
 
-        if (j < 0) {
+        if (j == -1) {
             return i;
         } else {
-            if (this.items[j] == null) {
-                this.items[j] = new ItemStack(item, 0, itemstack.getData());
+            ItemStack itemstack1 = this.getItem(j);
+
+            if (itemstack1 == null) {
+                itemstack1 = new ItemStack(item, 0, itemstack.getData());
                 if (itemstack.hasTag()) {
-                    this.items[j].setTag((NBTTagCompound) itemstack.getTag().clone());
+                    itemstack1.setTag((NBTTagCompound) itemstack.getTag().clone());
                 }
+
+                this.setItem(j, itemstack1);
             }
 
             int k = i;
 
-            if (i > this.items[j].getMaxStackSize() - this.items[j].count) {
-                k = this.items[j].getMaxStackSize() - this.items[j].count;
+            if (i > itemstack1.getMaxStackSize() - itemstack1.count) {
+                k = itemstack1.getMaxStackSize() - itemstack1.count;
             }
 
-            if (k > this.getMaxStackSize() - this.items[j].count) {
-                k = this.getMaxStackSize() - this.items[j].count;
+            if (k > this.getMaxStackSize() - itemstack1.count) {
+                k = this.getMaxStackSize() - itemstack1.count;
             }
 
             if (k == 0) {
                 return i;
             } else {
                 i -= k;
-                this.items[j].count += k;
-                this.items[j].c = 5;
+                itemstack1.count += k;
+                itemstack1.c = 5;
                 return i;
             }
         }
     }
 
-    public void k() {
-        for (int i = 0; i < this.items.length; ++i) {
-            if (this.items[i] != null) {
-                this.items[i].a(this.player.world, this.player, i, this.itemInHandIndex == i);
+    private int firstPartial(ItemStack itemstack) {
+        if (this.a(this.getItem(this.itemInHandIndex), itemstack)) {
+            return this.itemInHandIndex;
+        } else if (this.a(this.getItem(40), itemstack)) {
+            return 40;
+        } else {
+            for (int i = 0; i < this.items.length; ++i) {
+                if (this.a(this.items[i], itemstack)) {
+                    return i;
+                }
             }
-        }
 
+            return -1;
+        }
     }
 
-    public boolean a(Item item) {
-        int i = this.c(item);
+    public void m() {
+        for (int i = 0; i < this.g.length; ++i) {
+            ItemStack[] aitemstack = this.g[i];
 
-        if (i < 0) {
-            return false;
-        } else {
-            if (--this.items[i].count <= 0) {
-                this.items[i] = null;
+            for (int j = 0; j < aitemstack.length; ++j) {
+                if (aitemstack[j] != null) {
+                    aitemstack[j].a(this.player.world, this.player, j, this.itemInHandIndex == j);
+                }
             }
-
-            return true;
         }
-    }
-
-    public boolean b(Item item) {
-        int i = this.c(item);
 
-        return i >= 0;
     }
 
     public boolean pickup(final ItemStack itemstack) {
@@ -203,7 +214,7 @@
                 if (itemstack.g()) {
                     i = this.getFirstEmptySlotIndex();
                     if (i >= 0) {
-                        this.items[i] = ItemStack.b(itemstack);
+                        this.items[i] = ItemStack.c(itemstack);
                         this.items[i].c = 5;
                         itemstack.count = 0;
                         return true;
@@ -216,7 +227,7 @@
                 } else {
                     do {
                         i = itemstack.count;
-                        itemstack.count = this.e(itemstack);
+                        itemstack.count = this.g(itemstack);
                     } while (itemstack.count > 0 && itemstack.count < i);
 
                     if (itemstack.count == i && this.player.abilities.canInstantlyBuild) {
@@ -249,67 +260,103 @@
     }
 
     public ItemStack splitStack(int i, int j) {
-        ItemStack[] aitemstack = this.items;
+        ItemStack[] aitemstack = null;
+        ItemStack[][] aitemstack1 = this.g;
+        int k = aitemstack1.length;
 
-        if (i >= this.items.length) {
-            aitemstack = this.armor;
-            i -= this.items.length;
+        for (int l = 0; l < k; ++l) {
+            ItemStack[] aitemstack2 = aitemstack1[l];
+
+            if (i < aitemstack2.length) {
+                aitemstack = aitemstack2;
+                break;
+            }
+
+            i -= aitemstack2.length;
         }
 
-        if (aitemstack[i] != null) {
-            ItemStack itemstack;
+        return aitemstack != null && aitemstack[i] != null ? ContainerUtil.a(aitemstack, i, j) : null;
+    }
 
-            if (aitemstack[i].count <= j) {
-                itemstack = aitemstack[i];
-                aitemstack[i] = null;
-                return itemstack;
-            } else {
-                itemstack = aitemstack[i].cloneAndSubtract(j);
-                if (aitemstack[i].count == 0) {
-                    aitemstack[i] = null;
+    public void d(ItemStack itemstack) {
+        ItemStack[][] aitemstack = this.g;
+        int i = aitemstack.length;
+        int j = 0;
+
+        while (j < i) {
+            ItemStack[] aitemstack1 = aitemstack[j];
+            int k = 0;
+
+            while (true) {
+                if (k < aitemstack1.length) {
+                    if (aitemstack1[k] != itemstack) {
+                        ++k;
+                        continue;
+                    }
+
+                    aitemstack1[k] = null;
                 }
 
-                return itemstack;
+                ++j;
+                break;
             }
-        } else {
-            return null;
         }
+
     }
 
     public ItemStack splitWithoutUpdate(int i) {
-        ItemStack[] aitemstack = this.items;
+        ItemStack[] aitemstack = null;
+        ItemStack[][] aitemstack1 = this.g;
+        int j = aitemstack1.length;
+
+        for (int k = 0; k < j; ++k) {
+            ItemStack[] aitemstack2 = aitemstack1[k];
+
+            if (i < aitemstack2.length) {
+                aitemstack = aitemstack2;
+                break;
+            }
 
-        if (i >= this.items.length) {
-            aitemstack = this.armor;
-            i -= this.items.length;
+            i -= aitemstack2.length;
         }
 
-        if (aitemstack[i] != null) {
-            ItemStack itemstack = aitemstack[i];
+        if (aitemstack != null && aitemstack[i] != null) {
+            Object object = aitemstack[i];
 
             aitemstack[i] = null;
-            return itemstack;
+            return (ItemStack) object;
         } else {
             return null;
         }
     }
 
     public void setItem(int i, ItemStack itemstack) {
-        ItemStack[] aitemstack = this.items;
+        ItemStack[] aitemstack = null;
+        ItemStack[][] aitemstack1 = this.g;
+        int j = aitemstack1.length;
 
-        if (i >= aitemstack.length) {
-            i -= aitemstack.length;
-            aitemstack = this.armor;
+        for (int k = 0; k < j; ++k) {
+            ItemStack[] aitemstack2 = aitemstack1[k];
+
+            if (i < aitemstack2.length) {
+                aitemstack = aitemstack2;
+                break;
+            }
+
+            i -= aitemstack2.length;
+        }
+
+        if (aitemstack != null) {
+            aitemstack[i] = itemstack;
         }
 
-        aitemstack[i] = itemstack;
     }
 
-    public float a(Block block) {
+    public float a(IBlockData iblockdata) {
         float f = 1.0F;
 
         if (this.items[this.itemInHandIndex] != null) {
-            f *= this.items[this.itemInHandIndex].a(block);
+            f *= this.items[this.itemInHandIndex].a(iblockdata);
         }
 
         return f;
@@ -337,12 +384,22 @@
             }
         }
 
+        for (i = 0; i < this.extraSlots.length; ++i) {
+            if (this.extraSlots[i] != null) {
+                nbttagcompound = new NBTTagCompound();
+                nbttagcompound.setByte("Slot", (byte) (i + 150));
+                this.extraSlots[i].save(nbttagcompound);
+                nbttaglist.add(nbttagcompound);
+            }
+        }
+
         return nbttaglist;
     }
 
     public void b(NBTTagList nbttaglist) {
-        this.items = new ItemStack[36];
-        this.armor = new ItemStack[4];
+        Arrays.fill(this.items, (Object) null);
+        Arrays.fill(this.armor, (Object) null);
+        Arrays.fill(this.extraSlots, (Object) null);
 
         for (int i = 0; i < nbttaglist.size(); ++i) {
             NBTTagCompound nbttagcompound = nbttaglist.get(i);
@@ -352,10 +409,10 @@
             if (itemstack != null) {
                 if (j >= 0 && j < this.items.length) {
                     this.items[j] = itemstack;
-                }
-
-                if (j >= 100 && j < this.armor.length + 100) {
+                } else if (j >= 100 && j < this.armor.length + 100) {
                     this.armor[j - 100] = itemstack;
+                } else if (j >= 150 && j < this.extraSlots.length + 150) {
+                    this.extraSlots[j - 150] = itemstack;
                 }
             }
         }
@@ -363,18 +420,26 @@
     }
 
     public int getSize() {
-        return this.items.length + 4;
+        return this.items.length + this.armor.length + this.extraSlots.length;
     }
 
     public ItemStack getItem(int i) {
-        ItemStack[] aitemstack = this.items;
+        ItemStack[] aitemstack = null;
+        ItemStack[][] aitemstack1 = this.g;
+        int j = aitemstack1.length;
+
+        for (int k = 0; k < j; ++k) {
+            ItemStack[] aitemstack2 = aitemstack1[k];
+
+            if (i < aitemstack2.length) {
+                aitemstack = aitemstack2;
+                break;
+            }
 
-        if (i >= aitemstack.length) {
-            i -= aitemstack.length;
-            aitemstack = this.armor;
+            i -= aitemstack2.length;
         }
 
-        return aitemstack[i];
+        return aitemstack == null ? null : aitemstack[i];
     }
 
     public String getName() {
@@ -393,34 +458,16 @@
         return 64;
     }
 
-    public boolean b(Block block) {
-        if (block.getMaterial().isAlwaysDestroyable()) {
+    public boolean b(IBlockData iblockdata) {
+        if (iblockdata.getMaterial().isAlwaysDestroyable()) {
             return true;
         } else {
             ItemStack itemstack = this.getItem(this.itemInHandIndex);
 
-            return itemstack != null ? itemstack.b(block) : false;
+            return itemstack != null ? itemstack.b(iblockdata) : false;
         }
     }
 
-    public ItemStack e(int i) {
-        return this.armor[i];
-    }
-
-    public int m() {
-        int i = 0;
-
-        for (int j = 0; j < this.armor.length; ++j) {
-            if (this.armor[j] != null && this.armor[j].getItem() instanceof ItemArmor) {
-                int k = ((ItemArmor) this.armor[j].getItem()).c;
-
-                i += k;
-            }
-        }
-
-        return i;
-    }
-
     public void a(float f) {
         f /= 4.0F;
         if (f < 1.0F) {
@@ -439,52 +486,49 @@
     }
 
     public void n() {
-        int i;
+        ItemStack[][] aitemstack = this.g;
+        int i = aitemstack.length;
 
-        for (i = 0; i < this.items.length; ++i) {
-            if (this.items[i] != null) {
-                this.player.a(this.items[i], true, false);
-                this.items[i] = null;
-            }
-        }
+        for (int j = 0; j < i; ++j) {
+            ItemStack[] aitemstack1 = aitemstack[j];
 
-        for (i = 0; i < this.armor.length; ++i) {
-            if (this.armor[i] != null) {
-                this.player.a(this.armor[i], true, false);
-                this.armor[i] = null;
+            for (int k = 0; k < aitemstack1.length; ++k) {
+                if (aitemstack1[k] != null) {
+                    this.player.a(aitemstack1[k], true, false);
+                    aitemstack1[k] = null;
+                }
             }
         }
 
     }
 
     public void update() {
-        this.e = true;
+        this.f = true;
     }
 
     public void setCarried(ItemStack itemstack) {
-        this.f = itemstack;
+        this.carried = itemstack;
     }
 
     public ItemStack getCarried() {
-        return this.f;
+        return this.carried;
     }
 
     public boolean a(EntityHuman entityhuman) {
         return this.player.dead ? false : entityhuman.h(this.player) <= 64.0D;
     }
 
-    public boolean c(ItemStack itemstack) {
-        int i;
-
-        for (i = 0; i < this.armor.length; ++i) {
-            if (this.armor[i] != null && this.armor[i].doMaterialsMatch(itemstack)) {
-                return true;
-            }
-        }
-
-        for (i = 0; i < this.items.length; ++i) {
-            if (this.items[i] != null && this.items[i].doMaterialsMatch(itemstack)) {
-                return true;
+    public boolean f(ItemStack itemstack) {
+        ItemStack[][] aitemstack = this.g;
+        int i = aitemstack.length;
+
+        for (int j = 0; j < i; ++j) {
+            ItemStack[] aitemstack1 = aitemstack[j];
+
+            for (int k = 0; k < aitemstack1.length; ++k) {
+                if (aitemstack1[k] != null && aitemstack1[k].doMaterialsMatch(itemstack)) {
+                    return true;
+                }
             }
         }
 
@@ -499,15 +543,9 @@
         return true;
     }
 
-    public void b(PlayerInventory playerinventory) {
-        int i;
-
-        for (i = 0; i < this.items.length; ++i) {
-            this.items[i] = ItemStack.b(playerinventory.items[i]);
-        }
-
-        for (i = 0; i < this.armor.length; ++i) {
-            this.armor[i] = ItemStack.b(playerinventory.armor[i]);
+    public void a(PlayerInventory playerinventory) {
+        for (int i = 0; i < this.getSize(); ++i) {
+            this.setItem(i, playerinventory.getItem(i));
         }
 
         this.itemInHandIndex = playerinventory.itemInHandIndex;
@@ -517,21 +555,22 @@
         return 0;
     }
 
-    public void b(int i, int j) {}
+    public void setProperty(int i, int j) {}
 
     public int g() {
         return 0;
     }
 
     public void l() {
-        int i;
+        ItemStack[][] aitemstack = this.g;
+        int i = aitemstack.length;
 
-        for (i = 0; i < this.items.length; ++i) {
-            this.items[i] = null;
-        }
+        for (int j = 0; j < i; ++j) {
+            ItemStack[] aitemstack1 = aitemstack[j];
 
-        for (i = 0; i < this.armor.length; ++i) {
-            this.armor[i] = null;
+            for (int k = 0; k < aitemstack1.length; ++k) {
+                aitemstack1[k] = null;
+            }
         }
 
     }
