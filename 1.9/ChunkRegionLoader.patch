--- a/net/minecraft/server/ChunkRegionLoader.java
+++ b/net/minecraft/server/ChunkRegionLoader.java
@@ -20,10 +20,12 @@
     private Map<ChunkCoordIntPair, NBTTagCompound> b = new ConcurrentHashMap();
     private Set<ChunkCoordIntPair> c = Collections.newSetFromMap(new ConcurrentHashMap());
     private final File d;
-    private boolean e = false;
+    private final DataConverterManager e;
+    private boolean f = false;
 
-    public ChunkRegionLoader(File file) {
+    public ChunkRegionLoader(File file, DataConverterManager dataconvertermanager) {
         this.d = file;
+        this.e = dataconvertermanager;
     }
 
     public Chunk a(World world, int i, int j) throws IOException {
@@ -37,7 +39,7 @@
                 return null;
             }
 
-            nbttagcompound = NBTCompressedStreamTools.a(datainputstream);
+            nbttagcompound = this.e.a((DataConverterType) DataConverterTypes.CHUNK, NBTCompressedStreamTools.a(datainputstream));
         }
 
         return this.a(world, i, j, nbttagcompound);
@@ -76,8 +78,9 @@
             NBTTagCompound nbttagcompound1 = new NBTTagCompound();
 
             nbttagcompound.set("Level", nbttagcompound1);
+            nbttagcompound.setInt("DataVersion", 169);
             this.a(chunk, world, nbttagcompound1);
-            this.a(chunk.j(), nbttagcompound);
+            this.a(chunk.k(), nbttagcompound);
         } catch (Exception exception) {
             ChunkRegionLoader.a.error("Failed to save chunk", exception);
         }
@@ -94,7 +97,7 @@
 
     public boolean c() {
         if (this.b.isEmpty()) {
-            if (this.e) {
+            if (this.f) {
                 ChunkRegionLoader.a.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", new Object[] { this.d.getName()});
             }
 
@@ -138,7 +141,7 @@
 
     public void b() {
         try {
-            this.e = true;
+            this.f = true;
 
             while (true) {
                 if (this.c()) {
@@ -146,23 +149,22 @@
                 }
             }
         } finally {
-            this.e = false;
+            this.f = false;
         }
 
     }
 
     private void a(Chunk chunk, World world, NBTTagCompound nbttagcompound) {
-        nbttagcompound.setByte("V", (byte) 1);
         nbttagcompound.setInt("xPos", chunk.locX);
         nbttagcompound.setInt("zPos", chunk.locZ);
         nbttagcompound.setLong("LastUpdate", world.getTime());
-        nbttagcompound.setIntArray("HeightMap", chunk.q());
+        nbttagcompound.setIntArray("HeightMap", chunk.r());
         nbttagcompound.setBoolean("TerrainPopulated", chunk.isDone());
-        nbttagcompound.setBoolean("LightPopulated", chunk.u());
-        nbttagcompound.setLong("InhabitedTime", chunk.w());
+        nbttagcompound.setBoolean("LightPopulated", chunk.v());
+        nbttagcompound.setLong("InhabitedTime", chunk.x());
         ChunkSection[] achunksection = chunk.getSections();
         NBTTagList nbttaglist = new NBTTagList();
-        boolean flag = !world.worldProvider.o();
+        boolean flag = !world.worldProvider.m();
         ChunkSection[] achunksection1 = achunksection;
         int i = achunksection.length;
 
@@ -171,42 +173,24 @@
         for (int j = 0; j < i; ++j) {
             ChunkSection chunksection = achunksection1[j];
 
-            if (chunksection != null) {
+            if (chunksection != Chunk.a) {
                 nbttagcompound1 = new NBTTagCompound();
                 nbttagcompound1.setByte("Y", (byte) (chunksection.getYPosition() >> 4 & 255));
-                byte[] abyte = new byte[chunksection.getIdArray().length];
+                byte[] abyte = new byte[4096];
                 NibbleArray nibblearray = new NibbleArray();
-                NibbleArray nibblearray1 = null;
-
-                for (int k = 0; k < chunksection.getIdArray().length; ++k) {
-                    char c0 = chunksection.getIdArray()[k];
-                    int l = k & 15;
-                    int i1 = k >> 8 & 15;
-                    int j1 = k >> 4 & 15;
-
-                    if (c0 >> 12 != 0) {
-                        if (nibblearray1 == null) {
-                            nibblearray1 = new NibbleArray();
-                        }
-
-                        nibblearray1.a(l, i1, j1, c0 >> 12);
-                    }
-
-                    abyte[k] = (byte) (c0 >> 4 & 255);
-                    nibblearray.a(l, i1, j1, c0 & 15);
-                }
+                NibbleArray nibblearray1 = chunksection.getBlocks().exportData(abyte, nibblearray);
 
                 nbttagcompound1.setByteArray("Blocks", abyte);
-                nbttagcompound1.setByteArray("Data", nibblearray.a());
+                nbttagcompound1.setByteArray("Data", nibblearray.asBytes());
                 if (nibblearray1 != null) {
-                    nbttagcompound1.setByteArray("Add", nibblearray1.a());
+                    nbttagcompound1.setByteArray("Add", nibblearray1.asBytes());
                 }
 
-                nbttagcompound1.setByteArray("BlockLight", chunksection.getEmittedLightArray().a());
+                nbttagcompound1.setByteArray("BlockLight", chunksection.getEmittedLightArray().asBytes());
                 if (flag) {
-                    nbttagcompound1.setByteArray("SkyLight", chunksection.getSkyLightArray().a());
+                    nbttagcompound1.setByteArray("SkyLight", chunksection.getSkyLightArray().asBytes());
                 } else {
-                    nbttagcompound1.setByteArray("SkyLight", new byte[chunksection.getEmittedLightArray().a().length]);
+                    nbttagcompound1.setByteArray("SkyLight", new byte[chunksection.getEmittedLightArray().asBytes().length]);
                 }
 
                 nbttaglist.add(nbttagcompound1);
@@ -243,7 +227,7 @@
             TileEntity tileentity = (TileEntity) iterator.next();
 
             nbttagcompound1 = new NBTTagCompound();
-            tileentity.b(nbttagcompound1);
+            tileentity.save(nbttagcompound1);
             nbttaglist2.add(nbttagcompound1);
         }
 
@@ -251,20 +235,20 @@
         List list = world.a(chunk, false);
 
         if (list != null) {
-            long k1 = world.getTime();
+            long k = world.getTime();
             NBTTagList nbttaglist3 = new NBTTagList();
             Iterator iterator1 = list.iterator();
 
             while (iterator1.hasNext()) {
                 NextTickListEntry nextticklistentry = (NextTickListEntry) iterator1.next();
                 NBTTagCompound nbttagcompound2 = new NBTTagCompound();
-                MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.c(nextticklistentry.a());
+                MinecraftKey minecraftkey = (MinecraftKey) Block.REGISTRY.b(nextticklistentry.a());
 
                 nbttagcompound2.setString("i", minecraftkey == null ? "" : minecraftkey.toString());
                 nbttagcompound2.setInt("x", nextticklistentry.a.getX());
                 nbttagcompound2.setInt("y", nextticklistentry.a.getY());
                 nbttagcompound2.setInt("z", nextticklistentry.a.getZ());
-                nbttagcompound2.setInt("t", (int) (nextticklistentry.b - k1));
+                nbttagcompound2.setInt("t", (int) (nextticklistentry.b - k));
                 nbttagcompound2.setInt("p", nextticklistentry.c);
                 nbttaglist3.add(nbttagcompound2);
             }
@@ -286,7 +270,7 @@
         NBTTagList nbttaglist = nbttagcompound.getList("Sections", 10);
         byte b0 = 16;
         ChunkSection[] achunksection = new ChunkSection[b0];
-        boolean flag = !world.worldProvider.o();
+        boolean flag = !world.worldProvider.m();
 
         for (int k = 0; k < nbttaglist.size(); ++k) {
             NBTTagCompound nbttagcompound1 = nbttaglist.get(k);
@@ -295,18 +279,8 @@
             byte[] abyte = nbttagcompound1.getByteArray("Blocks");
             NibbleArray nibblearray = new NibbleArray(nbttagcompound1.getByteArray("Data"));
             NibbleArray nibblearray1 = nbttagcompound1.hasKeyOfType("Add", 7) ? new NibbleArray(nbttagcompound1.getByteArray("Add")) : null;
-            char[] achar = new char[abyte.length];
-
-            for (int l = 0; l < achar.length; ++l) {
-                int i1 = l & 15;
-                int j1 = l >> 8 & 15;
-                int k1 = l >> 4 & 15;
-                int l1 = nibblearray1 != null ? nibblearray1.a(i1, j1, k1) : 0;
-
-                achar[l] = (char) (l1 << 12 | (abyte[l] & 255) << 4 | nibblearray.a(i1, j1, k1));
-            }
 
-            chunksection.a(achar);
+            chunksection.getBlocks().a(abyte, nibblearray, nibblearray1);
             chunksection.a(new NibbleArray(nbttagcompound1.getByteArray("BlockLight")));
             if (flag) {
                 chunksection.b(new NibbleArray(nbttagcompound1.getByteArray("SkyLight")));
@@ -324,35 +298,20 @@
         NBTTagList nbttaglist1 = nbttagcompound.getList("Entities", 10);
 
         if (nbttaglist1 != null) {
-            for (int i2 = 0; i2 < nbttaglist1.size(); ++i2) {
-                NBTTagCompound nbttagcompound2 = nbttaglist1.get(i2);
-                Entity entity = EntityTypes.a(nbttagcompound2, world);
+            for (int l = 0; l < nbttaglist1.size(); ++l) {
+                NBTTagCompound nbttagcompound2 = nbttaglist1.get(l);
 
+                a(nbttagcompound2, world, chunk);
                 chunk.g(true);
-                if (entity != null) {
-                    chunk.a(entity);
-                    Entity entity1 = entity;
-
-                    for (NBTTagCompound nbttagcompound3 = nbttagcompound2; nbttagcompound3.hasKeyOfType("Riding", 10); nbttagcompound3 = nbttagcompound3.getCompound("Riding")) {
-                        Entity entity2 = EntityTypes.a(nbttagcompound3.getCompound("Riding"), world);
-
-                        if (entity2 != null) {
-                            chunk.a(entity2);
-                            entity1.mount(entity2);
-                        }
-
-                        entity1 = entity2;
-                    }
-                }
             }
         }
 
         NBTTagList nbttaglist2 = nbttagcompound.getList("TileEntities", 10);
 
         if (nbttaglist2 != null) {
-            for (int j2 = 0; j2 < nbttaglist2.size(); ++j2) {
-                NBTTagCompound nbttagcompound4 = nbttaglist2.get(j2);
-                TileEntity tileentity = TileEntity.c(nbttagcompound4);
+            for (int i1 = 0; i1 < nbttaglist2.size(); ++i1) {
+                NBTTagCompound nbttagcompound3 = nbttaglist2.get(i1);
+                TileEntity tileentity = TileEntity.a(world.getMinecraftServer(), nbttagcompound3);
 
                 if (tileentity != null) {
                     chunk.a(tileentity);
@@ -364,21 +323,116 @@
             NBTTagList nbttaglist3 = nbttagcompound.getList("TileTicks", 10);
 
             if (nbttaglist3 != null) {
-                for (int k2 = 0; k2 < nbttaglist3.size(); ++k2) {
-                    NBTTagCompound nbttagcompound5 = nbttaglist3.get(k2);
+                for (int j1 = 0; j1 < nbttaglist3.size(); ++j1) {
+                    NBTTagCompound nbttagcompound4 = nbttaglist3.get(j1);
                     Block block;
 
-                    if (nbttagcompound5.hasKeyOfType("i", 8)) {
-                        block = Block.getByName(nbttagcompound5.getString("i"));
+                    if (nbttagcompound4.hasKeyOfType("i", 8)) {
+                        block = Block.getByName(nbttagcompound4.getString("i"));
                     } else {
-                        block = Block.getById(nbttagcompound5.getInt("i"));
+                        block = Block.getById(nbttagcompound4.getInt("i"));
                     }
 
-                    world.b(new BlockPosition(nbttagcompound5.getInt("x"), nbttagcompound5.getInt("y"), nbttagcompound5.getInt("z")), block, nbttagcompound5.getInt("t"), nbttagcompound5.getInt("p"));
+                    world.b(new BlockPosition(nbttagcompound4.getInt("x"), nbttagcompound4.getInt("y"), nbttagcompound4.getInt("z")), block, nbttagcompound4.getInt("t"), nbttagcompound4.getInt("p"));
                 }
             }
         }
 
         return chunk;
     }
+
+    public static Entity a(NBTTagCompound nbttagcompound, World world, Chunk chunk) {
+        Entity entity = a(nbttagcompound, world);
+
+        if (entity == null) {
+            return null;
+        } else {
+            chunk.a(entity);
+            if (nbttagcompound.hasKeyOfType("Passengers", 9)) {
+                NBTTagList nbttaglist = nbttagcompound.getList("Passengers", 10);
+
+                for (int i = 0; i < nbttaglist.size(); ++i) {
+                    Entity entity1 = a(nbttaglist.get(i), world, chunk);
+
+                    if (entity1 != null) {
+                        entity1.a(entity, true);
+                    }
+                }
+            }
+
+            return entity;
+        }
+    }
+
+    public static Entity a(NBTTagCompound nbttagcompound, World world, double d0, double d1, double d2, boolean flag) {
+        Entity entity = a(nbttagcompound, world);
+
+        if (entity == null) {
+            return null;
+        } else {
+            entity.setPositionRotation(d0, d1, d2, entity.yaw, entity.pitch);
+            if (flag && !world.addEntity(entity)) {
+                return null;
+            } else {
+                if (nbttagcompound.hasKeyOfType("Passengers", 9)) {
+                    NBTTagList nbttaglist = nbttagcompound.getList("Passengers", 10);
+
+                    for (int i = 0; i < nbttaglist.size(); ++i) {
+                        Entity entity1 = a(nbttaglist.get(i), world, d0, d1, d2, flag);
+
+                        if (entity1 != null) {
+                            entity1.a(entity, true);
+                        }
+                    }
+                }
+
+                return entity;
+            }
+        }
+    }
+
+    protected static Entity a(NBTTagCompound nbttagcompound, World world) {
+        try {
+            return EntityTypes.a(nbttagcompound, world);
+        } catch (RuntimeException runtimeexception) {
+            return null;
+        }
+    }
+
+    public static void a(Entity entity, World world) {
+        if (world.addEntity(entity) && entity.isVehicle()) {
+            Iterator iterator = entity.bu().iterator();
+
+            while (iterator.hasNext()) {
+                Entity entity1 = (Entity) iterator.next();
+
+                a(entity1, world);
+            }
+        }
+
+    }
+
+    public static Entity a(NBTTagCompound nbttagcompound, World world, boolean flag) {
+        Entity entity = a(nbttagcompound, world);
+
+        if (entity == null) {
+            return null;
+        } else if (flag && !world.addEntity(entity)) {
+            return null;
+        } else {
+            if (nbttagcompound.hasKeyOfType("Passengers", 9)) {
+                NBTTagList nbttaglist = nbttagcompound.getList("Passengers", 10);
+
+                for (int i = 0; i < nbttaglist.size(); ++i) {
+                    Entity entity1 = a(nbttaglist.get(i), world, flag);
+
+                    if (entity1 != null) {
+                        entity1.a(entity, true);
+                    }
+                }
+            }
+
+            return entity;
+        }
+    }
 }
