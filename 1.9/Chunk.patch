--- a/net/minecraft/server/Chunk.java
+++ b/net/minecraft/server/Chunk.java
@@ -16,38 +16,39 @@
 
 public class Chunk {
 
-    private static final Logger c = LogManager.getLogger();
+    private static final Logger d = LogManager.getLogger();
+    public static final ChunkSection a = null;
     private final ChunkSection[] sections;
-    private final byte[] e;
-    private final int[] f;
-    private final boolean[] g;
-    private boolean h;
+    private final byte[] f;
+    private final int[] g;
+    private final boolean[] h;
+    private boolean i;
     public final World world;
     public final int[] heightMap;
     public final int locX;
     public final int locZ;
-    private boolean k;
+    private boolean l;
     public final Map<BlockPosition, TileEntity> tileEntities;
     public final EntitySlice<Entity>[] entitySlices;
     private boolean done;
     private boolean lit;
-    private boolean p;
     private boolean q;
     private boolean r;
+    private boolean s;
     private long lastSaved;
-    private int t;
-    private long u;
-    private int v;
-    private ConcurrentLinkedQueue<BlockPosition> w;
+    private int u;
+    private long v;
+    private int w;
+    private ConcurrentLinkedQueue<BlockPosition> x;
 
     public Chunk(World world, int i, int j) {
         this.sections = new ChunkSection[16];
-        this.e = new byte[256];
-        this.f = new int[256];
-        this.g = new boolean[256];
+        this.f = new byte[256];
+        this.g = new int[256];
+        this.h = new boolean[256];
         this.tileEntities = Maps.newHashMap();
-        this.v = 4096;
-        this.w = Queues.newConcurrentLinkedQueue();
+        this.w = 4096;
+        this.x = Queues.newConcurrentLinkedQueue();
         this.entitySlices = (EntitySlice[]) (new EntitySlice[16]);
         this.world = world;
         this.locX = i;
@@ -58,29 +59,28 @@
             this.entitySlices[k] = new EntitySlice(Entity.class);
         }
 
-        Arrays.fill(this.f, -999);
-        Arrays.fill(this.e, (byte) -1);
+        Arrays.fill(this.g, -999);
+        Arrays.fill(this.f, (byte) -1);
     }
 
     public Chunk(World world, ChunkSnapshot chunksnapshot, int i, int j) {
         this(world, i, j);
         short short0 = 256;
-        boolean flag = !world.worldProvider.o();
+        boolean flag = !world.worldProvider.m();
 
         for (int k = 0; k < 16; ++k) {
             for (int l = 0; l < 16; ++l) {
                 for (int i1 = 0; i1 < short0; ++i1) {
-                    int j1 = k * short0 * 16 | l * short0 | i1;
-                    IBlockData iblockdata = chunksnapshot.a(j1);
+                    IBlockData iblockdata = chunksnapshot.a(k, i1, l);
 
-                    if (iblockdata.getBlock().getMaterial() != Material.AIR) {
-                        int k1 = i1 >> 4;
+                    if (iblockdata.getMaterial() != Material.AIR) {
+                        int j1 = i1 >> 4;
 
-                        if (this.sections[k1] == null) {
-                            this.sections[k1] = new ChunkSection(k1 << 4, flag);
+                        if (this.sections[j1] == Chunk.a) {
+                            this.sections[j1] = new ChunkSection(j1 << 4, flag);
                         }
 
-                        this.sections[k1].setType(k, i1 & 15, l, iblockdata);
+                        this.sections[j1].setType(k, i1 & 15, l, iblockdata);
                     }
                 }
             }
@@ -92,7 +92,7 @@
         return i == this.locX && j == this.locZ;
     }
 
-    public int f(BlockPosition blockposition) {
+    public int e(BlockPosition blockposition) {
         return this.b(blockposition.getX() & 15, blockposition.getZ() & 15);
     }
 
@@ -100,14 +100,20 @@
         return this.heightMap[j << 4 | i];
     }
 
-    public int g() {
+    private ChunkSection y() {
         for (int i = this.sections.length - 1; i >= 0; --i) {
-            if (this.sections[i] != null) {
-                return this.sections[i].getYPosition();
+            if (this.sections[i] != Chunk.a) {
+                return this.sections[i];
             }
         }
 
-        return 0;
+        return null;
+    }
+
+    public int g() {
+        ChunkSection chunksection = this.y();
+
+        return chunksection == null ? 0 : chunksection.getYPosition();
     }
 
     public ChunkSection[] getSections() {
@@ -117,34 +123,34 @@
     public void initLighting() {
         int i = this.g();
 
-        this.t = Integer.MAX_VALUE;
+        this.u = Integer.MAX_VALUE;
 
         for (int j = 0; j < 16; ++j) {
             int k = 0;
 
             while (k < 16) {
-                this.f[j + (k << 4)] = -999;
+                this.g[j + (k << 4)] = -999;
                 int l = i + 16;
 
                 while (true) {
                     if (l > 0) {
-                        if (this.e(j, l - 1, k) == 0) {
+                        if (this.d(j, l - 1, k) == 0) {
                             --l;
                             continue;
                         }
 
                         this.heightMap[k << 4 | j] = l;
-                        if (l < this.t) {
-                            this.t = l;
+                        if (l < this.u) {
+                            this.u = l;
                         }
                     }
 
-                    if (!this.world.worldProvider.o()) {
+                    if (!this.world.worldProvider.m()) {
                         l = 15;
                         int i1 = i + 16 - 1;
 
                         do {
-                            int j1 = this.e(j, i1, k);
+                            int j1 = this.d(j, i1, k);
 
                             if (j1 == 0 && l != 15) {
                                 j1 = 1;
@@ -154,9 +160,9 @@
                             if (l > 0) {
                                 ChunkSection chunksection = this.sections[i1 >> 4];
 
-                                if (chunksection != null) {
+                                if (chunksection != Chunk.a) {
                                     chunksection.a(j, i1 & 15, k, l);
-                                    this.world.n(new BlockPosition((this.locX << 4) + j, i1, (this.locZ << 4) + k));
+                                    this.world.m(new BlockPosition((this.locX << 4) + j, i1, (this.locZ << 4) + k));
                                 }
                             }
 
@@ -170,12 +176,12 @@
             }
         }
 
-        this.q = true;
+        this.r = true;
     }
 
     private void d(int i, int j) {
-        this.g[i + j * 16] = true;
-        this.k = true;
+        this.h[i + j * 16] = true;
+        this.l = true;
     }
 
     private void h(boolean flag) {
@@ -183,8 +189,8 @@
         if (this.world.areChunksLoaded(new BlockPosition(this.locX * 16 + 8, 0, this.locZ * 16 + 8), 16)) {
             for (int i = 0; i < 16; ++i) {
                 for (int j = 0; j < 16; ++j) {
-                    if (this.g[i + j * 16]) {
-                        this.g[i + j * 16] = false;
+                    if (this.h[i + j * 16]) {
+                        this.h[i + j * 16] = false;
                         int k = this.b(i, j);
                         int l = this.locX * 16 + i;
                         int i1 = this.locZ * 16 + j;
@@ -197,12 +203,12 @@
                             enumdirection = (EnumDirection) iterator.next();
                         }
 
-                        this.c(l, i1, j1);
+                        this.b(l, i1, j1);
                         iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
                         while (iterator.hasNext()) {
                             enumdirection = (EnumDirection) iterator.next();
-                            this.c(l + enumdirection.getAdjacentX(), i1 + enumdirection.getAdjacentZ(), k);
+                            this.b(l + enumdirection.getAdjacentX(), i1 + enumdirection.getAdjacentZ(), k);
                         }
 
                         if (flag) {
@@ -213,13 +219,13 @@
                 }
             }
 
-            this.k = false;
+            this.l = false;
         }
 
         this.world.methodProfiler.b();
     }
 
-    private void c(int i, int j, int k) {
+    private void b(int i, int j, int k) {
         int l = this.world.getHighestBlockYAt(new BlockPosition(i, 0, j)).getY();
 
         if (l > k) {
@@ -236,12 +242,12 @@
                 this.world.c(EnumSkyBlock.SKY, new BlockPosition(i, i1, j));
             }
 
-            this.q = true;
+            this.r = true;
         }
 
     }
 
-    private void d(int i, int j, int k) {
+    private void c(int i, int j, int k) {
         int l = this.heightMap[k << 4 | i] & 255;
         int i1 = l;
 
@@ -249,7 +255,7 @@
             i1 = j;
         }
 
-        while (i1 > 0 && this.e(i, i1 - 1, k) == 0) {
+        while (i1 > 0 && this.d(i, i1 - 1, k) == 0) {
             --i1;
         }
 
@@ -261,23 +267,23 @@
             int l1;
             int i2;
 
-            if (!this.world.worldProvider.o()) {
+            if (!this.world.worldProvider.m()) {
                 ChunkSection chunksection;
 
                 if (i1 < l) {
                     for (l1 = i1; l1 < l; ++l1) {
                         chunksection = this.sections[l1 >> 4];
-                        if (chunksection != null) {
+                        if (chunksection != Chunk.a) {
                             chunksection.a(i, l1 & 15, k, 15);
-                            this.world.n(new BlockPosition((this.locX << 4) + i, l1, (this.locZ << 4) + k));
+                            this.world.m(new BlockPosition((this.locX << 4) + i, l1, (this.locZ << 4) + k));
                         }
                     }
                 } else {
                     for (l1 = l; l1 < i1; ++l1) {
                         chunksection = this.sections[l1 >> 4];
-                        if (chunksection != null) {
+                        if (chunksection != Chunk.a) {
                             chunksection.a(i, l1 & 15, k, 0);
-                            this.world.n(new BlockPosition((this.locX << 4) + i, l1, (this.locZ << 4) + k));
+                            this.world.m(new BlockPosition((this.locX << 4) + i, l1, (this.locZ << 4) + k));
                         }
                     }
                 }
@@ -286,7 +292,7 @@
 
                 while (i1 > 0 && l1 > 0) {
                     --i1;
-                    i2 = this.e(i, i1, k);
+                    i2 = this.d(i, i1, k);
                     if (i2 == 0) {
                         i2 = 1;
                     }
@@ -298,7 +304,7 @@
 
                     ChunkSection chunksection1 = this.sections[i1 >> 4];
 
-                    if (chunksection1 != null) {
+                    if (chunksection1 != Chunk.a) {
                         chunksection1.a(i, i1 & 15, k, l1);
                     }
                 }
@@ -313,11 +319,11 @@
                 j2 = l;
             }
 
-            if (l1 < this.t) {
-                this.t = l1;
+            if (l1 < this.u) {
+                this.u = l1;
             }
 
-            if (!this.world.worldProvider.o()) {
+            if (!this.world.worldProvider.m()) {
                 Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
                 while (iterator.hasNext()) {
@@ -329,100 +335,42 @@
                 this.a(j1, k1, i2, j2);
             }
 
-            this.q = true;
+            this.r = true;
         }
     }
 
     public int b(BlockPosition blockposition) {
-        return this.getType(blockposition).p();
-    }
-
-    private int e(int i, int j, int k) {
-        return this.getType(i, j, k).p();
-    }
-
-    private Block getType(int i, int j, int k) {
-        Block block = Blocks.AIR;
-
-        if (j >= 0 && j >> 4 < this.sections.length) {
-            ChunkSection chunksection = this.sections[j >> 4];
-
-            if (chunksection != null) {
-                try {
-                    block = chunksection.b(i, j & 15, k);
-                } catch (Throwable throwable) {
-                    CrashReport crashreport = CrashReport.a(throwable, "Getting block");
-
-                    throw new ReportedException(crashreport);
-                }
-            }
-        }
-
-        return block;
+        return this.getBlockData(blockposition).c();
     }
 
-    public Block getTypeAbs(final int i, final int j, final int k) {
-        try {
-            return this.getType(i & 15, j, k & 15);
-        } catch (ReportedException reportedexception) {
-            CrashReportSystemDetails crashreportsystemdetails = reportedexception.a().a("Block being got");
-
-            crashreportsystemdetails.a("Location", new Callable() {
-                public String a() throws Exception {
-                    return CrashReportSystemDetails.a(new BlockPosition(Chunk.this.locX * 16 + i, j, Chunk.this.locZ * 16 + k));
-                }
-
-                public Object call() throws Exception {
-                    return this.a();
-                }
-            });
-            throw reportedexception;
-        }
+    private int d(int i, int j, int k) {
+        return this.a(i, j, k).c();
     }
 
-    public Block getType(final BlockPosition blockposition) {
-        try {
-            return this.getType(blockposition.getX() & 15, blockposition.getY(), blockposition.getZ() & 15);
-        } catch (ReportedException reportedexception) {
-            CrashReportSystemDetails crashreportsystemdetails = reportedexception.a().a("Block being got");
-
-            crashreportsystemdetails.a("Location", new Callable() {
-                public String a() throws Exception {
-                    return CrashReportSystemDetails.a(blockposition);
-                }
-
-                public Object call() throws Exception {
-                    return this.a();
-                }
-            });
-            throw reportedexception;
-        }
+    public IBlockData getBlockData(BlockPosition blockposition) {
+        return this.a(blockposition.getX(), blockposition.getY(), blockposition.getZ());
     }
 
-    public IBlockData getBlockData(final BlockPosition blockposition) {
-        if (this.world.G() == WorldType.DEBUG_ALL_BLOCK_STATES) {
+    public IBlockData a(final int i, final int j, final int k) {
+        if (this.world.L() == WorldType.DEBUG_ALL_BLOCK_STATES) {
             IBlockData iblockdata = null;
 
-            if (blockposition.getY() == 60) {
+            if (j == 60) {
                 iblockdata = Blocks.BARRIER.getBlockData();
             }
 
-            if (blockposition.getY() == 70) {
-                iblockdata = ChunkProviderDebug.b(blockposition.getX(), blockposition.getZ());
+            if (j == 70) {
+                iblockdata = ChunkProviderDebug.c(i, k);
             }
 
             return iblockdata == null ? Blocks.AIR.getBlockData() : iblockdata;
         } else {
             try {
-                if (blockposition.getY() >= 0 && blockposition.getY() >> 4 < this.sections.length) {
-                    ChunkSection chunksection = this.sections[blockposition.getY() >> 4];
-
-                    if (chunksection != null) {
-                        int i = blockposition.getX() & 15;
-                        int j = blockposition.getY() & 15;
-                        int k = blockposition.getZ() & 15;
+                if (j >= 0 && j >> 4 < this.sections.length) {
+                    ChunkSection chunksection = this.sections[j >> 4];
 
-                        return chunksection.getType(i, j, k);
+                    if (chunksection != Chunk.a) {
+                        return chunksection.getType(i & 15, j & 15, k & 15);
                     }
                 }
 
@@ -433,7 +381,7 @@
 
                 crashreportsystemdetails.a("Location", new Callable() {
                     public String a() throws Exception {
-                        return CrashReportSystemDetails.a(blockposition);
+                        return CrashReportSystemDetails.a(i, j, k);
                     }
 
                     public Object call() throws Exception {
@@ -445,28 +393,14 @@
         }
     }
 
-    private int g(int i, int j, int k) {
-        if (j >> 4 >= this.sections.length) {
-            return 0;
-        } else {
-            ChunkSection chunksection = this.sections[j >> 4];
-
-            return chunksection != null ? chunksection.c(i, j & 15, k) : 0;
-        }
-    }
-
-    public int c(BlockPosition blockposition) {
-        return this.g(blockposition.getX() & 15, blockposition.getY(), blockposition.getZ() & 15);
-    }
-
     public IBlockData a(BlockPosition blockposition, IBlockData iblockdata) {
         int i = blockposition.getX() & 15;
         int j = blockposition.getY();
         int k = blockposition.getZ() & 15;
         int l = k << 4 | i;
 
-        if (j >= this.f[l] - 1) {
-            this.f[l] = -999;
+        if (j >= this.g[l] - 1) {
+            this.g[l] = -999;
         }
 
         int i1 = this.heightMap[l];
@@ -480,12 +414,12 @@
             ChunkSection chunksection = this.sections[j >> 4];
             boolean flag = false;
 
-            if (chunksection == null) {
+            if (chunksection == Chunk.a) {
                 if (block == Blocks.AIR) {
                     return null;
                 }
 
-                chunksection = this.sections[j >> 4] = new ChunkSection(j >> 4 << 4, !this.world.worldProvider.o());
+                chunksection = this.sections[j >> 4] = new ChunkSection(j >> 4 << 4, !this.world.worldProvider.m());
                 flag = j >= i1;
             }
 
@@ -493,26 +427,26 @@
             if (block1 != block) {
                 if (!this.world.isClientSide) {
                     block1.remove(this.world, blockposition, iblockdata1);
-                } else if (block1 instanceof IContainer) {
-                    this.world.t(blockposition);
+                } else if (block1 instanceof ITileEntity) {
+                    this.world.s(blockposition);
                 }
             }
 
-            if (chunksection.b(i, j & 15, k) != block) {
+            if (chunksection.getType(i, j & 15, k).getBlock() != block) {
                 return null;
             } else {
                 if (flag) {
                     this.initLighting();
                 } else {
-                    int j1 = block.p();
-                    int k1 = block1.p();
+                    int j1 = iblockdata.c();
+                    int k1 = iblockdata1.c();
 
                     if (j1 > 0) {
                         if (j >= i1) {
-                            this.d(i, j + 1, k);
+                            this.c(i, j + 1, k);
                         }
                     } else if (j == i1 - 1) {
-                        this.d(i, j, k);
+                        this.c(i, j, k);
                     }
 
                     if (j1 != k1 && (j1 < k1 || this.getBrightness(EnumSkyBlock.SKY, blockposition) > 0 || this.getBrightness(EnumSkyBlock.BLOCK, blockposition) > 0)) {
@@ -522,10 +456,10 @@
 
                 TileEntity tileentity;
 
-                if (block1 instanceof IContainer) {
+                if (block1 instanceof ITileEntity) {
                     tileentity = this.a(blockposition, Chunk.EnumTileEntityState.CHECK);
                     if (tileentity != null) {
-                        tileentity.E();
+                        tileentity.invalidateBlockCache();
                     }
                 }
 
@@ -533,19 +467,19 @@
                     block.onPlace(this.world, blockposition, iblockdata);
                 }
 
-                if (block instanceof IContainer) {
+                if (block instanceof ITileEntity) {
                     tileentity = this.a(blockposition, Chunk.EnumTileEntityState.CHECK);
                     if (tileentity == null) {
-                        tileentity = ((IContainer) block).a(this.world, block.toLegacyData(iblockdata));
+                        tileentity = ((ITileEntity) block).a(this.world, block.toLegacyData(iblockdata));
                         this.world.setTileEntity(blockposition, tileentity);
                     }
 
                     if (tileentity != null) {
-                        tileentity.E();
+                        tileentity.invalidateBlockCache();
                     }
                 }
 
-                this.q = true;
+                this.r = true;
                 return iblockdata1;
             }
         }
@@ -557,7 +491,7 @@
         int k = blockposition.getZ() & 15;
         ChunkSection chunksection = this.sections[j >> 4];
 
-        return chunksection == null ? (this.d(blockposition) ? enumskyblock.c : 0) : (enumskyblock == EnumSkyBlock.SKY ? (this.world.worldProvider.o() ? 0 : chunksection.d(i, j & 15, k)) : (enumskyblock == EnumSkyBlock.BLOCK ? chunksection.e(i, j & 15, k) : enumskyblock.c));
+        return chunksection == Chunk.a ? (this.c(blockposition) ? enumskyblock.c : 0) : (enumskyblock == EnumSkyBlock.SKY ? (this.world.worldProvider.m() ? 0 : chunksection.b(i, j & 15, k)) : (enumskyblock == EnumSkyBlock.BLOCK ? chunksection.c(i, j & 15, k) : enumskyblock.c));
     }
 
     public void a(EnumSkyBlock enumskyblock, BlockPosition blockposition, int i) {
@@ -566,14 +500,14 @@
         int l = blockposition.getZ() & 15;
         ChunkSection chunksection = this.sections[k >> 4];
 
-        if (chunksection == null) {
-            chunksection = this.sections[k >> 4] = new ChunkSection(k >> 4 << 4, !this.world.worldProvider.o());
+        if (chunksection == Chunk.a) {
+            chunksection = this.sections[k >> 4] = new ChunkSection(k >> 4 << 4, !this.world.worldProvider.m());
             this.initLighting();
         }
 
-        this.q = true;
+        this.r = true;
         if (enumskyblock == EnumSkyBlock.SKY) {
-            if (!this.world.worldProvider.o()) {
+            if (!this.world.worldProvider.m()) {
                 chunksection.a(j, k & 15, l, i);
             }
         } else if (enumskyblock == EnumSkyBlock.BLOCK) {
@@ -588,13 +522,13 @@
         int l = blockposition.getZ() & 15;
         ChunkSection chunksection = this.sections[k >> 4];
 
-        if (chunksection == null) {
-            return !this.world.worldProvider.o() && i < EnumSkyBlock.SKY.c ? EnumSkyBlock.SKY.c - i : 0;
+        if (chunksection == Chunk.a) {
+            return !this.world.worldProvider.m() && i < EnumSkyBlock.SKY.c ? EnumSkyBlock.SKY.c - i : 0;
         } else {
-            int i1 = this.world.worldProvider.o() ? 0 : chunksection.d(j, k & 15, l);
+            int i1 = this.world.worldProvider.m() ? 0 : chunksection.b(j, k & 15, l);
 
             i1 -= i;
-            int j1 = chunksection.e(j, k & 15, l);
+            int j1 = chunksection.c(j, k & 15, l);
 
             if (j1 > i1) {
                 i1 = j1;
@@ -605,12 +539,12 @@
     }
 
     public void a(Entity entity) {
-        this.r = true;
+        this.s = true;
         int i = MathHelper.floor(entity.locX / 16.0D);
         int j = MathHelper.floor(entity.locZ / 16.0D);
 
         if (i != this.locX || j != this.locZ) {
-            Chunk.c.warn("Wrong location! (" + i + ", " + j + ") should be (" + this.locX + ", " + this.locZ + "), " + entity, new Object[] { entity});
+            Chunk.d.warn("Wrong location! (" + i + ", " + j + ") should be (" + this.locX + ", " + this.locZ + "), " + entity, new Object[] { entity});
             entity.die();
         }
 
@@ -624,15 +558,15 @@
             k = this.entitySlices.length - 1;
         }
 
-        entity.ad = true;
-        entity.ae = this.locX;
-        entity.af = k;
-        entity.ag = this.locZ;
+        entity.aa = true;
+        entity.ab = this.locX;
+        entity.ac = k;
+        entity.ad = this.locZ;
         this.entitySlices[k].add(entity);
     }
 
     public void b(Entity entity) {
-        this.a(entity, entity.af);
+        this.a(entity, entity.ac);
     }
 
     public void a(Entity entity, int i) {
@@ -647,7 +581,7 @@
         this.entitySlices[i].remove(entity);
     }
 
-    public boolean d(BlockPosition blockposition) {
+    public boolean c(BlockPosition blockposition) {
         int i = blockposition.getX() & 15;
         int j = blockposition.getY();
         int k = blockposition.getZ() & 15;
@@ -655,10 +589,11 @@
         return j >= this.heightMap[k << 4 | i];
     }
 
-    private TileEntity i(BlockPosition blockposition) {
-        Block block = this.getType(blockposition);
+    private TileEntity g(BlockPosition blockposition) {
+        IBlockData iblockdata = this.getBlockData(blockposition);
+        Block block = iblockdata.getBlock();
 
-        return !block.isTileEntity() ? null : ((IContainer) block).a(this.world, this.c(blockposition));
+        return !block.isTileEntity() ? null : ((ITileEntity) block).a(this.world, iblockdata.getBlock().toLegacyData(iblockdata));
     }
 
     public TileEntity a(BlockPosition blockposition, Chunk.EnumTileEntityState chunk_enumtileentitystate) {
@@ -666,10 +601,10 @@
 
         if (tileentity == null) {
             if (chunk_enumtileentitystate == Chunk.EnumTileEntityState.IMMEDIATE) {
-                tileentity = this.i(blockposition);
+                tileentity = this.g(blockposition);
                 this.world.setTileEntity(blockposition, tileentity);
             } else if (chunk_enumtileentitystate == Chunk.EnumTileEntityState.QUEUED) {
-                this.w.add(blockposition);
+                this.x.add(blockposition);
             }
         } else if (tileentity.x()) {
             this.tileEntities.remove(blockposition);
@@ -681,7 +616,7 @@
 
     public void a(TileEntity tileentity) {
         this.a(tileentity.getPosition(), tileentity);
-        if (this.h) {
+        if (this.i) {
             this.world.a(tileentity);
         }
 
@@ -690,18 +625,18 @@
     public void a(BlockPosition blockposition, TileEntity tileentity) {
         tileentity.a(this.world);
         tileentity.a(blockposition);
-        if (this.getType(blockposition) instanceof IContainer) {
+        if (this.getBlockData(blockposition).getBlock() instanceof ITileEntity) {
             if (this.tileEntities.containsKey(blockposition)) {
                 ((TileEntity) this.tileEntities.get(blockposition)).y();
             }
 
-            tileentity.D();
+            tileentity.z();
             this.tileEntities.put(blockposition, tileentity);
         }
     }
 
-    public void e(BlockPosition blockposition) {
-        if (this.h) {
+    public void d(BlockPosition blockposition) {
+        if (this.i) {
             TileEntity tileentity = (TileEntity) this.tileEntities.remove(blockposition);
 
             if (tileentity != null) {
@@ -712,8 +647,8 @@
     }
 
     public void addEntities() {
-        this.h = true;
-        this.world.a(this.tileEntities.values());
+        this.i = true;
+        this.world.b(this.tileEntities.values());
 
         for (int i = 0; i < this.entitySlices.length; ++i) {
             Iterator iterator = this.entitySlices[i].iterator();
@@ -721,16 +656,16 @@
             while (iterator.hasNext()) {
                 Entity entity = (Entity) iterator.next();
 
-                entity.ah();
+                entity.at();
             }
 
-            this.world.b((Collection) this.entitySlices[i]);
+            this.world.a((Collection) this.entitySlices[i]);
         }
 
     }
 
     public void removeEntities() {
-        this.h = false;
+        this.i = false;
         Iterator iterator = this.tileEntities.values().iterator();
 
         while (iterator.hasNext()) {
@@ -746,7 +681,7 @@
     }
 
     public void e() {
-        this.q = true;
+        this.r = true;
     }
 
     public void a(Entity entity, AxisAlignedBB axisalignedbb, List<Entity> list, Predicate<? super Entity> predicate) {
@@ -768,7 +703,7 @@
                             list.add(entity1);
                         }
 
-                        Entity[] aentity = entity1.aB();
+                        Entity[] aentity = entity1.aR();
 
                         if (aentity != null) {
                             for (int l = 0; l < aentity.length; ++l) {
@@ -808,14 +743,14 @@
 
     public boolean a(boolean flag) {
         if (flag) {
-            if (this.r && this.world.getTime() != this.lastSaved || this.q) {
+            if (this.s && this.world.getTime() != this.lastSaved || this.r) {
                 return true;
             }
-        } else if (this.r && this.world.getTime() >= this.lastSaved + 600L) {
+        } else if (this.s && this.world.getTime() >= this.lastSaved + 600L) {
             return true;
         }
 
-        return this.q;
+        return this.r;
     }
 
     public Random a(long i) {
@@ -826,60 +761,52 @@
         return false;
     }
 
-    public void loadNearby(IChunkProvider ichunkprovider, IChunkProvider ichunkprovider1, int i, int j) {
-        boolean flag = ichunkprovider.isChunkLoaded(i, j - 1);
-        boolean flag1 = ichunkprovider.isChunkLoaded(i + 1, j);
-        boolean flag2 = ichunkprovider.isChunkLoaded(i, j + 1);
-        boolean flag3 = ichunkprovider.isChunkLoaded(i - 1, j);
-        boolean flag4 = ichunkprovider.isChunkLoaded(i - 1, j - 1);
-        boolean flag5 = ichunkprovider.isChunkLoaded(i + 1, j + 1);
-        boolean flag6 = ichunkprovider.isChunkLoaded(i - 1, j + 1);
-        boolean flag7 = ichunkprovider.isChunkLoaded(i + 1, j - 1);
-
-        if (flag1 && flag2 && flag5) {
-            if (!this.done) {
-                ichunkprovider.getChunkAt(ichunkprovider1, i, j);
-            } else {
-                ichunkprovider.a(ichunkprovider1, this, i, j);
-            }
+    public void loadNearby(IChunkProvider ichunkprovider, ChunkGenerator chunkgenerator) {
+        Chunk chunk = ichunkprovider.getLoadedChunkAt(this.locX, this.locZ - 1);
+        Chunk chunk1 = ichunkprovider.getLoadedChunkAt(this.locX + 1, this.locZ);
+        Chunk chunk2 = ichunkprovider.getLoadedChunkAt(this.locX, this.locZ + 1);
+        Chunk chunk3 = ichunkprovider.getLoadedChunkAt(this.locX - 1, this.locZ);
+
+        if (chunk1 != null && chunk2 != null && ichunkprovider.getLoadedChunkAt(this.locX + 1, this.locZ + 1) != null) {
+            this.a(chunkgenerator);
         }
 
-        Chunk chunk;
+        if (chunk3 != null && chunk2 != null && ichunkprovider.getLoadedChunkAt(this.locX - 1, this.locZ + 1) != null) {
+            chunk3.a(chunkgenerator);
+        }
 
-        if (flag3 && flag2 && flag6) {
-            chunk = ichunkprovider.getOrCreateChunk(i - 1, j);
-            if (!chunk.done) {
-                ichunkprovider.getChunkAt(ichunkprovider1, i - 1, j);
-            } else {
-                ichunkprovider.a(ichunkprovider1, chunk, i - 1, j);
-            }
+        if (chunk != null && chunk1 != null && ichunkprovider.getLoadedChunkAt(this.locX + 1, this.locZ - 1) != null) {
+            chunk.a(chunkgenerator);
         }
 
-        if (flag && flag1 && flag7) {
-            chunk = ichunkprovider.getOrCreateChunk(i, j - 1);
-            if (!chunk.done) {
-                ichunkprovider.getChunkAt(ichunkprovider1, i, j - 1);
-            } else {
-                ichunkprovider.a(ichunkprovider1, chunk, i, j - 1);
+        if (chunk != null && chunk3 != null) {
+            Chunk chunk4 = ichunkprovider.getLoadedChunkAt(this.locX - 1, this.locZ - 1);
+
+            if (chunk4 != null) {
+                chunk4.a(chunkgenerator);
             }
         }
 
-        if (flag4 && flag && flag3) {
-            chunk = ichunkprovider.getOrCreateChunk(i - 1, j - 1);
-            if (!chunk.done) {
-                ichunkprovider.getChunkAt(ichunkprovider1, i - 1, j - 1);
-            } else {
-                ichunkprovider.a(ichunkprovider1, chunk, i - 1, j - 1);
+    }
+
+    protected void a(ChunkGenerator chunkgenerator) {
+        if (this.isDone()) {
+            if (chunkgenerator.a(this, this.locX, this.locZ)) {
+                this.e();
             }
+        } else {
+            this.o();
+            chunkgenerator.recreateStructures(this.locX, this.locZ);
+            this.e();
         }
 
     }
 
-    public BlockPosition h(BlockPosition blockposition) {
+    public BlockPosition f(BlockPosition blockposition) {
         int i = blockposition.getX() & 15;
         int j = blockposition.getZ() & 15;
         int k = i | j << 4;
-        BlockPosition blockposition1 = new BlockPosition(blockposition.getX(), this.f[k], blockposition.getZ());
+        BlockPosition blockposition1 = new BlockPosition(blockposition.getX(), this.g[k], blockposition.getZ());
 
         if (blockposition1.getY() == -999) {
             int l = this.g() + 15;
@@ -888,8 +815,8 @@
             int i1 = -1;
 
             while (blockposition1.getY() > 0 && i1 == -1) {
-                Block block = this.getType(blockposition1);
-                Material material = block.getMaterial();
+                IBlockData iblockdata = this.getBlockData(blockposition1);
+                Material material = iblockdata.getMaterial();
 
                 if (!material.isSolid() && !material.isLiquid()) {
                     blockposition1 = blockposition1.down();
@@ -898,27 +825,27 @@
                 }
             }
 
-            this.f[k] = i1;
+            this.g[k] = i1;
         }
 
-        return new BlockPosition(blockposition.getX(), this.f[k], blockposition.getZ());
+        return new BlockPosition(blockposition.getX(), this.g[k], blockposition.getZ());
     }
 
     public void b(boolean flag) {
-        if (this.k && !this.world.worldProvider.o() && !flag) {
+        if (this.l && !this.world.worldProvider.m() && !flag) {
             this.h(this.world.isClientSide);
         }
 
-        this.p = true;
+        this.q = true;
         if (!this.lit && this.done) {
-            this.n();
+            this.o();
         }
 
-        while (!this.w.isEmpty()) {
-            BlockPosition blockposition = (BlockPosition) this.w.poll();
+        while (!this.x.isEmpty()) {
+            BlockPosition blockposition = (BlockPosition) this.x.poll();
 
-            if (this.a(blockposition, Chunk.EnumTileEntityState.CHECK) == null && this.getType(blockposition).isTileEntity()) {
-                TileEntity tileentity = this.i(blockposition);
+            if (this.a(blockposition, Chunk.EnumTileEntityState.CHECK) == null && this.getBlockData(blockposition).getBlock().isTileEntity()) {
+                TileEntity tileentity = this.g(blockposition);
 
                 this.world.setTileEntity(blockposition, tileentity);
                 this.world.b(blockposition, blockposition);
@@ -928,10 +855,14 @@
     }
 
     public boolean isReady() {
-        return this.p && this.done && this.lit;
+        return this.q && this.done && this.lit;
+    }
+
+    public boolean j() {
+        return this.q;
     }
 
-    public ChunkCoordIntPair j() {
+    public ChunkCoordIntPair k() {
         return new ChunkCoordIntPair(this.locX, this.locZ);
     }
 
@@ -947,7 +878,7 @@
         for (int k = i; k <= j; k += 16) {
             ChunkSection chunksection = this.sections[k >> 4];
 
-            if (chunksection != null && !chunksection.a()) {
+            if (chunksection != Chunk.a && !chunksection.a()) {
                 return false;
             }
         }
@@ -957,95 +888,94 @@
 
     public void a(ChunkSection[] achunksection) {
         if (this.sections.length != achunksection.length) {
-            Chunk.c.warn("Could not set level chunk sections, array length is " + achunksection.length + " instead of " + this.sections.length);
+            Chunk.d.warn("Could not set level chunk sections, array length is " + achunksection.length + " instead of " + this.sections.length);
         } else {
-            for (int i = 0; i < this.sections.length; ++i) {
-                this.sections[i] = achunksection[i];
-            }
-
+            System.arraycopy(achunksection, 0, this.sections, 0, this.sections.length);
         }
     }
 
     public BiomeBase getBiome(BlockPosition blockposition, WorldChunkManager worldchunkmanager) {
         int i = blockposition.getX() & 15;
         int j = blockposition.getZ() & 15;
-        int k = this.e[j << 4 | i] & 255;
+        int k = this.f[j << 4 | i] & 255;
         BiomeBase biomebase;
 
         if (k == 255) {
-            biomebase = worldchunkmanager.getBiome(blockposition, BiomeBase.PLAINS);
-            k = biomebase.id;
-            this.e[j << 4 | i] = (byte) (k & 255);
+            biomebase = worldchunkmanager.getBiome(blockposition, Biomes.c);
+            k = BiomeBase.a(biomebase);
+            this.f[j << 4 | i] = (byte) (k & 255);
         }
 
         biomebase = BiomeBase.getBiome(k);
-        return biomebase == null ? BiomeBase.PLAINS : biomebase;
+        return biomebase == null ? Biomes.c : biomebase;
     }
 
     public byte[] getBiomeIndex() {
-        return this.e;
+        return this.f;
     }
 
     public void a(byte[] abyte) {
-        if (this.e.length != abyte.length) {
-            Chunk.c.warn("Could not set level chunk biomes, array length is " + abyte.length + " instead of " + this.e.length);
+        if (this.f.length != abyte.length) {
+            Chunk.d.warn("Could not set level chunk biomes, array length is " + abyte.length + " instead of " + this.f.length);
         } else {
-            for (int i = 0; i < this.e.length; ++i) {
-                this.e[i] = abyte[i];
+            for (int i = 0; i < this.f.length; ++i) {
+                this.f[i] = abyte[i];
             }
 
         }
     }
 
-    public void l() {
-        this.v = 0;
+    public void m() {
+        this.w = 0;
     }
 
-    public void m() {
-        BlockPosition blockposition = new BlockPosition(this.locX << 4, 0, this.locZ << 4);
+    public void n() {
+        if (this.w < 4096) {
+            BlockPosition blockposition = new BlockPosition(this.locX << 4, 0, this.locZ << 4);
 
-        for (int i = 0; i < 8; ++i) {
-            if (this.v >= 4096) {
-                return;
-            }
+            for (int i = 0; i < 8; ++i) {
+                if (this.w >= 4096) {
+                    return;
+                }
 
-            int j = this.v % 16;
-            int k = this.v / 16 % 16;
-            int l = this.v / 256;
+                int j = this.w % 16;
+                int k = this.w / 16 % 16;
+                int l = this.w / 256;
 
-            ++this.v;
+                ++this.w;
 
-            for (int i1 = 0; i1 < 16; ++i1) {
-                BlockPosition blockposition1 = blockposition.a(k, (j << 4) + i1, l);
-                boolean flag = i1 == 0 || i1 == 15 || k == 0 || k == 15 || l == 0 || l == 15;
+                for (int i1 = 0; i1 < 16; ++i1) {
+                    BlockPosition blockposition1 = blockposition.a(k, (j << 4) + i1, l);
+                    boolean flag = i1 == 0 || i1 == 15 || k == 0 || k == 15 || l == 0 || l == 15;
 
-                if (this.sections[j] == null && flag || this.sections[j] != null && this.sections[j].b(k, i1, l).getMaterial() == Material.AIR) {
-                    EnumDirection[] aenumdirection = EnumDirection.values();
-                    int j1 = aenumdirection.length;
+                    if (this.sections[j] == Chunk.a && flag || this.sections[j] != Chunk.a && this.sections[j].getType(k, i1, l).getMaterial() == Material.AIR) {
+                        EnumDirection[] aenumdirection = EnumDirection.values();
+                        int j1 = aenumdirection.length;
 
-                    for (int k1 = 0; k1 < j1; ++k1) {
-                        EnumDirection enumdirection = aenumdirection[k1];
-                        BlockPosition blockposition2 = blockposition1.shift(enumdirection);
+                        for (int k1 = 0; k1 < j1; ++k1) {
+                            EnumDirection enumdirection = aenumdirection[k1];
+                            BlockPosition blockposition2 = blockposition1.shift(enumdirection);
 
-                        if (this.world.getType(blockposition2).getBlock().r() > 0) {
-                            this.world.x(blockposition2);
+                            if (this.world.getType(blockposition2).d() > 0) {
+                                this.world.w(blockposition2);
+                            }
                         }
-                    }
 
-                    this.world.x(blockposition1);
+                        this.world.w(blockposition1);
+                    }
                 }
             }
-        }
 
+        }
     }
 
-    public void n() {
+    public void o() {
         this.done = true;
         this.lit = true;
         BlockPosition blockposition = new BlockPosition(this.locX << 4, 0, this.locZ << 4);
 
-        if (!this.world.worldProvider.o()) {
-            if (this.world.areChunksLoadedBetween(blockposition.a(-1, 0, -1), blockposition.a(16, this.world.F(), 16))) {
+        if (!this.world.worldProvider.m()) {
+            if (this.world.areChunksLoadedBetween(blockposition.a(-1, 0, -1), blockposition.a(16, this.world.K(), 16))) {
                 label42:
                 for (int i = 0; i < 16; ++i) {
                     for (int j = 0; j < 16; ++j) {
@@ -1066,7 +996,7 @@
                         this.world.getChunkAtWorldCoords(blockposition.shift(enumdirection, k)).a(enumdirection.opposite());
                     }
 
-                    this.y();
+                    this.z();
                 }
             } else {
                 this.lit = false;
@@ -1075,9 +1005,9 @@
 
     }
 
-    private void y() {
-        for (int i = 0; i < this.g.length; ++i) {
-            this.g[i] = true;
+    private void z() {
+        for (int i = 0; i < this.h.length; ++i) {
+            this.h[i] = true;
         }
 
         this.h(false);
@@ -1116,46 +1046,46 @@
 
         int l;
 
-        for (l = k + 16 - 1; l > this.world.F() || l > 0 && !flag1; --l) {
+        for (l = k + 16 - 1; l > this.world.K() || l > 0 && !flag1; --l) {
             blockposition_mutableblockposition.c(blockposition_mutableblockposition.getX(), l, blockposition_mutableblockposition.getZ());
             int i1 = this.b((BlockPosition) blockposition_mutableblockposition);
 
-            if (i1 == 255 && blockposition_mutableblockposition.getY() < this.world.F()) {
+            if (i1 == 255 && blockposition_mutableblockposition.getY() < this.world.K()) {
                 flag1 = true;
             }
 
             if (!flag && i1 > 0) {
                 flag = true;
-            } else if (flag && i1 == 0 && !this.world.x(blockposition_mutableblockposition)) {
+            } else if (flag && i1 == 0 && !this.world.w(blockposition_mutableblockposition)) {
                 return false;
             }
         }
 
         for (l = blockposition_mutableblockposition.getY(); l > 0; --l) {
             blockposition_mutableblockposition.c(blockposition_mutableblockposition.getX(), l, blockposition_mutableblockposition.getZ());
-            if (this.getType(blockposition_mutableblockposition).r() > 0) {
-                this.world.x(blockposition_mutableblockposition);
+            if (this.getBlockData(blockposition_mutableblockposition).d() > 0) {
+                this.world.w(blockposition_mutableblockposition);
             }
         }
 
         return true;
     }
 
-    public boolean o() {
-        return this.h;
+    public boolean p() {
+        return this.i;
     }
 
     public World getWorld() {
         return this.world;
     }
 
-    public int[] q() {
+    public int[] r() {
         return this.heightMap;
     }
 
     public void a(int[] aint) {
         if (this.heightMap.length != aint.length) {
-            Chunk.c.warn("Could not set level chunk heightmap, array length is " + aint.length + " instead of " + this.heightMap.length);
+            Chunk.d.warn("Could not set level chunk heightmap, array length is " + aint.length + " instead of " + this.heightMap.length);
         } else {
             for (int i = 0; i < this.heightMap.length; ++i) {
                 this.heightMap[i] = aint[i];
@@ -1180,7 +1110,7 @@
         this.done = flag;
     }
 
-    public boolean u() {
+    public boolean v() {
         return this.lit;
     }
 
@@ -1189,27 +1119,27 @@
     }
 
     public void f(boolean flag) {
-        this.q = flag;
+        this.r = flag;
     }
 
     public void g(boolean flag) {
-        this.r = flag;
+        this.s = flag;
     }
 
     public void setLastSaved(long i) {
         this.lastSaved = i;
     }
 
-    public int v() {
-        return this.t;
+    public int w() {
+        return this.u;
     }
 
-    public long w() {
-        return this.u;
+    public long x() {
+        return this.v;
     }
 
     public void c(long i) {
-        this.u = i;
+        this.v = i;
     }
 
     public static enum EnumTileEntityState {
