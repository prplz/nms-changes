--- a/net/minecraft/server/BlockTrapdoor.java
+++ b/net/minecraft/server/BlockTrapdoor.java
@@ -1,121 +1,106 @@
 package net.minecraft.server;
 
-import com.google.common.base.Predicate;
-
 public class BlockTrapdoor extends Block {
 
-    public static final BlockStateDirection FACING = BlockStateDirection.of("facing", (Predicate) EnumDirection.EnumDirectionLimit.HORIZONTAL);
+    public static final BlockStateDirection FACING = BlockFacingHorizontal.FACING;
     public static final BlockStateBoolean OPEN = BlockStateBoolean.of("open");
     public static final BlockStateEnum<BlockTrapdoor.EnumTrapdoorHalf> HALF = BlockStateEnum.of("half", BlockTrapdoor.EnumTrapdoorHalf.class);
+    protected static final AxisAlignedBB d = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.1875D, 1.0D, 1.0D);
+    protected static final AxisAlignedBB e = new AxisAlignedBB(0.8125D, 0.0D, 0.0D, 1.0D, 1.0D, 1.0D);
+    protected static final AxisAlignedBB f = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 1.0D, 0.1875D);
+    protected static final AxisAlignedBB g = new AxisAlignedBB(0.0D, 0.0D, 0.8125D, 1.0D, 1.0D, 1.0D);
+    protected static final AxisAlignedBB B = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.1875D, 1.0D);
+    protected static final AxisAlignedBB C = new AxisAlignedBB(0.0D, 0.8125D, 0.0D, 1.0D, 1.0D, 1.0D);
 
     protected BlockTrapdoor(Material material) {
         super(material);
-        this.j(this.blockStateList.getBlockData().set(BlockTrapdoor.FACING, EnumDirection.NORTH).set(BlockTrapdoor.OPEN, Boolean.valueOf(false)).set(BlockTrapdoor.HALF, BlockTrapdoor.EnumTrapdoorHalf.BOTTOM));
+        this.w(this.blockStateList.getBlockData().set(BlockTrapdoor.FACING, EnumDirection.NORTH).set(BlockTrapdoor.OPEN, Boolean.valueOf(false)).set(BlockTrapdoor.HALF, BlockTrapdoor.EnumTrapdoorHalf.BOTTOM));
         float f = 0.5F;
         float f1 = 1.0F;
 
-        this.a(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
         this.a(CreativeModeTab.d);
     }
 
-    public boolean c() {
-        return false;
-    }
+    public AxisAlignedBB a(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
+        AxisAlignedBB axisalignedbb;
 
-    public boolean d() {
-        return false;
-    }
+        if (((Boolean) iblockdata.get(BlockTrapdoor.OPEN)).booleanValue()) {
+            switch (BlockTrapdoor.SyntheticClass_1.a[((EnumDirection) iblockdata.get(BlockTrapdoor.FACING)).ordinal()]) {
+            case 1:
+            default:
+                axisalignedbb = BlockTrapdoor.g;
+                break;
+
+            case 2:
+                axisalignedbb = BlockTrapdoor.f;
+                break;
+
+            case 3:
+                axisalignedbb = BlockTrapdoor.e;
+                break;
 
-    public boolean b(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return !((Boolean) iblockaccess.getType(blockposition).get(BlockTrapdoor.OPEN)).booleanValue();
-    }
+            case 4:
+                axisalignedbb = BlockTrapdoor.d;
+            }
+        } else if (iblockdata.get(BlockTrapdoor.HALF) == BlockTrapdoor.EnumTrapdoorHalf.TOP) {
+            axisalignedbb = BlockTrapdoor.C;
+        } else {
+            axisalignedbb = BlockTrapdoor.B;
+        }
 
-    public AxisAlignedBB a(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        this.updateShape(world, blockposition);
-        return super.a(world, blockposition, iblockdata);
+        return axisalignedbb;
     }
 
-    public void updateShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        this.d(iblockaccess.getType(blockposition));
+    public boolean b(IBlockData iblockdata) {
+        return false;
     }
 
-    public void j() {
-        float f = 0.1875F;
-
-        this.a(0.0F, 0.40625F, 0.0F, 1.0F, 0.59375F, 1.0F);
+    public boolean c(IBlockData iblockdata) {
+        return false;
     }
 
-    public void d(IBlockData iblockdata) {
-        if (iblockdata.getBlock() == this) {
-            boolean flag = iblockdata.get(BlockTrapdoor.HALF) == BlockTrapdoor.EnumTrapdoorHalf.TOP;
-            Boolean obool = (Boolean) iblockdata.get(BlockTrapdoor.OPEN);
-            EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockTrapdoor.FACING);
-            float f = 0.1875F;
-
-            if (flag) {
-                this.a(0.0F, 0.8125F, 0.0F, 1.0F, 1.0F, 1.0F);
-            } else {
-                this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.1875F, 1.0F);
-            }
-
-            if (obool.booleanValue()) {
-                if (enumdirection == EnumDirection.NORTH) {
-                    this.a(0.0F, 0.0F, 0.8125F, 1.0F, 1.0F, 1.0F);
-                }
-
-                if (enumdirection == EnumDirection.SOUTH) {
-                    this.a(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.1875F);
-                }
-
-                if (enumdirection == EnumDirection.WEST) {
-                    this.a(0.8125F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-                }
-
-                if (enumdirection == EnumDirection.EAST) {
-                    this.a(0.0F, 0.0F, 0.0F, 0.1875F, 1.0F, 1.0F);
-                }
-            }
-
-        }
+    public boolean b(IBlockAccess iblockaccess, BlockPosition blockposition) {
+        return !((Boolean) iblockaccess.getType(blockposition).get(BlockTrapdoor.OPEN)).booleanValue();
     }
 
-    public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumDirection enumdirection, float f, float f1, float f2) {
+    public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, ItemStack itemstack, EnumDirection enumdirection, float f, float f1, float f2) {
         if (this.material == Material.ORE) {
             return true;
         } else {
-            iblockdata = iblockdata.a(BlockTrapdoor.OPEN);
+            iblockdata = iblockdata.a((IBlockState) BlockTrapdoor.OPEN);
             world.setTypeAndData(blockposition, iblockdata, 2);
-            world.a(entityhuman, ((Boolean) iblockdata.get(BlockTrapdoor.OPEN)).booleanValue() ? 1003 : 1006, blockposition, 0);
+            this.a(entityhuman, world, blockposition, ((Boolean) iblockdata.get(BlockTrapdoor.OPEN)).booleanValue());
             return true;
         }
     }
 
+    protected void a(EntityHuman entityhuman, World world, BlockPosition blockposition, boolean flag) {
+        int i;
+
+        if (flag) {
+            i = this.material == Material.ORE ? 1037 : 1007;
+            world.a(entityhuman, i, blockposition, 0);
+        } else {
+            i = this.material == Material.ORE ? 1036 : 1013;
+            world.a(entityhuman, i, blockposition, 0);
+        }
+
+    }
+
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
         if (!world.isClientSide) {
-            BlockPosition blockposition1 = blockposition.shift(((EnumDirection) iblockdata.get(BlockTrapdoor.FACING)).opposite());
+            boolean flag = world.isBlockIndirectlyPowered(blockposition);
 
-            if (!c(world.getType(blockposition1).getBlock())) {
-                world.setAir(blockposition);
-                this.b(world, blockposition, iblockdata, 0);
-            } else {
-                boolean flag = world.isBlockIndirectlyPowered(blockposition);
-
-                if (flag || block.isPowerSource()) {
-                    boolean flag1 = ((Boolean) iblockdata.get(BlockTrapdoor.OPEN)).booleanValue();
-
-                    if (flag1 != flag) {
-                        world.setTypeAndData(blockposition, iblockdata.set(BlockTrapdoor.OPEN, Boolean.valueOf(flag)), 2);
-                        world.a((EntityHuman) null, flag ? 1003 : 1006, blockposition, 0);
-                    }
-                }
+            if (flag || block.getBlockData().m()) {
+                boolean flag1 = ((Boolean) iblockdata.get(BlockTrapdoor.OPEN)).booleanValue();
 
+                if (flag1 != flag) {
+                    world.setTypeAndData(blockposition, iblockdata.set(BlockTrapdoor.OPEN, Boolean.valueOf(flag)), 2);
+                    this.a((EntityHuman) null, world, blockposition, flag);
+                }
             }
-        }
-    }
 
-    public MovingObjectPosition a(World world, BlockPosition blockposition, Vec3D vec3d, Vec3D vec3d1) {
-        this.updateShape(world, blockposition);
-        return super.a(world, blockposition, vec3d, vec3d1);
+        }
     }
 
     public IBlockData getPlacedState(World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2, int i, EntityLiving entityliving) {
@@ -124,16 +109,19 @@
         if (enumdirection.k().c()) {
             iblockdata = iblockdata.set(BlockTrapdoor.FACING, enumdirection).set(BlockTrapdoor.OPEN, Boolean.valueOf(false));
             iblockdata = iblockdata.set(BlockTrapdoor.HALF, f1 > 0.5F ? BlockTrapdoor.EnumTrapdoorHalf.TOP : BlockTrapdoor.EnumTrapdoorHalf.BOTTOM);
+        } else {
+            iblockdata = iblockdata.set(BlockTrapdoor.FACING, entityliving.getDirection().opposite()).set(BlockTrapdoor.OPEN, Boolean.valueOf(false));
+            iblockdata = iblockdata.set(BlockTrapdoor.HALF, enumdirection == EnumDirection.UP ? BlockTrapdoor.EnumTrapdoorHalf.BOTTOM : BlockTrapdoor.EnumTrapdoorHalf.TOP);
         }
 
         return iblockdata;
     }
 
     public boolean canPlace(World world, BlockPosition blockposition, EnumDirection enumdirection) {
-        return !enumdirection.k().b() && c(world.getType(blockposition.shift(enumdirection.opposite())).getBlock());
+        return true;
     }
 
-    protected static EnumDirection b(int i) {
+    protected static EnumDirection e(int i) {
         switch (i & 3) {
         case 0:
             return EnumDirection.NORTH;
@@ -167,12 +155,8 @@
         }
     }
 
-    private static boolean c(Block block) {
-        return block.material.k() && block.d() || block == Blocks.GLOWSTONE || block instanceof BlockStepAbstract || block instanceof BlockStairs;
-    }
-
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockTrapdoor.FACING, b(i)).set(BlockTrapdoor.OPEN, Boolean.valueOf((i & 4) != 0)).set(BlockTrapdoor.HALF, (i & 8) == 0 ? BlockTrapdoor.EnumTrapdoorHalf.BOTTOM : BlockTrapdoor.EnumTrapdoorHalf.TOP);
+        return this.getBlockData().set(BlockTrapdoor.FACING, e(i)).set(BlockTrapdoor.OPEN, Boolean.valueOf((i & 4) != 0)).set(BlockTrapdoor.HALF, (i & 8) == 0 ? BlockTrapdoor.EnumTrapdoorHalf.BOTTOM : BlockTrapdoor.EnumTrapdoorHalf.TOP);
     }
 
     public int toLegacyData(IBlockData iblockdata) {
@@ -190,6 +174,14 @@
         return i;
     }
 
+    public IBlockData a(IBlockData iblockdata, EnumBlockRotation enumblockrotation) {
+        return iblockdata.set(BlockTrapdoor.FACING, enumblockrotation.a((EnumDirection) iblockdata.get(BlockTrapdoor.FACING)));
+    }
+
+    public IBlockData a(IBlockData iblockdata, EnumBlockMirror enumblockmirror) {
+        return iblockdata.a(enumblockmirror.a((EnumDirection) iblockdata.get(BlockTrapdoor.FACING)));
+    }
+
     protected BlockStateList getStateList() {
         return new BlockStateList(this, new IBlockState[] { BlockTrapdoor.FACING, BlockTrapdoor.OPEN, BlockTrapdoor.HALF});
     }
