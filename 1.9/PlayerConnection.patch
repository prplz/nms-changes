--- a/net/minecraft/server/PlayerConnection.java
+++ b/net/minecraft/server/PlayerConnection.java
@@ -10,7 +10,6 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.Date;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
@@ -19,44 +18,97 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerListBox {
+public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 
-    private static final Logger c = LogManager.getLogger();
+    private static final Logger LOGGER = LogManager.getLogger();
     public final NetworkManager networkManager;
     private final MinecraftServer minecraftServer;
     public EntityPlayer player;
     private int e;
     private int f;
-    private int g;
-    private boolean h;
-    private int i;
-    private long j;
-    private long k;
+    private long g;
+    private long h;
     private int chatThrottle;
-    private int m;
-    private IntHashMap<Short> n = new IntHashMap();
+    private int j;
+    private final IntHashMap<Short> k = new IntHashMap();
+    private double l;
+    private double m;
+    private double n;
     private double o;
     private double p;
     private double q;
-    private boolean checkMovement = true;
+    private Entity r;
+    private double s;
+    private double t;
+    private double u;
+    private double v;
+    private double w;
+    private double x;
+    private Vec3D teleportPos;
+    private int teleportAwait;
+    private int A;
+    private boolean B;
+    private int C;
+    private boolean D;
+    private int E;
+    private int F;
+    private int G;
 
     public PlayerConnection(MinecraftServer minecraftserver, NetworkManager networkmanager, EntityPlayer entityplayer) {
         this.minecraftServer = minecraftserver;
         this.networkManager = networkmanager;
-        networkmanager.a((PacketListener) this);
+        networkmanager.setPacketListener(this);
         this.player = entityplayer;
         entityplayer.playerConnection = this;
     }
 
     public void c() {
-        this.h = false;
+        this.d();
+        this.player.k_();
+        this.player.setLocation(this.l, this.m, this.n, this.player.yaw, this.player.pitch);
         ++this.e;
+        this.G = this.F;
+        if (this.B) {
+            if (++this.C > 80) {
+                PlayerConnection.LOGGER.warn(this.player.getName() + " was kicked for floating too long!");
+                this.disconnect("Flying is not enabled on this server");
+                return;
+            }
+        } else {
+            this.B = false;
+            this.C = 0;
+        }
+
+        this.r = this.player.getVehicle();
+        if (this.r != this.player && this.r.bt() == this.player) {
+            this.s = this.r.locX;
+            this.t = this.r.locY;
+            this.u = this.r.locZ;
+            this.v = this.r.locX;
+            this.w = this.r.locY;
+            this.x = this.r.locZ;
+            if (this.D && this.player.getVehicle().bt() == this.player) {
+                if (++this.E > 80) {
+                    PlayerConnection.LOGGER.warn(this.player.getName() + " was kicked for floating a vehicle too long!");
+                    this.disconnect("Flying is not enabled on this server");
+                    return;
+                }
+            } else {
+                this.D = false;
+                this.E = 0;
+            }
+        } else {
+            this.r = null;
+            this.D = false;
+            this.E = 0;
+        }
+
         this.minecraftServer.methodProfiler.a("keepAlive");
-        if ((long) this.e - this.k > 40L) {
-            this.k = (long) this.e;
-            this.j = this.d();
-            this.i = (int) this.j;
-            this.sendPacket(new PacketPlayOutKeepAlive(this.i));
+        if ((long) this.e - this.h > 40L) {
+            this.h = (long) this.e;
+            this.g = this.e();
+            this.f = (int) this.g;
+            this.sendPacket(new PacketPlayOutKeepAlive(this.f));
         }
 
         this.minecraftServer.methodProfiler.b();
@@ -64,16 +116,25 @@
             --this.chatThrottle;
         }
 
-        if (this.m > 0) {
-            --this.m;
+        if (this.j > 0) {
+            --this.j;
         }
 
-        if (this.player.D() > 0L && this.minecraftServer.getIdleTimeout() > 0 && MinecraftServer.az() - this.player.D() > (long) (this.minecraftServer.getIdleTimeout() * 1000 * 60)) {
+        if (this.player.I() > 0L && this.minecraftServer.getIdleTimeout() > 0 && MinecraftServer.av() - this.player.I() > (long) (this.minecraftServer.getIdleTimeout() * 1000 * 60)) {
             this.disconnect("You have been idle for too long!");
         }
 
     }
 
+    private void d() {
+        this.l = this.player.locX;
+        this.m = this.player.locY;
+        this.n = this.player.locZ;
+        this.o = this.player.locX;
+        this.p = this.player.locY;
+        this.q = this.player.locZ;
+    }
+
     public NetworkManager a() {
         return this.networkManager;
     }
@@ -81,214 +142,227 @@
     public void disconnect(String s) {
         final ChatComponentText chatcomponenttext = new ChatComponentText(s);
 
-        this.networkManager.a(new PacketPlayOutKickDisconnect(chatcomponenttext), new GenericFutureListener() {
+        this.networkManager.sendPacket(new PacketPlayOutKickDisconnect(chatcomponenttext), new GenericFutureListener() {
             public void operationComplete(Future<? super Void> future) throws Exception {
                 PlayerConnection.this.networkManager.close(chatcomponenttext);
             }
         }, new GenericFutureListener[0]);
-        this.networkManager.k();
+        this.networkManager.stopReading();
         Futures.getUnchecked(this.minecraftServer.postToMainThread(new Runnable() {
             public void run() {
-                PlayerConnection.this.networkManager.l();
+                PlayerConnection.this.networkManager.handleDisconnection();
             }
         }));
     }
 
     public void a(PacketPlayInSteerVehicle packetplayinsteervehicle) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinsteervehicle, this, this.player.u());
+        PlayerConnectionUtils.ensureMainThread(packetplayinsteervehicle, this, this.player.x());
         this.player.a(packetplayinsteervehicle.a(), packetplayinsteervehicle.b(), packetplayinsteervehicle.c(), packetplayinsteervehicle.d());
     }
 
-    private boolean b(PacketPlayInFlying packetplayinflying) {
-        return !Doubles.isFinite(packetplayinflying.a()) || !Doubles.isFinite(packetplayinflying.b()) || !Doubles.isFinite(packetplayinflying.c()) || !Floats.isFinite(packetplayinflying.e()) || !Floats.isFinite(packetplayinflying.d());
+    private static boolean b(PacketPlayInFlying packetplayinflying) {
+        return Doubles.isFinite(packetplayinflying.a(0.0D)) && Doubles.isFinite(packetplayinflying.b(0.0D)) && Doubles.isFinite(packetplayinflying.c(0.0D)) && Floats.isFinite(packetplayinflying.b(0.0F)) && Floats.isFinite(packetplayinflying.a(0.0F)) ? false : Math.abs(packetplayinflying.a(0.0D)) <= 3.0E7D && Math.abs(packetplayinflying.a(0.0D)) <= 3.0E7D;
     }
 
-    public void a(PacketPlayInFlying packetplayinflying) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinflying, this, this.player.u());
-        if (this.b(packetplayinflying)) {
-            this.disconnect("Invalid move packet received");
+    private static boolean b(PacketPlayInVehicleMove packetplayinvehiclemove) {
+        return !Doubles.isFinite(packetplayinvehiclemove.getX()) || !Doubles.isFinite(packetplayinvehiclemove.getY()) || !Doubles.isFinite(packetplayinvehiclemove.getZ()) || !Floats.isFinite(packetplayinvehiclemove.getPitch()) || !Floats.isFinite(packetplayinvehiclemove.getYaw());
+    }
+
+    public void a(PacketPlayInVehicleMove packetplayinvehiclemove) {
+        PlayerConnectionUtils.ensureMainThread(packetplayinvehiclemove, this, this.player.x());
+        if (b(packetplayinvehiclemove)) {
+            this.disconnect("Invalid move vehicle packet received");
         } else {
-            WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
+            Entity entity = this.player.getVehicle();
 
-            this.h = true;
-            if (!this.player.viewingCredits) {
-                double d0 = this.player.locX;
-                double d1 = this.player.locY;
-                double d2 = this.player.locZ;
-                double d3 = 0.0D;
-                double d4 = packetplayinflying.a() - this.o;
-                double d5 = packetplayinflying.b() - this.p;
-                double d6 = packetplayinflying.c() - this.q;
-
-                if (packetplayinflying.g()) {
-                    d3 = d4 * d4 + d5 * d5 + d6 * d6;
-                    if (!this.checkMovement && d3 < 0.25D) {
-                        this.checkMovement = true;
-                    }
+            if (entity != this.player && entity.bt() == this.player && entity == this.r) {
+                WorldServer worldserver = this.player.x();
+                double d0 = entity.locX;
+                double d1 = entity.locY;
+                double d2 = entity.locZ;
+                double d3 = packetplayinvehiclemove.getX();
+                double d4 = packetplayinvehiclemove.getY();
+                double d5 = packetplayinvehiclemove.getZ();
+                float f = packetplayinvehiclemove.getYaw();
+                float f1 = packetplayinvehiclemove.getPitch();
+                double d6 = d3 - this.s;
+                double d7 = d4 - this.t;
+                double d8 = d5 - this.u;
+                double d9 = entity.motX * entity.motX + entity.motY * entity.motY + entity.motZ * entity.motZ;
+                double d10 = d6 * d6 + d7 * d7 + d8 * d8;
+
+                if (d10 - d9 > 100.0D && (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(entity.getName()))) {
+                    PlayerConnection.LOGGER.warn(entity.getName() + " (vehicle of " + this.player.getName() + ") moved too quickly! " + d6 + "," + d7 + "," + d8);
+                    this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity));
+                    return;
                 }
 
-                if (this.checkMovement) {
-                    this.f = this.e;
-                    double d7;
-                    double d8;
-                    double d9;
-
-                    if (this.player.vehicle != null) {
-                        float f = this.player.yaw;
-                        float f1 = this.player.pitch;
-
-                        this.player.vehicle.al();
-                        d7 = this.player.locX;
-                        d8 = this.player.locY;
-                        d9 = this.player.locZ;
-                        if (packetplayinflying.h()) {
-                            f = packetplayinflying.d();
-                            f1 = packetplayinflying.e();
-                        }
+                boolean flag = worldserver.getCubes(entity, entity.getBoundingBox().shrink(0.0625D)).isEmpty();
 
-                        this.player.onGround = packetplayinflying.f();
-                        this.player.l();
-                        this.player.setLocation(d7, d8, d9, f, f1);
-                        if (this.player.vehicle != null) {
-                            this.player.vehicle.al();
-                        }
+                d6 = d3 - this.v;
+                d7 = d4 - this.w - 1.0E-6D;
+                d8 = d5 - this.x;
+                entity.move(d6, d7, d8);
+                double d11 = d7;
 
-                        this.minecraftServer.getPlayerList().d(this.player);
-                        if (this.player.vehicle != null) {
-                            if (d3 > 4.0D) {
-                                Entity entity = this.player.vehicle;
+                d6 = d3 - entity.locX;
+                d7 = d4 - entity.locY;
+                if (d7 > -0.5D || d7 < 0.5D) {
+                    d7 = 0.0D;
+                }
 
-                                this.player.playerConnection.sendPacket(new PacketPlayOutEntityTeleport(entity));
-                                this.a(this.player.locX, this.player.locY, this.player.locZ, this.player.yaw, this.player.pitch);
-                            }
+                d8 = d5 - entity.locZ;
+                d10 = d6 * d6 + d7 * d7 + d8 * d8;
+                boolean flag1 = false;
 
-                            this.player.vehicle.ai = true;
-                        }
+                if (d10 > 0.0625D) {
+                    flag1 = true;
+                    PlayerConnection.LOGGER.warn(entity.getName() + " moved wrongly!");
+                }
 
-                        if (this.checkMovement) {
-                            this.o = this.player.locX;
-                            this.p = this.player.locY;
-                            this.q = this.player.locZ;
-                        }
+                entity.setLocation(d3, d4, d5, f, f1);
+                boolean flag2 = worldserver.getCubes(entity, entity.getBoundingBox().shrink(0.0625D)).isEmpty();
 
-                        worldserver.g(this.player);
-                        return;
-                    }
+                if (flag && (flag1 || !flag2)) {
+                    entity.setLocation(d0, d1, d2, f, f1);
+                    this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity));
+                    return;
+                }
 
-                    if (this.player.isSleeping()) {
-                        this.player.l();
-                        this.player.setLocation(this.o, this.p, this.q, this.player.yaw, this.player.pitch);
-                        worldserver.g(this.player);
-                        return;
-                    }
+                this.minecraftServer.getPlayerList().d(this.player);
+                this.player.checkMovement(this.player.locX - d0, this.player.locY - d1, this.player.locZ - d2);
+                this.D = d11 >= -0.03125D && !this.minecraftServer.getAllowFlight() && !worldserver.d(entity.getBoundingBox().g(0.0625D).a(0.0D, -0.55D, 0.0D));
+                this.v = entity.locX;
+                this.w = entity.locY;
+                this.x = entity.locZ;
+            }
 
-                    double d10 = this.player.locY;
+        }
+    }
 
-                    this.o = this.player.locX;
-                    this.p = this.player.locY;
-                    this.q = this.player.locZ;
-                    d7 = this.player.locX;
-                    d8 = this.player.locY;
-                    d9 = this.player.locZ;
-                    float f2 = this.player.yaw;
-                    float f3 = this.player.pitch;
-
-                    if (packetplayinflying.g() && packetplayinflying.b() == -999.0D) {
-                        packetplayinflying.a(false);
-                    }
-
-                    if (packetplayinflying.g()) {
-                        d7 = packetplayinflying.a();
-                        d8 = packetplayinflying.b();
-                        d9 = packetplayinflying.c();
-                        if (Math.abs(packetplayinflying.a()) > 3.0E7D || Math.abs(packetplayinflying.c()) > 3.0E7D) {
-                            this.disconnect("Illegal position");
-                            return;
-                        }
-                    }
+    public void a(PacketPlayInTeleportAccept packetplayinteleportaccept) {
+        PlayerConnectionUtils.ensureMainThread(packetplayinteleportaccept, this, this.player.x());
+        if (packetplayinteleportaccept.a() == this.teleportAwait) {
+            this.player.setLocation(this.teleportPos.x, this.teleportPos.y, this.teleportPos.z, this.player.yaw, this.player.pitch);
+            if (this.player.K()) {
+                this.o = this.teleportPos.x;
+                this.p = this.teleportPos.y;
+                this.q = this.teleportPos.z;
+                this.player.L();
+            }
 
-                    if (packetplayinflying.h()) {
-                        f2 = packetplayinflying.d();
-                        f3 = packetplayinflying.e();
-                    }
+            this.teleportPos = null;
+        }
 
-                    this.player.l();
-                    this.player.setLocation(this.o, this.p, this.q, f2, f3);
-                    if (!this.checkMovement) {
-                        return;
-                    }
+    }
 
-                    double d11 = d7 - this.player.locX;
-                    double d12 = d8 - this.player.locY;
-                    double d13 = d9 - this.player.locZ;
-                    double d14 = this.player.motX * this.player.motX + this.player.motY * this.player.motY + this.player.motZ * this.player.motZ;
-                    double d15 = d11 * d11 + d12 * d12 + d13 * d13;
-
-                    if (d15 - d14 > 100.0D && (!this.minecraftServer.T() || !this.minecraftServer.S().equals(this.player.getName()))) {
-                        PlayerConnection.c.warn(this.player.getName() + " moved too quickly! " + d11 + "," + d12 + "," + d13 + " (" + d11 + ", " + d12 + ", " + d13 + ")");
-                        this.a(this.o, this.p, this.q, this.player.yaw, this.player.pitch);
-                        return;
-                    }
+    public void a(PacketPlayInFlying packetplayinflying) {
+        PlayerConnectionUtils.ensureMainThread(packetplayinflying, this, this.player.x());
+        if (b(packetplayinflying)) {
+            this.disconnect("Invalid move player packet received");
+        } else {
+            WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
 
-                    float f4 = 0.0625F;
-                    boolean flag = worldserver.getCubes(this.player, this.player.getBoundingBox().shrink((double) f4, (double) f4, (double) f4)).isEmpty();
+            if (!this.player.viewingCredits) {
+                if (this.e == 0) {
+                    this.d();
+                }
 
-                    if (this.player.onGround && !packetplayinflying.f() && d12 > 0.0D) {
-                        this.player.bF();
+                if (this.teleportPos != null) {
+                    if (this.e - this.A > 20) {
+                        this.A = this.e;
+                        this.a(this.teleportPos.x, this.teleportPos.y, this.teleportPos.z, this.player.yaw, this.player.pitch);
                     }
 
-                    this.player.move(d11, d12, d13);
-                    this.player.onGround = packetplayinflying.f();
-                    double d16 = d12;
+                } else {
+                    this.A = this.e;
+                    if (this.player.isPassenger()) {
+                        this.player.setLocation(this.player.locX, this.player.locY, this.player.locZ, packetplayinflying.a(this.player.yaw), packetplayinflying.b(this.player.pitch));
+                        this.minecraftServer.getPlayerList().d(this.player);
+                    } else {
+                        double d0 = this.player.locX;
+                        double d1 = this.player.locY;
+                        double d2 = this.player.locZ;
+                        double d3 = this.player.locY;
+                        double d4 = packetplayinflying.a(this.player.locX);
+                        double d5 = packetplayinflying.b(this.player.locY);
+                        double d6 = packetplayinflying.c(this.player.locZ);
+                        float f = packetplayinflying.a(this.player.yaw);
+                        float f1 = packetplayinflying.b(this.player.pitch);
+                        double d7 = d4 - this.l;
+                        double d8 = d5 - this.m;
+                        double d9 = d6 - this.n;
+                        double d10 = this.player.motX * this.player.motX + this.player.motY * this.player.motY + this.player.motZ * this.player.motZ;
+                        double d11 = d7 * d7 + d8 * d8 + d9 * d9;
+
+                        ++this.F;
+                        int i = this.F - this.G;
+
+                        if (i > 5) {
+                            PlayerConnection.LOGGER.debug(this.player.getName() + " is sending move packets too frequently (" + i + " packets since last tick)");
+                            i = 1;
+                        }
 
-                    d11 = d7 - this.player.locX;
-                    d12 = d8 - this.player.locY;
-                    if (d12 > -0.5D || d12 < 0.5D) {
-                        d12 = 0.0D;
-                    }
+                        if (!this.player.K() && (!this.player.x().getGameRules().getBoolean("disableElytraMovementCheck") || !this.player.cB())) {
+                            float f2 = this.player.cB() ? 300.0F : 100.0F;
 
-                    d13 = d9 - this.player.locZ;
-                    d15 = d11 * d11 + d12 * d12 + d13 * d13;
-                    boolean flag1 = false;
+                            if (d11 - d10 > (double) (f2 * (float) i) && (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(this.player.getName()))) {
+                                PlayerConnection.LOGGER.warn(this.player.getName() + " moved too quickly! " + d7 + "," + d8 + "," + d9);
+                                this.a(this.player.locX, this.player.locY, this.player.locZ, this.player.yaw, this.player.pitch);
+                                return;
+                            }
+                        }
 
-                    if (d15 > 0.0625D && !this.player.isSleeping() && !this.player.playerInteractManager.isCreative()) {
-                        flag1 = true;
-                        PlayerConnection.c.warn(this.player.getName() + " moved wrongly!");
-                    }
+                        boolean flag = worldserver.getCubes(this.player, this.player.getBoundingBox().shrink(0.0625D)).isEmpty();
 
-                    this.player.setLocation(d7, d8, d9, f2, f3);
-                    this.player.checkMovement(this.player.locX - d0, this.player.locY - d1, this.player.locZ - d2);
-                    if (!this.player.noclip) {
-                        boolean flag2 = worldserver.getCubes(this.player, this.player.getBoundingBox().shrink((double) f4, (double) f4, (double) f4)).isEmpty();
+                        d7 = d4 - this.o;
+                        d8 = d5 - this.p;
+                        d9 = d6 - this.q;
+                        if (this.player.onGround && !packetplayinflying.a() && d8 > 0.0D) {
+                            this.player.ch();
+                        }
 
-                        if (flag && (flag1 || !flag2) && !this.player.isSleeping()) {
-                            this.a(this.o, this.p, this.q, f2, f3);
-                            return;
+                        this.player.move(d7, d8, d9);
+                        this.player.onGround = packetplayinflying.a();
+                        double d12 = d8;
+
+                        d7 = d4 - this.player.locX;
+                        d8 = d5 - this.player.locY;
+                        if (d8 > -0.5D || d8 < 0.5D) {
+                            d8 = 0.0D;
+                        }
+
+                        d9 = d6 - this.player.locZ;
+                        d11 = d7 * d7 + d8 * d8 + d9 * d9;
+                        boolean flag1 = false;
+
+                        if (!this.player.K() && d11 > 0.0625D && !this.player.isSleeping() && !this.player.playerInteractManager.isCreative() && this.player.playerInteractManager.getGameMode() != WorldSettings.EnumGamemode.SPECTATOR) {
+                            flag1 = true;
+                            PlayerConnection.LOGGER.warn(this.player.getName() + " moved wrongly!");
                         }
-                    }
 
-                    AxisAlignedBB axisalignedbb = this.player.getBoundingBox().grow((double) f4, (double) f4, (double) f4).a(0.0D, -0.55D, 0.0D);
+                        this.player.setLocation(d4, d5, d6, f, f1);
+                        this.player.checkMovement(this.player.locX - d0, this.player.locY - d1, this.player.locZ - d2);
+                        if (!this.player.noclip && !this.player.isSleeping()) {
+                            boolean flag2 = worldserver.getCubes(this.player, this.player.getBoundingBox().shrink(0.0625D)).isEmpty();
 
-                    if (!this.minecraftServer.getAllowFlight() && !this.player.abilities.canFly && !worldserver.c(axisalignedbb)) {
-                        if (d16 >= -0.03125D) {
-                            ++this.g;
-                            if (this.g > 80) {
-                                PlayerConnection.c.warn(this.player.getName() + " was kicked for floating too long!");
-                                this.disconnect("Flying is not enabled on this server");
+                            if (flag && (flag1 || !flag2)) {
+                                this.a(d0, d1, d2, f, f1);
                                 return;
                             }
                         }
-                    } else {
-                        this.g = 0;
-                    }
 
-                    this.player.onGround = packetplayinflying.f();
-                    this.minecraftServer.getPlayerList().d(this.player);
-                    this.player.a(this.player.locY - d10, packetplayinflying.f());
-                } else if (this.e - this.f > 20) {
-                    this.a(this.o, this.p, this.q, this.player.yaw, this.player.pitch);
+                        this.B = d12 >= -0.03125D;
+                        this.B &= !this.minecraftServer.getAllowFlight() && !this.player.abilities.canFly;
+                        this.B &= !this.player.hasEffect(MobEffects.LEVITATION) && !this.player.cB() && !worldserver.d(this.player.getBoundingBox().g(0.0625D).a(0.0D, -0.55D, 0.0D));
+                        this.player.onGround = packetplayinflying.a();
+                        this.minecraftServer.getPlayerList().d(this.player);
+                        this.player.a(this.player.locY - d3, packetplayinflying.a());
+                        this.o = this.player.locX;
+                        this.p = this.player.locY;
+                        this.q = this.player.locZ;
+                    }
                 }
-
             }
         }
     }
@@ -298,22 +372,11 @@
     }
 
     public void a(double d0, double d1, double d2, float f, float f1, Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set) {
-        this.checkMovement = false;
-        this.o = d0;
-        this.p = d1;
-        this.q = d2;
-        if (set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.X)) {
-            this.o += this.player.locX;
-        }
-
-        if (set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Y)) {
-            this.p += this.player.locY;
-        }
-
-        if (set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Z)) {
-            this.q += this.player.locZ;
-        }
+        double d3 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.X) ? this.player.locX : 0.0D;
+        double d4 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Y) ? this.player.locY : 0.0D;
+        double d5 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Z) ? this.player.locZ : 0.0D;
 
+        this.teleportPos = new Vec3D(d0 + d3, d1 + d4, d2 + d5);
         float f2 = f;
         float f3 = f1;
 
@@ -325,38 +388,59 @@
             f3 = f1 + this.player.pitch;
         }
 
-        this.player.setLocation(this.o, this.p, this.q, f2, f3);
-        this.player.playerConnection.sendPacket(new PacketPlayOutPosition(d0, d1, d2, f, f1, set));
+        if (++this.teleportAwait == Integer.MAX_VALUE) {
+            this.teleportAwait = 0;
+        }
+
+        this.A = this.e;
+        this.player.setLocation(this.teleportPos.x, this.teleportPos.y, this.teleportPos.z, f2, f3);
+        this.player.playerConnection.sendPacket(new PacketPlayOutPosition(d0, d1, d2, f, f1, set, this.teleportAwait));
     }
 
     public void a(PacketPlayInBlockDig packetplayinblockdig) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinblockdig, this, this.player.u());
+        PlayerConnectionUtils.ensureMainThread(packetplayinblockdig, this, this.player.x());
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         BlockPosition blockposition = packetplayinblockdig.a();
 
         this.player.resetIdleTimer();
+        ItemStack itemstack;
+
         switch (PlayerConnection.SyntheticClass_1.a[packetplayinblockdig.c().ordinal()]) {
         case 1:
             if (!this.player.isSpectator()) {
-                this.player.a(false);
+                itemstack = this.player.b(EnumHand.OFF_HAND);
+                this.player.a(EnumHand.OFF_HAND, this.player.b(EnumHand.MAIN_HAND));
+                this.player.a(EnumHand.MAIN_HAND, itemstack);
             }
 
             return;
 
         case 2:
             if (!this.player.isSpectator()) {
-                this.player.a(true);
+                this.player.a(false);
             }
 
             return;
 
         case 3:
-            this.player.bU();
+            if (!this.player.isSpectator()) {
+                this.player.a(true);
+            }
+
             return;
 
         case 4:
+            this.player.clearActiveItem();
+            itemstack = this.player.getItemInMainHand();
+            if (itemstack != null && itemstack.count == 0) {
+                this.player.a(EnumHand.MAIN_HAND, (ItemStack) null);
+            }
+
+            return;
+
         case 5:
         case 6:
+        case 7:
             double d0 = this.player.locX - ((double) blockposition.getX() + 0.5D);
             double d1 = this.player.locY - ((double) blockposition.getY() + 0.5D) + 1.5D;
             double d2 = this.player.locZ - ((double) blockposition.getZ() + 0.5D);
@@ -380,7 +464,7 @@
                         this.player.playerInteractManager.e();
                     }
 
-                    if (worldserver.getType(blockposition).getBlock().getMaterial() != Material.AIR) {
+                    if (worldserver.getType(blockposition).getMaterial() != Material.AIR) {
                         this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
                     }
                 }
@@ -393,62 +477,54 @@
         }
     }
 
-    public void a(PacketPlayInBlockPlace packetplayinblockplace) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinblockplace, this, this.player.u());
+    public void a(PacketPlayInUseItem packetplayinuseitem) {
+        PlayerConnectionUtils.ensureMainThread(packetplayinuseitem, this, this.player.x());
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
-        ItemStack itemstack = this.player.inventory.getItemInHand();
-        boolean flag = false;
-        BlockPosition blockposition = packetplayinblockplace.a();
-        EnumDirection enumdirection = EnumDirection.fromType1(packetplayinblockplace.getFace());
+        EnumHand enumhand = packetplayinuseitem.c();
+        ItemStack itemstack = this.player.b(enumhand);
+        BlockPosition blockposition = packetplayinuseitem.a();
+        EnumDirection enumdirection = packetplayinuseitem.b();
 
         this.player.resetIdleTimer();
-        if (packetplayinblockplace.getFace() == 255) {
-            if (itemstack == null) {
-                return;
-            }
-
-            this.player.playerInteractManager.useItem(this.player, worldserver, itemstack);
-        } else if (blockposition.getY() >= this.minecraftServer.getMaxBuildHeight() - 1 && (enumdirection == EnumDirection.UP || blockposition.getY() >= this.minecraftServer.getMaxBuildHeight())) {
+        if (blockposition.getY() >= this.minecraftServer.getMaxBuildHeight() - 1 && (enumdirection == EnumDirection.UP || blockposition.getY() >= this.minecraftServer.getMaxBuildHeight())) {
             ChatMessage chatmessage = new ChatMessage("build.tooHigh", new Object[] { Integer.valueOf(this.minecraftServer.getMaxBuildHeight())});
 
             chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
             this.player.playerConnection.sendPacket(new PacketPlayOutChat(chatmessage));
-            flag = true;
-        } else {
-            if (this.checkMovement && this.player.e((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) < 64.0D && !this.minecraftServer.a(worldserver, blockposition, this.player) && worldserver.getWorldBorder().a(blockposition)) {
-                this.player.playerInteractManager.interact(this.player, worldserver, itemstack, blockposition, enumdirection, packetplayinblockplace.d(), packetplayinblockplace.e(), packetplayinblockplace.f());
-            }
-
-            flag = true;
-        }
-
-        if (flag) {
-            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
-            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition.shift(enumdirection)));
+        } else if (this.teleportPos == null && this.player.e((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) < 64.0D && !this.minecraftServer.a(worldserver, blockposition, this.player) && worldserver.getWorldBorder().a(blockposition)) {
+            this.player.playerInteractManager.a(this.player, worldserver, itemstack, enumhand, blockposition, enumdirection, packetplayinuseitem.d(), packetplayinuseitem.e(), packetplayinuseitem.f());
         }
 
-        itemstack = this.player.inventory.getItemInHand();
+        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
+        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition.shift(enumdirection)));
+        itemstack = this.player.b(enumhand);
         if (itemstack != null && itemstack.count == 0) {
-            this.player.inventory.items[this.player.inventory.itemInHandIndex] = null;
+            this.player.a(enumhand, (ItemStack) null);
             itemstack = null;
         }
 
-        if (itemstack == null || itemstack.l() == 0) {
-            this.player.g = true;
-            this.player.inventory.items[this.player.inventory.itemInHandIndex] = ItemStack.b(this.player.inventory.items[this.player.inventory.itemInHandIndex]);
-            Slot slot = this.player.activeContainer.getSlot(this.player.inventory, this.player.inventory.itemInHandIndex);
+    }
+
+    public void a(PacketPlayInBlockPlace packetplayinblockplace) {
+        PlayerConnectionUtils.ensureMainThread(packetplayinblockplace, this, this.player.x());
+        WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
+        EnumHand enumhand = packetplayinblockplace.a();
+        ItemStack itemstack = this.player.b(enumhand);
 
-            this.player.activeContainer.b();
-            this.player.g = false;
-            if (!ItemStack.matches(this.player.inventory.getItemInHand(), packetplayinblockplace.getItemStack())) {
-                this.sendPacket(new PacketPlayOutSetSlot(this.player.activeContainer.windowId, slot.rawSlotIndex, this.player.inventory.getItemInHand()));
+        this.player.resetIdleTimer();
+        if (itemstack != null) {
+            this.player.playerInteractManager.a(this.player, worldserver, itemstack, enumhand);
+            itemstack = this.player.b(enumhand);
+            if (itemstack != null && itemstack.count == 0) {
+                this.player.a(enumhand, (ItemStack) null);
+                itemstack = null;
             }
-        }
 
+        }
     }
 
     public void a(PacketPlayInSpectate packetplayinspectate) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinspectate, this, this.player.u());
+        PlayerConnectionUtils.ensureMainThread(packetplayinspectate, this, this.player.x());
         if (this.player.isSpectator()) {
             Entity entity = null;
             WorldServer[] aworldserver = this.minecraftServer.worldServer;
@@ -467,13 +543,14 @@
 
             if (entity != null) {
                 this.player.setSpectatorTarget(this.player);
-                this.player.mount((Entity) null);
+                this.player.stopRiding();
                 if (entity.world != this.player.world) {
-                    WorldServer worldserver1 = this.player.u();
+                    WorldServer worldserver1 = this.player.x();
                     WorldServer worldserver2 = (WorldServer) entity.world;
 
                     this.player.dimension = entity.dimension;
                     this.sendPacket(new PacketPlayOutRespawn(this.player.dimension, worldserver1.getDifficulty(), worldserver1.getWorldData().getType(), this.player.playerInteractManager.getGameMode()));
+                    this.minecraftServer.getPlayerList().f(this.player);
                     worldserver1.removeEntity(this.player);
                     this.player.dead = false;
                     this.player.setPositionRotation(entity.locX, entity.locY, entity.locZ, entity.yaw, entity.pitch);
@@ -499,23 +576,33 @@
 
     public void a(PacketPlayInResourcePackStatus packetplayinresourcepackstatus) {}
 
+    public void a(PacketPlayInBoatMove packetplayinboatmove) {
+        PlayerConnectionUtils.ensureMainThread(packetplayinboatmove, this, this.player.x());
+        Entity entity = this.player.by();
+
+        if (entity instanceof EntityBoat) {
+            ((EntityBoat) entity).a(packetplayinboatmove.a(), packetplayinboatmove.b());
+        }
+
+    }
+
     public void a(IChatBaseComponent ichatbasecomponent) {
-        PlayerConnection.c.info(this.player.getName() + " lost connection: " + ichatbasecomponent);
-        this.minecraftServer.aH();
+        PlayerConnection.LOGGER.info(this.player.getName() + " lost connection: " + ichatbasecomponent);
+        this.minecraftServer.aC();
         ChatMessage chatmessage = new ChatMessage("multiplayer.player.left", new Object[] { this.player.getScoreboardDisplayName()});
 
         chatmessage.getChatModifier().setColor(EnumChatFormat.YELLOW);
         this.minecraftServer.getPlayerList().sendMessage(chatmessage);
-        this.player.q();
+        this.player.t();
         this.minecraftServer.getPlayerList().disconnect(this.player);
-        if (this.minecraftServer.T() && this.player.getName().equals(this.minecraftServer.S())) {
-            PlayerConnection.c.info("Stopping singleplayer server as player logged out");
+        if (this.minecraftServer.R() && this.player.getName().equals(this.minecraftServer.Q())) {
+            PlayerConnection.LOGGER.info("Stopping singleplayer server as player logged out");
             this.minecraftServer.safeShutdown();
         }
 
     }
 
-    public void sendPacket(final Packet packet) {
+    public void sendPacket(final Packet<?> packet) {
         if (packet instanceof PacketPlayOutChat) {
             PacketPlayOutChat packetplayoutchat = (PacketPlayOutChat) packet;
             EntityHuman.EnumChatVisibility entityhuman_enumchatvisibility = this.player.getChatFlags();
@@ -530,7 +617,7 @@
         }
 
         try {
-            this.networkManager.handle(packet);
+            this.networkManager.sendPacket(packet);
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Sending packet");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Packet being sent");
@@ -549,17 +636,17 @@
     }
 
     public void a(PacketPlayInHeldItemSlot packetplayinhelditemslot) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinhelditemslot, this, this.player.u());
+        PlayerConnectionUtils.ensureMainThread(packetplayinhelditemslot, this, this.player.x());
         if (packetplayinhelditemslot.a() >= 0 && packetplayinhelditemslot.a() < PlayerInventory.getHotbarSize()) {
             this.player.inventory.itemInHandIndex = packetplayinhelditemslot.a();
             this.player.resetIdleTimer();
         } else {
-            PlayerConnection.c.warn(this.player.getName() + " tried to set an invalid carried item");
+            PlayerConnection.LOGGER.warn(this.player.getName() + " tried to set an invalid carried item");
         }
     }
 
     public void a(PacketPlayInChat packetplayinchat) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinchat, this, this.player.u());
+        PlayerConnectionUtils.ensureMainThread(packetplayinchat, this, this.player.x());
         if (this.player.getChatFlags() == EntityHuman.EnumChatVisibility.HIDDEN) {
             ChatMessage chatmessage = new ChatMessage("chat.cannotSend", new Object[0]);
 
@@ -599,14 +686,16 @@
     }
 
     public void a(PacketPlayInArmAnimation packetplayinarmanimation) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinarmanimation, this, this.player.u());
+        PlayerConnectionUtils.ensureMainThread(packetplayinarmanimation, this, this.player.x());
         this.player.resetIdleTimer();
-        this.player.bw();
+        this.player.a(packetplayinarmanimation.a());
     }
 
     public void a(PacketPlayInEntityAction packetplayinentityaction) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinentityaction, this, this.player.u());
+        PlayerConnectionUtils.ensureMainThread(packetplayinentityaction, this, this.player.x());
         this.player.resetIdleTimer();
+        IJumpable ijumpable;
+
         switch (PlayerConnection.SyntheticClass_1.b[packetplayinentityaction.b().ordinal()]) {
         case 1:
             this.player.setSneaking(true);
@@ -626,18 +715,42 @@
 
         case 5:
             this.player.a(false, true, true);
-            this.checkMovement = false;
+            this.teleportPos = new Vec3D(this.player.locX, this.player.locY, this.player.locZ);
             break;
 
         case 6:
-            if (this.player.vehicle instanceof EntityHorse) {
-                ((EntityHorse) this.player.vehicle).v(packetplayinentityaction.c());
+            if (this.player.by() instanceof IJumpable) {
+                ijumpable = (IJumpable) this.player.by();
+                int i = packetplayinentityaction.c();
+
+                if (ijumpable.b() && i > 0) {
+                    ijumpable.b(i);
+                }
             }
             break;
 
         case 7:
-            if (this.player.vehicle instanceof EntityHorse) {
-                ((EntityHorse) this.player.vehicle).g((EntityHuman) this.player);
+            if (this.player.by() instanceof IJumpable) {
+                ijumpable = (IJumpable) this.player.by();
+                ijumpable.r_();
+            }
+            break;
+
+        case 8:
+            if (this.player.by() instanceof EntityHorse) {
+                ((EntityHorse) this.player.by()).f((EntityHuman) this.player);
+            }
+            break;
+
+        case 9:
+            if (!this.player.onGround && this.player.motY < 0.0D && !this.player.cB() && !this.player.isInWater()) {
+                ItemStack itemstack = this.player.getEquipment(EnumItemSlot.CHEST);
+
+                if (itemstack != null && itemstack.getItem() == Items.cR && ItemElytra.d(itemstack)) {
+                    this.player.M();
+                }
+            } else {
+                this.player.N();
             }
             break;
 
@@ -648,7 +761,7 @@
     }
 
     public void a(PacketPlayInUseEntity packetplayinuseentity) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinuseentity, this, this.player.u());
+        PlayerConnectionUtils.ensureMainThread(packetplayinuseentity, this, this.player.x());
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         Entity entity = packetplayinuseentity.a((World) worldserver);
 
@@ -662,10 +775,17 @@
             }
 
             if (this.player.h(entity) < d0) {
+                EnumHand enumhand;
+                ItemStack itemstack;
+
                 if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
-                    this.player.u(entity);
+                    enumhand = packetplayinuseentity.b();
+                    itemstack = this.player.b(enumhand);
+                    this.player.a(entity, itemstack, enumhand);
                 } else if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
-                    entity.a((EntityHuman) this.player, packetplayinuseentity.b());
+                    enumhand = packetplayinuseentity.b();
+                    itemstack = this.player.b(enumhand);
+                    entity.a((EntityHuman) this.player, packetplayinuseentity.c(), itemstack, enumhand);
                 } else if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.ATTACK) {
                     if (entity instanceof EntityItem || entity instanceof EntityExperienceOrb || entity instanceof EntityArrow || entity == this.player) {
                         this.disconnect("Attempting to attack an invalid entity");
@@ -681,30 +801,25 @@
     }
 
     public void a(PacketPlayInClientCommand packetplayinclientcommand) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinclientcommand, this, this.player.u());
+        PlayerConnectionUtils.ensureMainThread(packetplayinclientcommand, this, this.player.x());
         this.player.resetIdleTimer();
         PacketPlayInClientCommand.EnumClientCommand packetplayinclientcommand_enumclientcommand = packetplayinclientcommand.a();
 
         switch (PlayerConnection.SyntheticClass_1.c[packetplayinclientcommand_enumclientcommand.ordinal()]) {
         case 1:
             if (this.player.viewingCredits) {
+                this.player.viewingCredits = false;
                 this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, 0, true);
-            } else if (this.player.u().getWorldData().isHardcore()) {
-                if (this.minecraftServer.T() && this.player.getName().equals(this.minecraftServer.S())) {
-                    this.player.playerConnection.disconnect("You have died. Game over, man, it\'s game over!");
-                    this.minecraftServer.aa();
-                } else {
-                    GameProfileBanEntry gameprofilebanentry = new GameProfileBanEntry(this.player.getProfile(), (Date) null, "(You just lost the game)", (Date) null, "Death in Hardcore");
-
-                    this.minecraftServer.getPlayerList().getProfileBans().add(gameprofilebanentry);
-                    this.player.playerConnection.disconnect("You have died. Game over, man, it\'s game over!");
-                }
             } else {
                 if (this.player.getHealth() > 0.0F) {
                     return;
                 }
 
                 this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, 0, false);
+                if (this.minecraftServer.isHardcore()) {
+                    this.player.a(WorldSettings.EnumGamemode.SPECTATOR);
+                    this.player.x().getGameRules().set("spectatorsGenerateChunks", "false");
+                }
             }
             break;
 
@@ -719,12 +834,12 @@
     }
 
     public void a(PacketPlayInCloseWindow packetplayinclosewindow) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinclosewindow, this, this.player.u());
-        this.player.p();
+        PlayerConnectionUtils.ensureMainThread(packetplayinclosewindow, this, this.player.x());
+        this.player.s();
     }
 
     public void a(PacketPlayInWindowClick packetplayinwindowclick) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinwindowclick, this, this.player.u());
+        PlayerConnectionUtils.ensureMainThread(packetplayinwindowclick, this, this.player.x());
         this.player.resetIdleTimer();
         if (this.player.activeContainer.windowId == packetplayinwindowclick.a() && this.player.activeContainer.c(this.player)) {
             if (this.player.isSpectator()) {
@@ -736,22 +851,25 @@
 
                 this.player.a(this.player.activeContainer, (List) arraylist);
             } else {
-                ItemStack itemstack = this.player.activeContainer.clickItem(packetplayinwindowclick.b(), packetplayinwindowclick.c(), packetplayinwindowclick.f(), this.player);
+                ItemStack itemstack = this.player.activeContainer.a(packetplayinwindowclick.b(), packetplayinwindowclick.c(), packetplayinwindowclick.f(), this.player);
 
                 if (ItemStack.matches(packetplayinwindowclick.e(), itemstack)) {
                     this.player.playerConnection.sendPacket(new PacketPlayOutTransaction(packetplayinwindowclick.a(), packetplayinwindowclick.d(), true));
-                    this.player.g = true;
+                    this.player.f = true;
                     this.player.activeContainer.b();
                     this.player.broadcastCarriedItem();
-                    this.player.g = false;
+                    this.player.f = false;
                 } else {
-                    this.n.a(this.player.activeContainer.windowId, Short.valueOf(packetplayinwindowclick.d()));
+                    this.k.a(this.player.activeContainer.windowId, Short.valueOf(packetplayinwindowclick.d()));
                     this.player.playerConnection.sendPacket(new PacketPlayOutTransaction(packetplayinwindowclick.a(), packetplayinwindowclick.d(), false));
                     this.player.activeContainer.a(this.player, false);
                     ArrayList arraylist1 = Lists.newArrayList();
 
                     for (int j = 0; j < this.player.activeContainer.c.size(); ++j) {
-                        arraylist1.add(((Slot) this.player.activeContainer.c.get(j)).getItem());
+                        ItemStack itemstack1 = ((Slot) this.player.activeContainer.c.get(j)).getItem();
+                        ItemStack itemstack2 = itemstack1 != null && itemstack1.count > 0 ? itemstack1 : null;
+
+                        arraylist1.add(itemstack2);
                     }
 
                     this.player.a(this.player.activeContainer, (List) arraylist1);
@@ -762,7 +880,7 @@
     }
 
     public void a(PacketPlayInEnchantItem packetplayinenchantitem) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinenchantitem, this, this.player.u());
+        PlayerConnectionUtils.ensureMainThread(packetplayinenchantitem, this, this.player.x());
         this.player.resetIdleTimer();
         if (this.player.activeContainer.windowId == packetplayinenchantitem.a() && this.player.activeContainer.c(this.player) && !this.player.isSpectator()) {
             this.player.activeContainer.a(this.player, packetplayinenchantitem.b());
@@ -772,7 +890,7 @@
     }
 
     public void a(PacketPlayInSetCreativeSlot packetplayinsetcreativeslot) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinsetcreativeslot, this, this.player.u());
+        PlayerConnectionUtils.ensureMainThread(packetplayinsetcreativeslot, this, this.player.x());
         if (this.player.playerInteractManager.isCreative()) {
             boolean flag = packetplayinsetcreativeslot.a() < 0;
             ItemStack itemstack = packetplayinsetcreativeslot.getItemStack();
@@ -787,7 +905,7 @@
                     if (tileentity != null) {
                         NBTTagCompound nbttagcompound1 = new NBTTagCompound();
 
-                        tileentity.b(nbttagcompound1);
+                        tileentity.save(nbttagcompound1);
                         nbttagcompound1.remove("x");
                         nbttagcompound1.remove("y");
                         nbttagcompound1.remove("z");
@@ -796,7 +914,7 @@
                 }
             }
 
-            boolean flag1 = packetplayinsetcreativeslot.a() >= 1 && packetplayinsetcreativeslot.a() < 36 + PlayerInventory.getHotbarSize();
+            boolean flag1 = packetplayinsetcreativeslot.a() >= 1 && packetplayinsetcreativeslot.a() <= 45;
             boolean flag2 = itemstack == null || itemstack.getItem() != null;
             boolean flag3 = itemstack == null || itemstack.getData() >= 0 && itemstack.count <= 64 && itemstack.count > 0;
 
@@ -808,8 +926,8 @@
                 }
 
                 this.player.defaultContainer.a(this.player, true);
-            } else if (flag && flag2 && flag3 && this.m < 200) {
-                this.m += 20;
+            } else if (flag && flag2 && flag3 && this.j < 200) {
+                this.j += 20;
                 EntityItem entityitem = this.player.drop(itemstack, true);
 
                 if (entityitem != null) {
@@ -821,8 +939,8 @@
     }
 
     public void a(PacketPlayInTransaction packetplayintransaction) {
-        PlayerConnectionUtils.ensureMainThread(packetplayintransaction, this, this.player.u());
-        Short oshort = (Short) this.n.get(this.player.activeContainer.windowId);
+        PlayerConnectionUtils.ensureMainThread(packetplayintransaction, this, this.player.x());
+        Short oshort = (Short) this.k.get(this.player.activeContainer.windowId);
 
         if (oshort != null && packetplayintransaction.b() == oshort.shortValue() && this.player.activeContainer.windowId == packetplayintransaction.a() && !this.player.activeContainer.c(this.player) && !this.player.isSpectator()) {
             this.player.activeContainer.a(this.player, true);
@@ -831,12 +949,13 @@
     }
 
     public void a(PacketPlayInUpdateSign packetplayinupdatesign) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinupdatesign, this, this.player.u());
+        PlayerConnectionUtils.ensureMainThread(packetplayinupdatesign, this, this.player.x());
         this.player.resetIdleTimer();
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         BlockPosition blockposition = packetplayinupdatesign.a();
 
         if (worldserver.isLoaded(blockposition)) {
+            IBlockData iblockdata = worldserver.getType(blockposition);
             TileEntity tileentity = worldserver.getTileEntity(blockposition);
 
             if (!(tileentity instanceof TileEntitySign)) {
@@ -850,40 +969,40 @@
                 return;
             }
 
-            IChatBaseComponent[] aichatbasecomponent = packetplayinupdatesign.b();
+            String[] astring = packetplayinupdatesign.b();
 
-            for (int i = 0; i < aichatbasecomponent.length; ++i) {
-                tileentitysign.lines[i] = new ChatComponentText(EnumChatFormat.a(aichatbasecomponent[i].c()));
+            for (int i = 0; i < astring.length; ++i) {
+                tileentitysign.lines[i] = new ChatComponentText(EnumChatFormat.a(astring[i]));
             }
 
             tileentitysign.update();
-            worldserver.notify(blockposition);
+            worldserver.notify(blockposition, iblockdata, iblockdata, 3);
         }
 
     }
 
     public void a(PacketPlayInKeepAlive packetplayinkeepalive) {
-        if (packetplayinkeepalive.a() == this.i) {
-            int i = (int) (this.d() - this.j);
+        if (packetplayinkeepalive.a() == this.f) {
+            int i = (int) (this.e() - this.g);
 
             this.player.ping = (this.player.ping * 3 + i) / 4;
         }
 
     }
 
-    private long d() {
+    private long e() {
         return System.nanoTime() / 1000000L;
     }
 
     public void a(PacketPlayInAbilities packetplayinabilities) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinabilities, this, this.player.u());
+        PlayerConnectionUtils.ensureMainThread(packetplayinabilities, this, this.player.x());
         this.player.abilities.isFlying = packetplayinabilities.isFlying() && this.player.abilities.canFly;
     }
 
     public void a(PacketPlayInTabComplete packetplayintabcomplete) {
-        PlayerConnectionUtils.ensureMainThread(packetplayintabcomplete, this, this.player.u());
+        PlayerConnectionUtils.ensureMainThread(packetplayintabcomplete, this, this.player.x());
         ArrayList arraylist = Lists.newArrayList();
-        Iterator iterator = this.minecraftServer.tabCompleteCommand(this.player, packetplayintabcomplete.a(), packetplayintabcomplete.b()).iterator();
+        Iterator iterator = this.minecraftServer.tabCompleteCommand(this.player, packetplayintabcomplete.a(), packetplayintabcomplete.b(), packetplayintabcomplete.c()).iterator();
 
         while (iterator.hasNext()) {
             String s = (String) iterator.next();
@@ -895,21 +1014,22 @@
     }
 
     public void a(PacketPlayInSettings packetplayinsettings) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinsettings, this, this.player.u());
+        PlayerConnectionUtils.ensureMainThread(packetplayinsettings, this, this.player.x());
         this.player.a(packetplayinsettings);
     }
 
     public void a(PacketPlayInCustomPayload packetplayincustompayload) {
-        PlayerConnectionUtils.ensureMainThread(packetplayincustompayload, this, this.player.u());
+        PlayerConnectionUtils.ensureMainThread(packetplayincustompayload, this, this.player.x());
+        String s = packetplayincustompayload.a();
         PacketDataSerializer packetdataserializer;
         ItemStack itemstack;
         ItemStack itemstack1;
 
-        if ("MC|BEdit".equals(packetplayincustompayload.a())) {
+        if ("MC|BEdit".equals(s)) {
             packetdataserializer = new PacketDataSerializer(Unpooled.wrappedBuffer(packetplayincustompayload.b()));
 
             try {
-                itemstack = packetdataserializer.i();
+                itemstack = packetdataserializer.k();
                 if (itemstack == null) {
                     return;
                 }
@@ -918,7 +1038,7 @@
                     throw new IOException("Invalid book tag!");
                 }
 
-                itemstack1 = this.player.inventory.getItemInHand();
+                itemstack1 = this.player.getItemInMainHand();
                 if (itemstack1 != null) {
                     if (itemstack.getItem() == Items.WRITABLE_BOOK && itemstack.getItem() == itemstack1.getItem()) {
                         itemstack1.a("pages", (NBTBase) itemstack.getTag().getList("pages", 8));
@@ -927,133 +1047,294 @@
                     return;
                 }
             } catch (Exception exception) {
-                PlayerConnection.c.error("Couldn\'t handle book info", exception);
+                PlayerConnection.LOGGER.error("Couldn\'t handle book info", exception);
                 return;
             } finally {
                 packetdataserializer.release();
             }
 
             return;
-        } else if ("MC|BSign".equals(packetplayincustompayload.a())) {
-            packetdataserializer = new PacketDataSerializer(Unpooled.wrappedBuffer(packetplayincustompayload.b()));
+        } else {
+            String s1;
 
-            try {
-                itemstack = packetdataserializer.i();
-                if (itemstack == null) {
-                    return;
-                }
+            if ("MC|BSign".equals(s)) {
+                packetdataserializer = new PacketDataSerializer(Unpooled.wrappedBuffer(packetplayincustompayload.b()));
 
-                if (!ItemWrittenBook.b(itemstack.getTag())) {
-                    throw new IOException("Invalid book tag!");
-                }
+                try {
+                    itemstack = packetdataserializer.k();
+                    if (itemstack == null) {
+                        return;
+                    }
 
-                itemstack1 = this.player.inventory.getItemInHand();
-                if (itemstack1 != null) {
-                    if (itemstack.getItem() == Items.WRITTEN_BOOK && itemstack1.getItem() == Items.WRITABLE_BOOK) {
-                        itemstack1.a("author", (NBTBase) (new NBTTagString(this.player.getName())));
-                        itemstack1.a("title", (NBTBase) (new NBTTagString(itemstack.getTag().getString("title"))));
-                        itemstack1.a("pages", (NBTBase) itemstack.getTag().getList("pages", 8));
-                        itemstack1.setItem(Items.WRITTEN_BOOK);
+                    if (!ItemWrittenBook.b(itemstack.getTag())) {
+                        throw new IOException("Invalid book tag!");
                     }
 
+                    itemstack1 = this.player.getItemInMainHand();
+                    if (itemstack1 != null) {
+                        if (itemstack.getItem() == Items.WRITABLE_BOOK && itemstack1.getItem() == Items.WRITABLE_BOOK) {
+                            itemstack1.a("author", (NBTBase) (new NBTTagString(this.player.getName())));
+                            itemstack1.a("title", (NBTBase) (new NBTTagString(itemstack.getTag().getString("title"))));
+                            NBTTagList nbttaglist = itemstack.getTag().getList("pages", 8);
+
+                            for (int i = 0; i < nbttaglist.size(); ++i) {
+                                s1 = nbttaglist.getString(i);
+                                ChatComponentText chatcomponenttext = new ChatComponentText(s1);
+
+                                s1 = IChatBaseComponent.ChatSerializer.a((IChatBaseComponent) chatcomponenttext);
+                                nbttaglist.a(i, new NBTTagString(s1));
+                            }
+
+                            itemstack1.a("pages", (NBTBase) nbttaglist);
+                            itemstack1.setItem(Items.WRITTEN_BOOK);
+                        }
+
+                        return;
+                    }
+                } catch (Exception exception1) {
+                    PlayerConnection.LOGGER.error("Couldn\'t sign book", exception1);
                     return;
+                } finally {
+                    packetdataserializer.release();
                 }
-            } catch (Exception exception1) {
-                PlayerConnection.c.error("Couldn\'t sign book", exception1);
-                return;
-            } finally {
-                packetdataserializer.release();
-            }
 
-            return;
-        } else if ("MC|TrSel".equals(packetplayincustompayload.a())) {
-            try {
-                int i = packetplayincustompayload.b().readInt();
-                Container container = this.player.activeContainer;
+                return;
+            } else if ("MC|TrSel".equals(s)) {
+                try {
+                    int j = packetplayincustompayload.b().readInt();
+                    Container container = this.player.activeContainer;
 
-                if (container instanceof ContainerMerchant) {
-                    ((ContainerMerchant) container).d(i);
+                    if (container instanceof ContainerMerchant) {
+                        ((ContainerMerchant) container).d(j);
+                    }
+                } catch (Exception exception2) {
+                    PlayerConnection.LOGGER.error("Couldn\'t select trade", exception2);
                 }
-            } catch (Exception exception2) {
-                PlayerConnection.c.error("Couldn\'t select trade", exception2);
-            }
-        } else if ("MC|AdvCdm".equals(packetplayincustompayload.a())) {
-            if (!this.minecraftServer.getEnableCommandBlock()) {
-                this.player.sendMessage(new ChatMessage("advMode.notEnabled", new Object[0]));
-            } else if (this.player.a(2, "") && this.player.abilities.canInstantlyBuild) {
-                packetdataserializer = packetplayincustompayload.b();
+            } else {
+                TileEntity tileentity;
 
-                try {
-                    byte b0 = packetdataserializer.readByte();
-                    CommandBlockListenerAbstract commandblocklistenerabstract = null;
+                if ("MC|AdvCmd".equals(s)) {
+                    if (!this.minecraftServer.getEnableCommandBlock()) {
+                        this.player.sendMessage(new ChatMessage("advMode.notEnabled", new Object[0]));
+                        return;
+                    }
 
-                    if (b0 == 0) {
-                        TileEntity tileentity = this.player.world.getTileEntity(new BlockPosition(packetdataserializer.readInt(), packetdataserializer.readInt(), packetdataserializer.readInt()));
+                    if (!this.player.a(2, "") || !this.player.abilities.canInstantlyBuild) {
+                        this.player.sendMessage(new ChatMessage("advMode.notAllowed", new Object[0]));
+                        return;
+                    }
 
-                        if (tileentity instanceof TileEntityCommand) {
-                            commandblocklistenerabstract = ((TileEntityCommand) tileentity).getCommandBlock();
-                        }
-                    } else if (b0 == 1) {
-                        Entity entity = this.player.world.a(packetdataserializer.readInt());
+                    packetdataserializer = packetplayincustompayload.b();
+
+                    try {
+                        byte b0 = packetdataserializer.readByte();
+                        CommandBlockListenerAbstract commandblocklistenerabstract = null;
+
+                        if (b0 == 0) {
+                            tileentity = this.player.world.getTileEntity(new BlockPosition(packetdataserializer.readInt(), packetdataserializer.readInt(), packetdataserializer.readInt()));
+                            if (tileentity instanceof TileEntityCommand) {
+                                commandblocklistenerabstract = ((TileEntityCommand) tileentity).getCommandBlock();
+                            }
+                        } else if (b0 == 1) {
+                            Entity entity = this.player.world.getEntity(packetdataserializer.readInt());
 
-                        if (entity instanceof EntityMinecartCommandBlock) {
-                            commandblocklistenerabstract = ((EntityMinecartCommandBlock) entity).getCommandBlock();
+                            if (entity instanceof EntityMinecartCommandBlock) {
+                                commandblocklistenerabstract = ((EntityMinecartCommandBlock) entity).getCommandBlock();
+                            }
                         }
-                    }
 
-                    String s = packetdataserializer.c(packetdataserializer.readableBytes());
-                    boolean flag = packetdataserializer.readBoolean();
+                        String s2 = packetdataserializer.c(packetdataserializer.readableBytes());
+                        boolean flag = packetdataserializer.readBoolean();
+
+                        if (commandblocklistenerabstract != null) {
+                            commandblocklistenerabstract.setCommand(s2);
+                            commandblocklistenerabstract.a(flag);
+                            if (!flag) {
+                                commandblocklistenerabstract.b((IChatBaseComponent) null);
+                            }
 
-                    if (commandblocklistenerabstract != null) {
-                        commandblocklistenerabstract.setCommand(s);
-                        commandblocklistenerabstract.a(flag);
-                        if (!flag) {
-                            commandblocklistenerabstract.b((IChatBaseComponent) null);
+                            commandblocklistenerabstract.i();
+                            this.player.sendMessage(new ChatMessage("advMode.setCommand.success", new Object[] { s2}));
                         }
+                    } catch (Exception exception3) {
+                        PlayerConnection.LOGGER.error("Couldn\'t set command block", exception3);
+                    } finally {
+                        packetdataserializer.release();
+                    }
+                } else if ("MC|AutoCmd".equals(s)) {
+                    if (!this.minecraftServer.getEnableCommandBlock()) {
+                        this.player.sendMessage(new ChatMessage("advMode.notEnabled", new Object[0]));
+                        return;
+                    }
 
-                        commandblocklistenerabstract.h();
-                        this.player.sendMessage(new ChatMessage("advMode.setCommand.success", new Object[] { s}));
+                    if (!this.player.a(2, "") || !this.player.abilities.canInstantlyBuild) {
+                        this.player.sendMessage(new ChatMessage("advMode.notAllowed", new Object[0]));
+                        return;
                     }
-                } catch (Exception exception3) {
-                    PlayerConnection.c.error("Couldn\'t set command block", exception3);
-                } finally {
-                    packetdataserializer.release();
-                }
-            } else {
-                this.player.sendMessage(new ChatMessage("advMode.notAllowed", new Object[0]));
-            }
-        } else if ("MC|Beacon".equals(packetplayincustompayload.a())) {
-            if (this.player.activeContainer instanceof ContainerBeacon) {
-                try {
+
                     packetdataserializer = packetplayincustompayload.b();
-                    int j = packetdataserializer.readInt();
-                    int k = packetdataserializer.readInt();
-                    ContainerBeacon containerbeacon = (ContainerBeacon) this.player.activeContainer;
-                    Slot slot = containerbeacon.getSlot(0);
 
-                    if (slot.hasItem()) {
-                        slot.a(1);
-                        IInventory iinventory = containerbeacon.e();
+                    try {
+                        CommandBlockListenerAbstract commandblocklistenerabstract1 = null;
+                        TileEntityCommand tileentitycommand = null;
+                        BlockPosition blockposition = new BlockPosition(packetdataserializer.readInt(), packetdataserializer.readInt(), packetdataserializer.readInt());
+                        TileEntity tileentity1 = this.player.world.getTileEntity(blockposition);
+
+                        if (tileentity1 instanceof TileEntityCommand) {
+                            tileentitycommand = (TileEntityCommand) tileentity1;
+                            commandblocklistenerabstract1 = tileentitycommand.getCommandBlock();
+                        }
+
+                        s1 = packetdataserializer.c(packetdataserializer.readableBytes());
+                        boolean flag1 = packetdataserializer.readBoolean();
+                        TileEntityCommand.Type tileentitycommand_type = TileEntityCommand.Type.valueOf(packetdataserializer.c(16));
+                        boolean flag2 = packetdataserializer.readBoolean();
+                        boolean flag3 = packetdataserializer.readBoolean();
+
+                        if (commandblocklistenerabstract1 != null) {
+                            EnumDirection enumdirection = (EnumDirection) this.player.world.getType(blockposition).get(BlockCommand.a);
+                            IBlockData iblockdata;
+
+                            switch (PlayerConnection.SyntheticClass_1.d[tileentitycommand_type.ordinal()]) {
+                            case 1:
+                                iblockdata = Blocks.dd.getBlockData();
+                                this.player.world.setTypeAndData(blockposition, iblockdata.set(BlockCommand.a, enumdirection).set(BlockCommand.b, Boolean.valueOf(flag2)), 2);
+                                break;
+
+                            case 2:
+                                iblockdata = Blocks.dc.getBlockData();
+                                this.player.world.setTypeAndData(blockposition, iblockdata.set(BlockCommand.a, enumdirection).set(BlockCommand.b, Boolean.valueOf(flag2)), 2);
+                                break;
+
+                            case 3:
+                                iblockdata = Blocks.COMMAND_BLOCK.getBlockData();
+                                this.player.world.setTypeAndData(blockposition, iblockdata.set(BlockCommand.a, enumdirection).set(BlockCommand.b, Boolean.valueOf(flag2)), 2);
+                            }
+
+                            tileentity1.z();
+                            this.player.world.setTileEntity(blockposition, tileentity1);
+                            commandblocklistenerabstract1.setCommand(s1);
+                            commandblocklistenerabstract1.a(flag1);
+                            if (!flag1) {
+                                commandblocklistenerabstract1.b((IChatBaseComponent) null);
+                            }
 
-                        iinventory.b(1, j);
-                        iinventory.b(2, k);
-                        iinventory.update();
+                            tileentitycommand.b(flag3);
+                            commandblocklistenerabstract1.i();
+                            if (!UtilColor.b(s1)) {
+                                this.player.sendMessage(new ChatMessage("advMode.setCommand.success", new Object[] { s1}));
+                            }
+                        }
+                    } catch (Exception exception4) {
+                        PlayerConnection.LOGGER.error("Couldn\'t set command block", exception4);
+                    } finally {
+                        packetdataserializer.release();
                     }
-                } catch (Exception exception4) {
-                    PlayerConnection.c.error("Couldn\'t set beacon", exception4);
-                }
-            }
-        } else if ("MC|ItemName".equals(packetplayincustompayload.a()) && this.player.activeContainer instanceof ContainerAnvil) {
-            ContainerAnvil containeranvil = (ContainerAnvil) this.player.activeContainer;
+                } else {
+                    int k;
+
+                    if ("MC|Beacon".equals(s)) {
+                        if (this.player.activeContainer instanceof ContainerBeacon) {
+                            try {
+                                packetdataserializer = packetplayincustompayload.b();
+                                k = packetdataserializer.readInt();
+                                int l = packetdataserializer.readInt();
+                                ContainerBeacon containerbeacon = (ContainerBeacon) this.player.activeContainer;
+                                Slot slot = containerbeacon.getSlot(0);
+
+                                if (slot.hasItem()) {
+                                    slot.a(1);
+                                    IInventory iinventory = containerbeacon.e();
+
+                                    iinventory.setProperty(1, k);
+                                    iinventory.setProperty(2, l);
+                                    iinventory.update();
+                                }
+                            } catch (Exception exception5) {
+                                PlayerConnection.LOGGER.error("Couldn\'t set beacon", exception5);
+                            }
+                        }
+                    } else if ("MC|ItemName".equals(s)) {
+                        if (this.player.activeContainer instanceof ContainerAnvil) {
+                            ContainerAnvil containeranvil = (ContainerAnvil) this.player.activeContainer;
+
+                            if (packetplayincustompayload.b() != null && packetplayincustompayload.b().readableBytes() >= 1) {
+                                String s3 = SharedConstants.a(packetplayincustompayload.b().c(32767));
+
+                                if (s3.length() <= 30) {
+                                    containeranvil.a(s3);
+                                }
+                            } else {
+                                containeranvil.a("");
+                            }
+                        }
+                    } else if ("MC|Struct".equals(s)) {
+                        packetdataserializer = packetplayincustompayload.b();
 
-            if (packetplayincustompayload.b() != null && packetplayincustompayload.b().readableBytes() >= 1) {
-                String s1 = SharedConstants.a(packetplayincustompayload.b().c(32767));
+                        try {
+                            if (this.player.a(4, "") && this.player.abilities.canInstantlyBuild) {
+                                BlockPosition blockposition1 = new BlockPosition(packetdataserializer.readInt(), packetdataserializer.readInt(), packetdataserializer.readInt());
+                                IBlockData iblockdata1 = this.player.world.getType(blockposition1);
+
+                                tileentity = this.player.world.getTileEntity(blockposition1);
+                                if (tileentity instanceof TileEntityStructure) {
+                                    TileEntityStructure tileentitystructure = (TileEntityStructure) tileentity;
+                                    byte b1 = packetdataserializer.readByte();
+                                    String s4 = packetdataserializer.c(32);
+
+                                    tileentitystructure.a(TileEntityStructure.UsageMode.valueOf(s4));
+                                    tileentitystructure.a(packetdataserializer.c(64));
+                                    tileentitystructure.b(new BlockPosition(packetdataserializer.readInt(), packetdataserializer.readInt(), packetdataserializer.readInt()));
+                                    tileentitystructure.c(new BlockPosition(packetdataserializer.readInt(), packetdataserializer.readInt(), packetdataserializer.readInt()));
+                                    String s5 = packetdataserializer.c(32);
+
+                                    tileentitystructure.a(EnumBlockMirror.valueOf(s5));
+                                    String s6 = packetdataserializer.c(32);
+
+                                    tileentitystructure.a(EnumBlockRotation.valueOf(s6));
+                                    tileentitystructure.b(packetdataserializer.c(128));
+                                    tileentitystructure.a(packetdataserializer.readBoolean());
+                                    if (b1 == 2) {
+                                        if (tileentitystructure.m()) {
+                                            this.player.b((IChatBaseComponent) (new ChatComponentText("Structure saved")));
+                                        } else {
+                                            this.player.b((IChatBaseComponent) (new ChatComponentText("Structure NOT saved")));
+                                        }
+                                    } else if (b1 == 3) {
+                                        if (tileentitystructure.n()) {
+                                            this.player.b((IChatBaseComponent) (new ChatComponentText("Structure loaded")));
+                                        } else {
+                                            this.player.b((IChatBaseComponent) (new ChatComponentText("Structure prepared")));
+                                        }
+                                    } else if (b1 == 4 && tileentitystructure.l()) {
+                                        this.player.b((IChatBaseComponent) (new ChatComponentText("Size detected")));
+                                    }
+
+                                    tileentitystructure.update();
+                                    this.player.world.notify(blockposition1, iblockdata1, iblockdata1, 3);
+                                }
+                            }
+                        } catch (Exception exception6) {
+                            PlayerConnection.LOGGER.error("Couldn\'t set structure block", exception6);
+                        } finally {
+                            packetdataserializer.release();
+                        }
+                    } else if ("MC|PickItem".equals(s)) {
+                        packetdataserializer = packetplayincustompayload.b();
 
-                if (s1.length() <= 30) {
-                    containeranvil.a(s1);
+                        try {
+                            k = packetdataserializer.g();
+                            this.player.inventory.d(k);
+                            this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(-2, this.player.inventory.itemInHandIndex, this.player.inventory.getItem(this.player.inventory.itemInHandIndex)));
+                            this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(-2, k, this.player.inventory.getItem(k)));
+                            this.player.playerConnection.sendPacket(new PacketPlayOutHeldItemSlot(this.player.inventory.itemInHandIndex));
+                        } catch (Exception exception7) {
+                            PlayerConnection.LOGGER.error("Couldn\'t pick item", exception7);
+                        } finally {
+                            packetdataserializer.release();
+                        }
+                    }
                 }
-            } else {
-                containeranvil.a("");
             }
         }
 
@@ -1063,109 +1344,148 @@
 
         static final int[] a;
         static final int[] b;
-        static final int[] c = new int[PacketPlayInClientCommand.EnumClientCommand.values().length];
+        static final int[] c;
+        static final int[] d = new int[TileEntityCommand.Type.values().length];
 
         static {
             try {
-                PlayerConnection.SyntheticClass_1.c[PacketPlayInClientCommand.EnumClientCommand.PERFORM_RESPAWN.ordinal()] = 1;
+                PlayerConnection.SyntheticClass_1.d[TileEntityCommand.Type.SEQUENCE.ordinal()] = 1;
             } catch (NoSuchFieldError nosuchfielderror) {
                 ;
             }
 
             try {
-                PlayerConnection.SyntheticClass_1.c[PacketPlayInClientCommand.EnumClientCommand.REQUEST_STATS.ordinal()] = 2;
+                PlayerConnection.SyntheticClass_1.d[TileEntityCommand.Type.AUTO.ordinal()] = 2;
             } catch (NoSuchFieldError nosuchfielderror1) {
                 ;
             }
 
             try {
-                PlayerConnection.SyntheticClass_1.c[PacketPlayInClientCommand.EnumClientCommand.OPEN_INVENTORY_ACHIEVEMENT.ordinal()] = 3;
+                PlayerConnection.SyntheticClass_1.d[TileEntityCommand.Type.REDSTONE.ordinal()] = 3;
             } catch (NoSuchFieldError nosuchfielderror2) {
                 ;
             }
 
-            b = new int[PacketPlayInEntityAction.EnumPlayerAction.values().length];
+            c = new int[PacketPlayInClientCommand.EnumClientCommand.values().length];
 
             try {
-                PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.START_SNEAKING.ordinal()] = 1;
+                PlayerConnection.SyntheticClass_1.c[PacketPlayInClientCommand.EnumClientCommand.PERFORM_RESPAWN.ordinal()] = 1;
             } catch (NoSuchFieldError nosuchfielderror3) {
                 ;
             }
 
             try {
-                PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.STOP_SNEAKING.ordinal()] = 2;
+                PlayerConnection.SyntheticClass_1.c[PacketPlayInClientCommand.EnumClientCommand.REQUEST_STATS.ordinal()] = 2;
             } catch (NoSuchFieldError nosuchfielderror4) {
                 ;
             }
 
             try {
-                PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.START_SPRINTING.ordinal()] = 3;
+                PlayerConnection.SyntheticClass_1.c[PacketPlayInClientCommand.EnumClientCommand.OPEN_INVENTORY_ACHIEVEMENT.ordinal()] = 3;
             } catch (NoSuchFieldError nosuchfielderror5) {
                 ;
             }
 
+            b = new int[PacketPlayInEntityAction.EnumPlayerAction.values().length];
+
             try {
-                PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.STOP_SPRINTING.ordinal()] = 4;
+                PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.START_SNEAKING.ordinal()] = 1;
             } catch (NoSuchFieldError nosuchfielderror6) {
                 ;
             }
 
             try {
-                PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.STOP_SLEEPING.ordinal()] = 5;
+                PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.STOP_SNEAKING.ordinal()] = 2;
             } catch (NoSuchFieldError nosuchfielderror7) {
                 ;
             }
 
             try {
-                PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.RIDING_JUMP.ordinal()] = 6;
+                PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.START_SPRINTING.ordinal()] = 3;
             } catch (NoSuchFieldError nosuchfielderror8) {
                 ;
             }
 
             try {
-                PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.OPEN_INVENTORY.ordinal()] = 7;
+                PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.STOP_SPRINTING.ordinal()] = 4;
             } catch (NoSuchFieldError nosuchfielderror9) {
                 ;
             }
 
-            a = new int[PacketPlayInBlockDig.EnumPlayerDigType.values().length];
-
             try {
-                PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.DROP_ITEM.ordinal()] = 1;
+                PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.STOP_SLEEPING.ordinal()] = 5;
             } catch (NoSuchFieldError nosuchfielderror10) {
                 ;
             }
 
             try {
-                PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.DROP_ALL_ITEMS.ordinal()] = 2;
+                PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.START_RIDING_JUMP.ordinal()] = 6;
             } catch (NoSuchFieldError nosuchfielderror11) {
                 ;
             }
 
             try {
-                PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.RELEASE_USE_ITEM.ordinal()] = 3;
+                PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.STOP_RIDING_JUMP.ordinal()] = 7;
             } catch (NoSuchFieldError nosuchfielderror12) {
                 ;
             }
 
             try {
-                PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.START_DESTROY_BLOCK.ordinal()] = 4;
+                PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.OPEN_INVENTORY.ordinal()] = 8;
             } catch (NoSuchFieldError nosuchfielderror13) {
                 ;
             }
 
             try {
-                PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.ABORT_DESTROY_BLOCK.ordinal()] = 5;
+                PlayerConnection.SyntheticClass_1.b[PacketPlayInEntityAction.EnumPlayerAction.START_FALL_FLYING.ordinal()] = 9;
             } catch (NoSuchFieldError nosuchfielderror14) {
                 ;
             }
 
+            a = new int[PacketPlayInBlockDig.EnumPlayerDigType.values().length];
+
             try {
-                PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.STOP_DESTROY_BLOCK.ordinal()] = 6;
+                PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.SWAP_HELD_ITEMS.ordinal()] = 1;
             } catch (NoSuchFieldError nosuchfielderror15) {
                 ;
             }
 
+            try {
+                PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.DROP_ITEM.ordinal()] = 2;
+            } catch (NoSuchFieldError nosuchfielderror16) {
+                ;
+            }
+
+            try {
+                PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.DROP_ALL_ITEMS.ordinal()] = 3;
+            } catch (NoSuchFieldError nosuchfielderror17) {
+                ;
+            }
+
+            try {
+                PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.RELEASE_USE_ITEM.ordinal()] = 4;
+            } catch (NoSuchFieldError nosuchfielderror18) {
+                ;
+            }
+
+            try {
+                PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.START_DESTROY_BLOCK.ordinal()] = 5;
+            } catch (NoSuchFieldError nosuchfielderror19) {
+                ;
+            }
+
+            try {
+                PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.ABORT_DESTROY_BLOCK.ordinal()] = 6;
+            } catch (NoSuchFieldError nosuchfielderror20) {
+                ;
+            }
+
+            try {
+                PlayerConnection.SyntheticClass_1.a[PacketPlayInBlockDig.EnumPlayerDigType.STOP_DESTROY_BLOCK.ordinal()] = 7;
+            } catch (NoSuchFieldError nosuchfielderror21) {
+                ;
+            }
+
         }
     }
 }
