--- a/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -1,123 +1,110 @@
 package net.minecraft.server;
 
-import com.google.common.collect.Lists;
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Iterator;
 
 public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
 
     private int a;
     private int b;
-    private PacketPlayOutMapChunk.ChunkMap c;
-    private boolean d;
+    private int c;
+    private byte[] d;
+    private boolean e;
 
     public PacketPlayOutMapChunk() {}
 
     public PacketPlayOutMapChunk(Chunk chunk, boolean flag, int i) {
         this.a = chunk.locX;
         this.b = chunk.locZ;
-        this.d = flag;
-        this.c = a(chunk, flag, !chunk.getWorld().worldProvider.o(), i);
+        this.e = flag;
+        boolean flag1 = !chunk.getWorld().worldProvider.m();
+
+        this.d = new byte[a(chunk, flag, flag1, i)];
+        this.c = a(new PacketDataSerializer(this.f()), chunk, flag, flag1, i);
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
         this.a = packetdataserializer.readInt();
         this.b = packetdataserializer.readInt();
-        this.d = packetdataserializer.readBoolean();
-        this.c = new PacketPlayOutMapChunk.ChunkMap();
-        this.c.b = packetdataserializer.readShort();
-        this.c.a = packetdataserializer.a();
+        this.e = packetdataserializer.readBoolean();
+        this.c = packetdataserializer.g();
+        int i = packetdataserializer.g();
+
+        if (i > 2097152) {
+            throw new RuntimeException("Chunk Packet trying to allocate too much memory on read.");
+        } else {
+            this.d = new byte[i];
+            packetdataserializer.readBytes(this.d);
+        }
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
         packetdataserializer.writeInt(this.a);
         packetdataserializer.writeInt(this.b);
-        packetdataserializer.writeBoolean(this.d);
-        packetdataserializer.writeShort((short) (this.c.b & '\uffff'));
-        packetdataserializer.a(this.c.a);
+        packetdataserializer.writeBoolean(this.e);
+        packetdataserializer.b(this.c);
+        packetdataserializer.b(this.d.length);
+        packetdataserializer.writeBytes(this.d);
     }
 
     public void a(PacketListenerPlayOut packetlistenerplayout) {
         packetlistenerplayout.a(this);
     }
 
-    protected static int a(int i, boolean flag, boolean flag1) {
-        int j = i * 2 * 16 * 16 * 16;
-        int k = i * 16 * 16 * 16 / 2;
-        int l = flag ? i * 16 * 16 * 16 / 2 : 0;
-        int i1 = flag1 ? 256 : 0;
+    private ByteBuf f() {
+        ByteBuf bytebuf = Unpooled.wrappedBuffer(this.d);
 
-        return j + k + l + i1;
+        bytebuf.writerIndex(0);
+        return bytebuf;
     }
 
-    public static PacketPlayOutMapChunk.ChunkMap a(Chunk chunk, boolean flag, boolean flag1, int i) {
+    public static int a(PacketDataSerializer packetdataserializer, Chunk chunk, boolean flag, boolean flag1, int i) {
+        int j = 0;
         ChunkSection[] achunksection = chunk.getSections();
-        PacketPlayOutMapChunk.ChunkMap packetplayoutmapchunk_chunkmap = new PacketPlayOutMapChunk.ChunkMap();
-        ArrayList arraylist = Lists.newArrayList();
-
-        int j;
+        int k = 0;
 
-        for (j = 0; j < achunksection.length; ++j) {
-            ChunkSection chunksection = achunksection[j];
+        for (int l = achunksection.length; k < l; ++k) {
+            ChunkSection chunksection = achunksection[k];
 
-            if (chunksection != null && (!flag || !chunksection.a()) && (i & 1 << j) != 0) {
-                packetplayoutmapchunk_chunkmap.b |= 1 << j;
-                arraylist.add(chunksection);
+            if (chunksection != Chunk.a && (!flag || !chunksection.a()) && (i & 1 << k) != 0) {
+                j |= 1 << k;
+                chunksection.getBlocks().b(packetdataserializer);
+                packetdataserializer.writeBytes(chunksection.getEmittedLightArray().asBytes());
+                if (flag1) {
+                    packetdataserializer.writeBytes(chunksection.getSkyLightArray().asBytes());
+                }
             }
         }
 
-        packetplayoutmapchunk_chunkmap.a = new byte[a(Integer.bitCount(packetplayoutmapchunk_chunkmap.b), flag1, flag)];
-        j = 0;
-        Iterator iterator = arraylist.iterator();
-
-        ChunkSection chunksection1;
-
-        while (iterator.hasNext()) {
-            chunksection1 = (ChunkSection) iterator.next();
-            char[] achar = chunksection1.getIdArray();
-            char[] achar1 = achar;
-            int k = achar.length;
+        if (flag) {
+            packetdataserializer.writeBytes(chunk.getBiomeIndex());
+        }
 
-            for (int l = 0; l < k; ++l) {
-                char c0 = achar1[l];
+        return j;
+    }
 
-                packetplayoutmapchunk_chunkmap.a[j++] = (byte) (c0 & 255);
-                packetplayoutmapchunk_chunkmap.a[j++] = (byte) (c0 >> 8 & 255);
-            }
-        }
+    protected static int a(Chunk chunk, boolean flag, boolean flag1, int i) {
+        int j = 0;
+        ChunkSection[] achunksection = chunk.getSections();
+        int k = 0;
 
-        for (iterator = arraylist.iterator(); iterator.hasNext(); j = a(chunksection1.getEmittedLightArray().a(), packetplayoutmapchunk_chunkmap.a, j)) {
-            chunksection1 = (ChunkSection) iterator.next();
-        }
+        for (int l = achunksection.length; k < l; ++k) {
+            ChunkSection chunksection = achunksection[k];
 
-        if (flag1) {
-            for (iterator = arraylist.iterator(); iterator.hasNext(); j = a(chunksection1.getSkyLightArray().a(), packetplayoutmapchunk_chunkmap.a, j)) {
-                chunksection1 = (ChunkSection) iterator.next();
+            if (chunksection != Chunk.a && (!flag || !chunksection.a()) && (i & 1 << k) != 0) {
+                j += chunksection.getBlocks().a();
+                j += chunksection.getEmittedLightArray().asBytes().length;
+                if (flag1) {
+                    j += chunksection.getSkyLightArray().asBytes().length;
+                }
             }
         }
 
         if (flag) {
-            a(chunk.getBiomeIndex(), packetplayoutmapchunk_chunkmap.a, j);
+            j += chunk.getBiomeIndex().length;
         }
 
-        return packetplayoutmapchunk_chunkmap;
-    }
-
-    private static int a(byte[] abyte, byte[] abyte1, int i) {
-        System.arraycopy(abyte, 0, abyte1, i, abyte.length);
-        return i + abyte.length;
-    }
-
-    public void a(PacketListener packetlistener) {
-        this.a((PacketListenerPlayOut) packetlistener);
-    }
-
-    public static class ChunkMap {
-
-        public byte[] a;
-        public int b;
-
-        public ChunkMap() {}
+        return j;
     }
 }
