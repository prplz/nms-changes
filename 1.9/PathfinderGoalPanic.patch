--- a/net/minecraft/server/PathfinderGoalPanic.java
+++ b/net/minecraft/server/PathfinderGoalPanic.java
@@ -23,9 +23,19 @@
             if (vec3d == null) {
                 return false;
             } else {
-                this.c = vec3d.a;
-                this.d = vec3d.b;
-                this.e = vec3d.c;
+                this.c = vec3d.x;
+                this.d = vec3d.y;
+                this.e = vec3d.z;
+                if (this.b.isBurning()) {
+                    BlockPosition blockposition = this.a(this.b.world, this.b, 5, 4);
+
+                    if (blockposition != null) {
+                        this.c = (double) blockposition.getX();
+                        this.d = (double) blockposition.getY();
+                        this.e = (double) blockposition.getZ();
+                    }
+                }
+
                 return true;
             }
         }
@@ -36,6 +46,37 @@
     }
 
     public boolean b() {
-        return !this.b.getNavigation().m();
+        return !this.b.getNavigation().n();
+    }
+
+    private BlockPosition a(World world, Entity entity, int i, int j) {
+        BlockPosition blockposition = new BlockPosition(entity);
+        BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
+        int k = blockposition.getX();
+        int l = blockposition.getY();
+        int i1 = blockposition.getZ();
+        float f = (float) (i * i * j * 2);
+        BlockPosition blockposition1 = null;
+
+        for (int j1 = k - i; j1 <= k + i; ++j1) {
+            for (int k1 = l - j; k1 <= l + j; ++k1) {
+                for (int l1 = i1 - i; l1 <= i1 + i; ++l1) {
+                    blockposition_mutableblockposition.c(j1, k1, l1);
+                    IBlockData iblockdata = world.getType(blockposition_mutableblockposition);
+                    Block block = iblockdata.getBlock();
+
+                    if (block == Blocks.WATER || block == Blocks.FLOWING_WATER) {
+                        float f1 = (float) ((j1 - k) * (j1 - k) + (k1 - l) * (k1 - l) + (l1 - i1) * (l1 - i1));
+
+                        if (f1 < f) {
+                            f = f1;
+                            blockposition1 = new BlockPosition(blockposition_mutableblockposition);
+                        }
+                    }
+                }
+            }
+        }
+
+        return blockposition1;
     }
 }
