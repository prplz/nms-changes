--- a/net/minecraft/server/TileEntitySkull.java
+++ b/net/minecraft/server/TileEntitySkull.java
@@ -2,19 +2,32 @@
 
 import com.google.common.collect.Iterables;
 import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.properties.Property;
 import java.util.UUID;
 
-public class TileEntitySkull extends TileEntity {
+public class TileEntitySkull extends TileEntity implements ITickable {
 
     private int a;
     private int rotation;
     private GameProfile g = null;
+    private int h;
+    private boolean i;
+    private static UserCache j;
+    private static MinecraftSessionService k;
 
     public TileEntitySkull() {}
 
-    public void b(NBTTagCompound nbttagcompound) {
-        super.b(nbttagcompound);
+    public static void a(UserCache usercache) {
+        TileEntitySkull.j = usercache;
+    }
+
+    public static void a(MinecraftSessionService minecraftsessionservice) {
+        TileEntitySkull.k = minecraftsessionservice;
+    }
+
+    public void save(NBTTagCompound nbttagcompound) {
+        super.save(nbttagcompound);
         nbttagcompound.setByte("SkullType", (byte) (this.a & 255));
         nbttagcompound.setByte("Rot", (byte) (this.rotation & 255));
         if (this.g != null) {
@@ -38,21 +51,33 @@
 
                 if (!UtilColor.b(s)) {
                     this.g = new GameProfile((UUID) null, s);
-                    this.e();
+                    this.g();
                 }
             }
         }
 
     }
 
+    public void c() {
+        if (this.a == 5) {
+            if (this.world.isBlockIndirectlyPowered(this.position)) {
+                this.i = true;
+                ++this.h;
+            } else {
+                this.i = false;
+            }
+        }
+
+    }
+
     public GameProfile getGameProfile() {
         return this.g;
     }
 
-    public Packet getUpdatePacket() {
+    public Packet<?> getUpdatePacket() {
         NBTTagCompound nbttagcompound = new NBTTagCompound();
 
-        this.b(nbttagcompound);
+        this.save(nbttagcompound);
         return new PacketPlayOutTileEntityData(this.position, 4, nbttagcompound);
     }
 
@@ -64,10 +89,10 @@
     public void setGameProfile(GameProfile gameprofile) {
         this.a = 3;
         this.g = gameprofile;
-        this.e();
+        this.g();
     }
 
-    private void e() {
+    private void g() {
         this.g = b(this.g);
         this.update();
     }
@@ -76,10 +101,8 @@
         if (gameprofile != null && !UtilColor.b(gameprofile.getName())) {
             if (gameprofile.isComplete() && gameprofile.getProperties().containsKey("textures")) {
                 return gameprofile;
-            } else if (MinecraftServer.getServer() == null) {
-                return gameprofile;
-            } else {
-                GameProfile gameprofile1 = MinecraftServer.getServer().getUserCache().getProfile(gameprofile.getName());
+            } else if (TileEntitySkull.j != null && TileEntitySkull.k != null) {
+                GameProfile gameprofile1 = TileEntitySkull.j.getProfile(gameprofile.getName());
 
                 if (gameprofile1 == null) {
                     return gameprofile;
@@ -87,11 +110,13 @@
                     Property property = (Property) Iterables.getFirst(gameprofile1.getProperties().get("textures"), (Object) null);
 
                     if (property == null) {
-                        gameprofile1 = MinecraftServer.getServer().aD().fillProfileProperties(gameprofile1, true);
+                        gameprofile1 = TileEntitySkull.k.fillProfileProperties(gameprofile1, true);
                     }
 
                     return gameprofile1;
                 }
+            } else {
+                return gameprofile;
             }
         } else {
             return gameprofile;
