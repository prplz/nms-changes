--- a/net/minecraft/server/EntityPlayer.java
+++ b/net/minecraft/server/EntityPlayer.java
@@ -4,8 +4,6 @@
 import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
 import io.netty.buffer.Unpooled;
-import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -15,28 +13,33 @@
 
 public class EntityPlayer extends EntityHuman implements ICrafting {
 
-    private static final Logger bH = LogManager.getLogger();
+    private static final Logger bQ = LogManager.getLogger();
     private String locale = "en_US";
     public PlayerConnection playerConnection;
     public final MinecraftServer server;
     public final PlayerInteractManager playerInteractManager;
     public double d;
     public double e;
-    public final List<ChunkCoordIntPair> chunkCoordIntPairQueue = Lists.newLinkedList();
     public final List<Integer> removeQueue = Lists.newLinkedList();
-    private final ServerStatisticManager bK;
-    private float bL = Float.MIN_VALUE;
-    private float bM = -1.0E8F;
-    private int bN = -99999999;
-    private boolean bO = true;
+    private final ServerStatisticManager bT;
+    private float bU = Float.MIN_VALUE;
+    private int bV = Integer.MIN_VALUE;
+    private int bW = Integer.MIN_VALUE;
+    private int bX = Integer.MIN_VALUE;
+    private int bY = Integer.MIN_VALUE;
+    private int bZ = Integer.MIN_VALUE;
+    private float lastHealthSent = -1.0E8F;
+    private int cb = -99999999;
+    private boolean cc = true;
     public int lastSentExp = -99999999;
     public int invulnerableTicks = 60;
-    private EntityHuman.EnumChatVisibility bR;
-    private boolean bS = true;
-    private long bT = System.currentTimeMillis();
-    private Entity bU = null;
+    private EntityHuman.EnumChatVisibility cf;
+    private boolean cg = true;
+    private long ch = System.currentTimeMillis();
+    private Entity ci = null;
+    private boolean cj;
     private int containerCounter;
-    public boolean g;
+    public boolean f;
     public int ping;
     public boolean viewingCredits;
 
@@ -46,8 +49,8 @@
         this.playerInteractManager = playerinteractmanager;
         BlockPosition blockposition = worldserver.getSpawn();
 
-        if (!worldserver.worldProvider.o() && worldserver.getWorldData().getGameType() != WorldSettings.EnumGamemode.ADVENTURE) {
-            int i = Math.max(5, minecraftserver.getSpawnProtection() - 6);
+        if (!worldserver.worldProvider.m() && worldserver.getWorldData().getGameType() != WorldSettings.EnumGamemode.ADVENTURE) {
+            int i = Math.max(0, minecraftserver.a(worldserver));
             int j = MathHelper.floor(worldserver.getWorldBorder().b((double) blockposition.getX(), (double) blockposition.getZ()));
 
             if (j < i) {
@@ -58,12 +61,12 @@
                 i = 1;
             }
 
-            blockposition = worldserver.r(blockposition.a(this.random.nextInt(i * 2) - i, 0, this.random.nextInt(i * 2) - i));
+            blockposition = worldserver.q(blockposition.a(this.random.nextInt(i * 2 + 1) - i, 0, this.random.nextInt(i * 2 + 1) - i));
         }
 
         this.server = minecraftserver;
-        this.bK = minecraftserver.getPlayerList().a((EntityHuman) this);
-        this.S = 0.0F;
+        this.bT = minecraftserver.getPlayerList().a((EntityHuman) this);
+        this.P = 0.0F;
         this.setPositionRotation(blockposition, 0.0F, 0.0F);
 
         while (!worldserver.getCubes(this, this.getBoundingBox()).isEmpty() && this.locY < 255.0D) {
@@ -75,8 +78,8 @@
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
         if (nbttagcompound.hasKeyOfType("playerGameType", 99)) {
-            if (MinecraftServer.getServer().getForceGamemode()) {
-                this.playerInteractManager.setGameMode(MinecraftServer.getServer().getGamemode());
+            if (this.h().getForceGamemode()) {
+                this.playerInteractManager.setGameMode(this.h().getGamemode());
             } else {
                 this.playerInteractManager.setGameMode(WorldSettings.EnumGamemode.getById(nbttagcompound.getInt("playerGameType")));
             }
@@ -87,6 +90,18 @@
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
         nbttagcompound.setInt("playerGameType", this.playerInteractManager.getGameMode().getId());
+        Entity entity = this.getVehicle();
+
+        if (this.by() != null && entity != this & entity.b(EntityPlayer.class).size() == 1) {
+            NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+            NBTTagCompound nbttagcompound2 = new NBTTagCompound();
+
+            entity.d(nbttagcompound2);
+            nbttagcompound1.a("Attach", this.by().getUniqueID());
+            nbttagcompound1.set("Entity", nbttagcompound2);
+            nbttagcompound.set("RootVehicle", nbttagcompound1);
+        }
+
     }
 
     public void levelDown(int i) {
@@ -105,15 +120,19 @@
 
     public void enterCombat() {
         super.enterCombat();
-        this.playerConnection.sendPacket(new PacketPlayOutCombatEvent(this.bs(), PacketPlayOutCombatEvent.EnumCombatEventType.ENTER_COMBAT));
+        this.playerConnection.sendPacket(new PacketPlayOutCombatEvent(this.getCombatTracker(), PacketPlayOutCombatEvent.EnumCombatEventType.ENTER_COMBAT));
     }
 
     public void exitCombat() {
         super.exitCombat();
-        this.playerConnection.sendPacket(new PacketPlayOutCombatEvent(this.bs(), PacketPlayOutCombatEvent.EnumCombatEventType.END_COMBAT));
+        this.playerConnection.sendPacket(new PacketPlayOutCombatEvent(this.getCombatTracker(), PacketPlayOutCombatEvent.EnumCombatEventType.END_COMBAT));
+    }
+
+    protected ItemCooldown l() {
+        return new ItemCooldownPlayer(this);
     }
 
-    public void t_() {
+    public void m() {
         this.playerInteractManager.a();
         --this.invulnerableTicks;
         if (this.noDamageTicks > 0) {
@@ -140,55 +159,7 @@
             this.playerConnection.sendPacket(new PacketPlayOutEntityDestroy(aint));
         }
 
-        if (!this.chunkCoordIntPairQueue.isEmpty()) {
-            ArrayList arraylist = Lists.newArrayList();
-            Iterator iterator1 = this.chunkCoordIntPairQueue.iterator();
-            ArrayList arraylist1 = Lists.newArrayList();
-
-            Chunk chunk;
-
-            while (iterator1.hasNext() && arraylist.size() < 10) {
-                ChunkCoordIntPair chunkcoordintpair = (ChunkCoordIntPair) iterator1.next();
-
-                if (chunkcoordintpair != null) {
-                    if (this.world.isLoaded(new BlockPosition(chunkcoordintpair.x << 4, 0, chunkcoordintpair.z << 4))) {
-                        chunk = this.world.getChunkAt(chunkcoordintpair.x, chunkcoordintpair.z);
-                        if (chunk.isReady()) {
-                            arraylist.add(chunk);
-                            arraylist1.addAll(((WorldServer) this.world).getTileEntities(chunkcoordintpair.x * 16, 0, chunkcoordintpair.z * 16, chunkcoordintpair.x * 16 + 16, 256, chunkcoordintpair.z * 16 + 16));
-                            iterator1.remove();
-                        }
-                    }
-                } else {
-                    iterator1.remove();
-                }
-            }
-
-            if (!arraylist.isEmpty()) {
-                if (arraylist.size() == 1) {
-                    this.playerConnection.sendPacket(new PacketPlayOutMapChunk((Chunk) arraylist.get(0), true, '\uffff'));
-                } else {
-                    this.playerConnection.sendPacket(new PacketPlayOutMapChunkBulk(arraylist));
-                }
-
-                Iterator iterator2 = arraylist1.iterator();
-
-                while (iterator2.hasNext()) {
-                    TileEntity tileentity = (TileEntity) iterator2.next();
-
-                    this.a(tileentity);
-                }
-
-                iterator2 = arraylist.iterator();
-
-                while (iterator2.hasNext()) {
-                    chunk = (Chunk) iterator2.next();
-                    this.u().getTracker().a(this, chunk);
-                }
-            }
-        }
-
-        Entity entity = this.C();
+        Entity entity = this.getSpecatorTarget();
 
         if (entity != this) {
             if (!entity.isAlive()) {
@@ -204,15 +175,15 @@
 
     }
 
-    public void l() {
+    public void k_() {
         try {
-            super.t_();
+            super.m();
 
             for (int i = 0; i < this.inventory.getSize(); ++i) {
                 ItemStack itemstack = this.inventory.getItem(i);
 
                 if (itemstack != null && itemstack.getItem().f()) {
-                    Packet packet = ((ItemWorldMapBase) itemstack.getItem()).c(itemstack, this.world, this);
+                    Packet packet = ((ItemWorldMapBase) itemstack.getItem()).a(itemstack, this.world, (EntityHuman) this);
 
                     if (packet != null) {
                         this.playerConnection.sendPacket(packet);
@@ -220,23 +191,41 @@
                 }
             }
 
-            if (this.getHealth() != this.bM || this.bN != this.foodData.getFoodLevel() || this.foodData.getSaturationLevel() == 0.0F != this.bO) {
+            if (this.getHealth() != this.lastHealthSent || this.cb != this.foodData.getFoodLevel() || this.foodData.getSaturationLevel() == 0.0F != this.cc) {
                 this.playerConnection.sendPacket(new PacketPlayOutUpdateHealth(this.getHealth(), this.foodData.getFoodLevel(), this.foodData.getSaturationLevel()));
-                this.bM = this.getHealth();
-                this.bN = this.foodData.getFoodLevel();
-                this.bO = this.foodData.getSaturationLevel() == 0.0F;
+                this.lastHealthSent = this.getHealth();
+                this.cb = this.foodData.getFoodLevel();
+                this.cc = this.foodData.getSaturationLevel() == 0.0F;
+            }
+
+            if (this.getHealth() + this.getAbsorptionHearts() != this.bU) {
+                this.bU = this.getHealth() + this.getAbsorptionHearts();
+                this.a(IScoreboardCriteria.g, MathHelper.f(this.bU));
             }
 
-            if (this.getHealth() + this.getAbsorptionHearts() != this.bL) {
-                this.bL = this.getHealth() + this.getAbsorptionHearts();
-                Collection collection = this.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.g);
-                Iterator iterator = collection.iterator();
+            if (this.foodData.getFoodLevel() != this.bV) {
+                this.bV = this.foodData.getFoodLevel();
+                this.a(IScoreboardCriteria.h, MathHelper.f((float) this.bV));
+            }
 
-                while (iterator.hasNext()) {
-                    ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
+            if (this.getAirTicks() != this.bW) {
+                this.bW = this.getAirTicks();
+                this.a(IScoreboardCriteria.i, MathHelper.f((float) this.bW));
+            }
 
-                    this.getScoreboard().getPlayerScoreForObjective(this.getName(), scoreboardobjective).updateForList(Arrays.asList(new EntityHuman[] { this}));
-                }
+            if (this.getArmorStrength() != this.bX) {
+                this.bX = this.getArmorStrength();
+                this.a(IScoreboardCriteria.j, MathHelper.f((float) this.bX));
+            }
+
+            if (this.expTotal != this.bZ) {
+                this.bZ = this.expTotal;
+                this.a(IScoreboardCriteria.k, MathHelper.f((float) this.bZ));
+            }
+
+            if (this.expLevel != this.bY) {
+                this.bY = this.expLevel;
+                this.a(IScoreboardCriteria.l, MathHelper.f((float) this.bY));
             }
 
             if (this.expTotal != this.lastSentExp) {
@@ -245,7 +234,7 @@
             }
 
             if (this.ticksLived % 20 * 5 == 0 && !this.getStatisticManager().hasAchievement(AchievementList.L)) {
-                this.i_();
+                this.o();
             }
 
         } catch (Throwable throwable) {
@@ -257,9 +246,22 @@
         }
     }
 
-    protected void i_() {
+    private void a(IScoreboardCriteria iscoreboardcriteria, int i) {
+        Collection collection = this.getScoreboard().getObjectivesForCriteria(iscoreboardcriteria);
+        Iterator iterator = collection.iterator();
+
+        while (iterator.hasNext()) {
+            ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
+            ScoreboardScore scoreboardscore = this.getScoreboard().getPlayerScoreForObjective(this.getName(), scoreboardobjective);
+
+            scoreboardscore.setScore(i);
+        }
+
+    }
+
+    protected void o() {
         BiomeBase biomebase = this.world.getBiome(new BlockPosition(MathHelper.floor(this.locX), 0, MathHelper.floor(this.locZ)));
-        String s = biomebase.ah;
+        String s = biomebase.l();
         AchievementSet achievementset = (AchievementSet) this.getStatisticManager().b((Statistic) AchievementList.L);
 
         if (achievementset == null) {
@@ -267,8 +269,8 @@
         }
 
         achievementset.add(s);
-        if (this.getStatisticManager().b(AchievementList.L) && achievementset.size() >= BiomeBase.n.size()) {
-            HashSet hashset = Sets.newHashSet(BiomeBase.n);
+        if (this.getStatisticManager().b(AchievementList.L) && achievementset.size() >= BiomeBase.i.size()) {
+            HashSet hashset = Sets.newHashSet(BiomeBase.i);
             Iterator iterator = achievementset.iterator();
 
             while (iterator.hasNext()) {
@@ -278,7 +280,7 @@
                 while (iterator1.hasNext()) {
                     BiomeBase biomebase1 = (BiomeBase) iterator1.next();
 
-                    if (biomebase1.ah.equals(s1)) {
+                    if (biomebase1.l().equals(s1)) {
                         iterator1.remove();
                     }
                 }
@@ -296,21 +298,24 @@
     }
 
     public void die(DamageSource damagesource) {
-        if (this.world.getGameRules().getBoolean("showDeathMessages")) {
-            ScoreboardTeamBase scoreboardteambase = this.getScoreboardTeam();
+        boolean flag = this.world.getGameRules().getBoolean("showDeathMessages");
+
+        this.playerConnection.sendPacket(new PacketPlayOutCombatEvent(this.getCombatTracker(), PacketPlayOutCombatEvent.EnumCombatEventType.ENTITY_DIED, flag));
+        if (flag) {
+            ScoreboardTeamBase scoreboardteambase = this.aO();
 
             if (scoreboardteambase != null && scoreboardteambase.j() != ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS) {
                 if (scoreboardteambase.j() == ScoreboardTeamBase.EnumNameTagVisibility.HIDE_FOR_OTHER_TEAMS) {
-                    this.server.getPlayerList().a((EntityHuman) this, this.bs().b());
+                    this.server.getPlayerList().a((EntityHuman) this, this.getCombatTracker().getDeathMessage());
                 } else if (scoreboardteambase.j() == ScoreboardTeamBase.EnumNameTagVisibility.HIDE_FOR_OWN_TEAM) {
-                    this.server.getPlayerList().b((EntityHuman) this, this.bs().b());
+                    this.server.getPlayerList().b((EntityHuman) this, this.getCombatTracker().getDeathMessage());
                 }
             } else {
-                this.server.getPlayerList().sendMessage(this.bs().b());
+                this.server.getPlayerList().sendMessage(this.getCombatTracker().getDeathMessage());
             }
         }
 
-        if (!this.world.getGameRules().getBoolean("keepInventory")) {
+        if (!this.world.getGameRules().getBoolean("keepInventory") && !this.isSpectator()) {
             this.inventory.n();
         }
 
@@ -324,28 +329,28 @@
             scoreboardscore.incrementScore();
         }
 
-        EntityLiving entityliving = this.bt();
+        EntityLiving entityliving = this.bV();
 
         if (entityliving != null) {
-            EntityTypes.MonsterEggInfo entitytypes_monsteregginfo = (EntityTypes.MonsterEggInfo) EntityTypes.eggInfo.get(Integer.valueOf(EntityTypes.a(entityliving)));
+            EntityTypes.MonsterEggInfo entitytypes_monsteregginfo = (EntityTypes.MonsterEggInfo) EntityTypes.eggInfo.get(EntityTypes.b((Entity) entityliving));
 
             if (entitytypes_monsteregginfo != null) {
                 this.b(entitytypes_monsteregginfo.e);
             }
 
-            entityliving.b(this, this.aW);
+            entityliving.b(this, this.ba);
         }
 
-        this.b(StatisticList.y);
+        this.b(StatisticList.A);
         this.a(StatisticList.h);
-        this.bs().g();
+        this.getCombatTracker().g();
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else {
-            boolean flag = this.server.ae() && this.cr() && "fall".equals(damagesource.translationIndex);
+            boolean flag = this.server.aa() && this.canPvP() && "fall".equals(damagesource.translationIndex);
 
             if (!flag && this.invulnerableTicks > 0 && damagesource != DamageSource.OUT_OF_WORLD) {
                 return false;
@@ -372,43 +377,47 @@
     }
 
     public boolean a(EntityHuman entityhuman) {
-        return !this.cr() ? false : super.a(entityhuman);
+        return !this.canPvP() ? false : super.a(entityhuman);
     }
 
-    private boolean cr() {
+    private boolean canPvP() {
         return this.server.getPVP();
     }
 
-    public void c(int i) {
+    public Entity c(int i) {
+        this.cj = true;
         if (this.dimension == 1 && i == 1) {
-            this.b((Statistic) AchievementList.D);
             this.world.kill(this);
-            this.viewingCredits = true;
-            this.playerConnection.sendPacket(new PacketPlayOutGameStateChange(4, 0.0F));
+            if (!this.viewingCredits) {
+                this.viewingCredits = true;
+                if (this.a(AchievementList.D)) {
+                    this.playerConnection.sendPacket(new PacketPlayOutGameStateChange(4, 0.0F));
+                } else {
+                    this.b((Statistic) AchievementList.D);
+                    this.playerConnection.sendPacket(new PacketPlayOutGameStateChange(4, 1.0F));
+                }
+            }
+
+            return this;
         } else {
             if (this.dimension == 0 && i == 1) {
                 this.b((Statistic) AchievementList.C);
-                BlockPosition blockposition = this.server.getWorldServer(i).getDimensionSpawn();
-
-                if (blockposition != null) {
-                    this.playerConnection.a((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), 0.0F, 0.0F);
-                }
-
                 i = 1;
             } else {
                 this.b((Statistic) AchievementList.y);
             }
 
-            this.server.getPlayerList().changeDimension(this, i);
+            this.server.getPlayerList().a(this, i);
+            this.playerConnection.sendPacket(new PacketPlayOutWorldEvent(1032, BlockPosition.ZERO, 0, false));
             this.lastSentExp = -1;
-            this.bM = -1.0F;
-            this.bN = -1;
+            this.lastHealthSent = -1.0F;
+            this.cb = -1;
+            return this;
         }
-
     }
 
     public boolean a(EntityPlayer entityplayer) {
-        return entityplayer.isSpectator() ? this.C() == this : (this.isSpectator() ? false : super.a(entityplayer));
+        return entityplayer.isSpectator() ? this.getSpecatorTarget() == this : (this.isSpectator() ? false : super.a(entityplayer));
     }
 
     private void a(TileEntity tileentity) {
@@ -431,9 +440,10 @@
         EntityHuman.EnumBedResult entityhuman_enumbedresult = super.a(blockposition);
 
         if (entityhuman_enumbedresult == EntityHuman.EnumBedResult.OK) {
+            this.b(StatisticList.ad);
             PacketPlayOutBed packetplayoutbed = new PacketPlayOutBed(this, blockposition);
 
-            this.u().getTracker().a((Entity) this, (Packet) packetplayoutbed);
+            this.x().getTracker().a((Entity) this, (Packet) packetplayoutbed);
             this.playerConnection.a(this.locX, this.locY, this.locZ, this.yaw, this.pitch);
             this.playerConnection.sendPacket(packetplayoutbed);
         }
@@ -443,7 +453,7 @@
 
     public void a(boolean flag, boolean flag1, boolean flag2) {
         if (this.isSleeping()) {
-            this.u().getTracker().sendPacketToEntity(this, new PacketPlayOutAnimation(this, 2));
+            this.x().getTracker().sendPacketToEntity(this, new PacketPlayOutAnimation(this, 2));
         }
 
         super.a(flag, flag1, flag2);
@@ -453,36 +463,66 @@
 
     }
 
-    public void mount(Entity entity) {
-        Entity entity1 = this.vehicle;
+    public boolean a(Entity entity, boolean flag) {
+        Entity entity1 = this.by();
+
+        if (!super.a(entity, flag)) {
+            return false;
+        } else {
+            Entity entity2 = this.by();
+
+            if (entity2 != entity1 && this.playerConnection != null) {
+                this.playerConnection.a(this.locX, this.locY, this.locZ, this.yaw, this.pitch);
+            }
 
-        super.mount(entity);
-        if (entity != entity1) {
-            this.playerConnection.sendPacket(new PacketPlayOutAttachEntity(0, this, this.vehicle));
+            return true;
+        }
+    }
+
+    public void stopRiding() {
+        Entity entity = this.by();
+
+        super.stopRiding();
+        Entity entity1 = this.by();
+
+        if (entity1 != entity && this.playerConnection != null) {
             this.playerConnection.a(this.locX, this.locY, this.locZ, this.yaw, this.pitch);
         }
 
     }
 
-    protected void a(double d0, boolean flag, Block block, BlockPosition blockposition) {}
+    public boolean isInvulnerable(DamageSource damagesource) {
+        return super.isInvulnerable(damagesource) || this.K();
+    }
+
+    protected void a(double d0, boolean flag, IBlockData iblockdata, BlockPosition blockposition) {}
+
+    protected void b(BlockPosition blockposition) {
+        if (!this.isSpectator()) {
+            super.b(blockposition);
+        }
+
+    }
 
     public void a(double d0, boolean flag) {
         int i = MathHelper.floor(this.locX);
         int j = MathHelper.floor(this.locY - 0.20000000298023224D);
         int k = MathHelper.floor(this.locZ);
         BlockPosition blockposition = new BlockPosition(i, j, k);
-        Block block = this.world.getType(blockposition).getBlock();
+        IBlockData iblockdata = this.world.getType(blockposition);
 
-        if (block.getMaterial() == Material.AIR) {
-            Block block1 = this.world.getType(blockposition.down()).getBlock();
+        if (iblockdata.getMaterial() == Material.AIR) {
+            BlockPosition blockposition1 = blockposition.down();
+            IBlockData iblockdata1 = this.world.getType(blockposition1);
+            Block block = iblockdata1.getBlock();
 
-            if (block1 instanceof BlockFence || block1 instanceof BlockCobbleWall || block1 instanceof BlockFenceGate) {
-                blockposition = blockposition.down();
-                block = this.world.getType(blockposition).getBlock();
+            if (block instanceof BlockFence || block instanceof BlockCobbleWall || block instanceof BlockFenceGate) {
+                blockposition = blockposition1;
+                iblockdata = iblockdata1;
             }
         }
 
-        super.a(d0, flag, block, blockposition);
+        super.a(d0, flag, iblockdata, blockposition);
     }
 
     public void openSign(TileEntitySign tileentitysign) {
@@ -490,44 +530,52 @@
         this.playerConnection.sendPacket(new PacketPlayOutOpenSignEditor(tileentitysign.getPosition()));
     }
 
-    private void nextContainerCounter() {
+    public void nextContainerCounter() {
         this.containerCounter = this.containerCounter % 100 + 1;
     }
 
     public void openTileEntity(ITileEntityContainer itileentitycontainer) {
-        this.nextContainerCounter();
-        this.playerConnection.sendPacket(new PacketPlayOutOpenWindow(this.containerCounter, itileentitycontainer.getContainerName(), itileentitycontainer.getScoreboardDisplayName()));
-        this.activeContainer = itileentitycontainer.createContainer(this.inventory, this);
-        this.activeContainer.windowId = this.containerCounter;
-        this.activeContainer.addSlotListener(this);
+        if (itileentitycontainer instanceof ILootable && ((ILootable) itileentitycontainer).b() != null && this.isSpectator()) {
+            this.sendMessage((new ChatMessage("container.spectatorCantOpen", new Object[0])).setChatModifier((new ChatModifier()).setColor(EnumChatFormat.RED)));
+        } else {
+            this.nextContainerCounter();
+            this.playerConnection.sendPacket(new PacketPlayOutOpenWindow(this.containerCounter, itileentitycontainer.getContainerName(), itileentitycontainer.getScoreboardDisplayName()));
+            this.activeContainer = itileentitycontainer.createContainer(this.inventory, this);
+            this.activeContainer.windowId = this.containerCounter;
+            this.activeContainer.addSlotListener(this);
+        }
     }
 
     public void openContainer(IInventory iinventory) {
-        if (this.activeContainer != this.defaultContainer) {
-            this.closeInventory();
-        }
+        if (iinventory instanceof ILootable && ((ILootable) iinventory).b() != null && this.isSpectator()) {
+            this.sendMessage((new ChatMessage("container.spectatorCantOpen", new Object[0])).setChatModifier((new ChatModifier()).setColor(EnumChatFormat.RED)));
+        } else {
+            if (this.activeContainer != this.defaultContainer) {
+                this.closeInventory();
+            }
+
+            if (iinventory instanceof ITileInventory) {
+                ITileInventory itileinventory = (ITileInventory) iinventory;
 
-        if (iinventory instanceof ITileInventory) {
-            ITileInventory itileinventory = (ITileInventory) iinventory;
+                if (itileinventory.x_() && !this.a(itileinventory.y_()) && !this.isSpectator()) {
+                    this.playerConnection.sendPacket(new PacketPlayOutChat(new ChatMessage("container.isLocked", new Object[] { iinventory.getScoreboardDisplayName()}), (byte) 2));
+                    this.playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(SoundEffects.W, SoundCategory.BLOCKS, this.locX, this.locY, this.locZ, 1.0F, 1.0F));
+                    return;
+                }
+            }
 
-            if (itileinventory.r_() && !this.a(itileinventory.i()) && !this.isSpectator()) {
-                this.playerConnection.sendPacket(new PacketPlayOutChat(new ChatMessage("container.isLocked", new Object[] { iinventory.getScoreboardDisplayName()}), (byte) 2));
-                this.playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect("random.door_close", this.locX, this.locY, this.locZ, 1.0F, 1.0F));
-                return;
+            this.nextContainerCounter();
+            if (iinventory instanceof ITileEntityContainer) {
+                this.playerConnection.sendPacket(new PacketPlayOutOpenWindow(this.containerCounter, ((ITileEntityContainer) iinventory).getContainerName(), iinventory.getScoreboardDisplayName(), iinventory.getSize()));
+                this.activeContainer = ((ITileEntityContainer) iinventory).createContainer(this.inventory, this);
+            } else {
+                this.playerConnection.sendPacket(new PacketPlayOutOpenWindow(this.containerCounter, "minecraft:container", iinventory.getScoreboardDisplayName(), iinventory.getSize()));
+                this.activeContainer = new ContainerChest(this.inventory, iinventory, this);
             }
-        }
 
-        this.nextContainerCounter();
-        if (iinventory instanceof ITileEntityContainer) {
-            this.playerConnection.sendPacket(new PacketPlayOutOpenWindow(this.containerCounter, ((ITileEntityContainer) iinventory).getContainerName(), iinventory.getScoreboardDisplayName(), iinventory.getSize()));
-            this.activeContainer = ((ITileEntityContainer) iinventory).createContainer(this.inventory, this);
-        } else {
-            this.playerConnection.sendPacket(new PacketPlayOutOpenWindow(this.containerCounter, "minecraft:container", iinventory.getScoreboardDisplayName(), iinventory.getSize()));
-            this.activeContainer = new ContainerChest(this.inventory, iinventory, this);
+            this.activeContainer.windowId = this.containerCounter;
+            this.activeContainer.addSlotListener(this);
         }
-
-        this.activeContainer.windowId = this.containerCounter;
-        this.activeContainer.addSlotListener(this);
     }
 
     public void openTrade(IMerchant imerchant) {
@@ -563,18 +611,29 @@
         this.activeContainer.addSlotListener(this);
     }
 
-    public void openBook(ItemStack itemstack) {
+    public void a(ItemStack itemstack, EnumHand enumhand) {
         Item item = itemstack.getItem();
 
         if (item == Items.WRITTEN_BOOK) {
-            this.playerConnection.sendPacket(new PacketPlayOutCustomPayload("MC|BOpen", new PacketDataSerializer(Unpooled.buffer())));
+            PacketDataSerializer packetdataserializer = new PacketDataSerializer(Unpooled.buffer());
+
+            packetdataserializer.a((Enum) enumhand);
+            this.playerConnection.sendPacket(new PacketPlayOutCustomPayload("MC|BOpen", packetdataserializer));
+        }
+
+    }
+
+    public void a(TileEntityCommand tileentitycommand) {
+        if (this.a(2, "")) {
+            tileentitycommand.d(true);
+            this.a((TileEntity) tileentitycommand);
         }
 
     }
 
     public void a(Container container, int i, ItemStack itemstack) {
         if (!(container.getSlot(i) instanceof SlotResult)) {
-            if (!this.g) {
+            if (!this.f) {
                 this.playerConnection.sendPacket(new PacketPlayOutSetSlot(container.windowId, i, itemstack));
             }
         }
@@ -602,39 +661,43 @@
 
     public void closeInventory() {
         this.playerConnection.sendPacket(new PacketPlayOutCloseWindow(this.activeContainer.windowId));
-        this.p();
+        this.s();
     }
 
     public void broadcastCarriedItem() {
-        if (!this.g) {
+        if (!this.f) {
             this.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, this.inventory.getCarried()));
         }
     }
 
-    public void p() {
+    public void s() {
         this.activeContainer.b((EntityHuman) this);
         this.activeContainer = this.defaultContainer;
     }
 
     public void a(float f, float f1, boolean flag, boolean flag1) {
-        if (this.vehicle != null) {
+        if (this.isPassenger()) {
             if (f >= -1.0F && f <= 1.0F) {
-                this.aZ = f;
+                this.bd = f;
             }
 
             if (f1 >= -1.0F && f1 <= 1.0F) {
-                this.ba = f1;
+                this.be = f1;
             }
 
-            this.aY = flag;
+            this.bc = flag;
             this.setSneaking(flag1);
         }
 
     }
 
+    public boolean a(Achievement achievement) {
+        return this.bT.hasAchievement(achievement);
+    }
+
     public void a(Statistic statistic, int i) {
         if (statistic != null) {
-            this.bK.b(this, statistic, i);
+            this.bT.b(this, statistic, i);
             Iterator iterator = this.getScoreboard().getObjectivesForCriteria(statistic.k()).iterator();
 
             while (iterator.hasNext()) {
@@ -643,8 +706,8 @@
                 this.getScoreboard().getPlayerScoreForObjective(this.getName(), scoreboardobjective).addScore(i);
             }
 
-            if (this.bK.e()) {
-                this.bK.a(this);
+            if (this.bT.e()) {
+                this.bT.a(this);
             }
 
         }
@@ -652,7 +715,7 @@
 
     public void a(Statistic statistic) {
         if (statistic != null) {
-            this.bK.setStatistic(this, statistic, 0);
+            this.bT.setStatistic(this, statistic, 0);
             Iterator iterator = this.getScoreboard().getObjectivesForCriteria(statistic.k()).iterator();
 
             while (iterator.hasNext()) {
@@ -661,18 +724,15 @@
                 this.getScoreboard().getPlayerScoreForObjective(this.getName(), scoreboardobjective).setScore(0);
             }
 
-            if (this.bK.e()) {
-                this.bK.a(this);
+            if (this.bT.e()) {
+                this.bT.a(this);
             }
 
         }
     }
 
-    public void q() {
-        if (this.passenger != null) {
-            this.passenger.mount(this);
-        }
-
+    public void t() {
+        this.az();
         if (this.sleeping) {
             this.a(true, false, false);
         }
@@ -680,22 +740,17 @@
     }
 
     public void triggerHealthUpdate() {
-        this.bM = -1.0E8F;
+        this.lastHealthSent = -1.0E8F;
     }
 
     public void b(IChatBaseComponent ichatbasecomponent) {
         this.playerConnection.sendPacket(new PacketPlayOutChat(ichatbasecomponent));
     }
 
-    protected void s() {
-        this.playerConnection.sendPacket(new PacketPlayOutEntityStatus(this, (byte) 9));
-        super.s();
-    }
-
-    public void a(ItemStack itemstack, int i) {
-        super.a(itemstack, i);
-        if (itemstack != null && itemstack.getItem() != null && itemstack.getItem().e(itemstack) == EnumAnimation.EAT) {
-            this.u().getTracker().sendPacketToEntity(this, new PacketPlayOutAnimation(this, 3));
+    protected void v() {
+        if (this.bm != null && this.cs()) {
+            this.playerConnection.sendPacket(new PacketPlayOutEntityStatus(this, (byte) 9));
+            super.v();
         }
 
     }
@@ -703,8 +758,8 @@
     public void copyTo(EntityHuman entityhuman, boolean flag) {
         super.copyTo(entityhuman, flag);
         this.lastSentExp = -1;
-        this.bM = -1.0F;
-        this.bN = -1;
+        this.lastHealthSent = -1.0F;
+        this.cb = -1;
         this.removeQueue.addAll(((EntityPlayer) entityhuman).removeQueue);
     }
 
@@ -720,29 +775,29 @@
 
     protected void b(MobEffect mobeffect) {
         super.b(mobeffect);
-        this.playerConnection.sendPacket(new PacketPlayOutRemoveEntityEffect(this.getId(), mobeffect));
+        this.playerConnection.sendPacket(new PacketPlayOutRemoveEntityEffect(this.getId(), mobeffect.getMobEffect()));
     }
 
     public void enderTeleportTo(double d0, double d1, double d2) {
         this.playerConnection.a(d0, d1, d2, this.yaw, this.pitch);
     }
 
-    public void b(Entity entity) {
-        this.u().getTracker().sendPacketToEntity(this, new PacketPlayOutAnimation(entity, 4));
+    public void a(Entity entity) {
+        this.x().getTracker().sendPacketToEntity(this, new PacketPlayOutAnimation(entity, 4));
     }
 
-    public void c(Entity entity) {
-        this.u().getTracker().sendPacketToEntity(this, new PacketPlayOutAnimation(entity, 5));
+    public void b(Entity entity) {
+        this.x().getTracker().sendPacketToEntity(this, new PacketPlayOutAnimation(entity, 5));
     }
 
     public void updateAbilities() {
         if (this.playerConnection != null) {
             this.playerConnection.sendPacket(new PacketPlayOutAbilities(this.abilities));
-            this.B();
+            this.F();
         }
     }
 
-    public WorldServer u() {
+    public WorldServer x() {
         return (WorldServer) this.world;
     }
 
@@ -750,31 +805,35 @@
         this.playerInteractManager.setGameMode(worldsettings_enumgamemode);
         this.playerConnection.sendPacket(new PacketPlayOutGameStateChange(3, (float) worldsettings_enumgamemode.getId()));
         if (worldsettings_enumgamemode == WorldSettings.EnumGamemode.SPECTATOR) {
-            this.mount((Entity) null);
+            this.stopRiding();
         } else {
             this.setSpectatorTarget(this);
         }
 
         this.updateAbilities();
-        this.bP();
+        this.cq();
     }
 
     public boolean isSpectator() {
         return this.playerInteractManager.getGameMode() == WorldSettings.EnumGamemode.SPECTATOR;
     }
 
+    public boolean l_() {
+        return this.playerInteractManager.getGameMode() == WorldSettings.EnumGamemode.CREATIVE;
+    }
+
     public void sendMessage(IChatBaseComponent ichatbasecomponent) {
         this.playerConnection.sendPacket(new PacketPlayOutChat(ichatbasecomponent));
     }
 
     public boolean a(int i, String s) {
-        if ("seed".equals(s) && !this.server.ae()) {
+        if ("seed".equals(s) && !this.server.aa()) {
             return true;
         } else if (!"tell".equals(s) && !"help".equals(s) && !"me".equals(s) && !"trigger".equals(s)) {
             if (this.server.getPlayerList().isOp(this.getProfile())) {
                 OpListEntry oplistentry = (OpListEntry) this.server.getPlayerList().getOPs().get(this.getProfile());
 
-                return oplistentry != null ? oplistentry.a() >= i : this.server.p() >= i;
+                return oplistentry != null ? oplistentry.a() >= i : this.server.q() >= i;
             } else {
                 return false;
             }
@@ -783,7 +842,7 @@
         }
     }
 
-    public String w() {
+    public String A() {
         String s = this.playerConnection.networkManager.getSocketAddress().toString();
 
         s = s.substring(s.indexOf("/") + 1);
@@ -793,13 +852,14 @@
 
     public void a(PacketPlayInSettings packetplayinsettings) {
         this.locale = packetplayinsettings.a();
-        this.bR = packetplayinsettings.c();
-        this.bS = packetplayinsettings.d();
-        this.getDataWatcher().watch(10, Byte.valueOf((byte) packetplayinsettings.e()));
+        this.cf = packetplayinsettings.c();
+        this.cg = packetplayinsettings.d();
+        this.getDataWatcher().set(EntityPlayer.bp, Byte.valueOf((byte) packetplayinsettings.e()));
+        this.getDataWatcher().set(EntityPlayer.bq, Byte.valueOf((byte) (packetplayinsettings.f() == EnumMainHand.LEFT ? 0 : 1)));
     }
 
     public EntityHuman.EnumChatVisibility getChatFlags() {
-        return this.bR;
+        return this.cf;
     }
 
     public void setResourcePack(String s, String s1) {
@@ -811,14 +871,14 @@
     }
 
     public void resetIdleTimer() {
-        this.bT = MinecraftServer.az();
+        this.ch = MinecraftServer.av();
     }
 
     public ServerStatisticManager getStatisticManager() {
-        return this.bK;
+        return this.bT;
     }
 
-    public void d(Entity entity) {
+    public void c(Entity entity) {
         if (entity instanceof EntityHuman) {
             this.playerConnection.sendPacket(new PacketPlayOutEntityDestroy(new int[] { entity.getId()}));
         } else {
@@ -827,28 +887,39 @@
 
     }
 
-    protected void B() {
+    public void d(Entity entity) {
+        this.removeQueue.remove(Integer.valueOf(entity.getId()));
+    }
+
+    protected void F() {
         if (this.isSpectator()) {
-            this.bj();
+            this.bM();
             this.setInvisible(true);
         } else {
-            super.B();
+            super.F();
         }
 
-        this.u().getTracker().a(this);
+        this.x().getTracker().a(this);
     }
 
-    public Entity C() {
-        return (Entity) (this.bU == null ? this : this.bU);
+    public Entity getSpecatorTarget() {
+        return (Entity) (this.ci == null ? this : this.ci);
     }
 
     public void setSpectatorTarget(Entity entity) {
-        Entity entity1 = this.C();
+        Entity entity1 = this.getSpecatorTarget();
 
-        this.bU = (Entity) (entity == null ? this : entity);
-        if (entity1 != this.bU) {
-            this.playerConnection.sendPacket(new PacketPlayOutCamera(this.bU));
-            this.enderTeleportTo(this.bU.locX, this.bU.locY, this.bU.locZ);
+        this.ci = (Entity) (entity == null ? this : entity);
+        if (entity1 != this.ci) {
+            this.playerConnection.sendPacket(new PacketPlayOutCamera(this.ci));
+            this.enderTeleportTo(this.ci.locX, this.ci.locY, this.ci.locZ);
+        }
+
+    }
+
+    protected void H() {
+        if (this.portalCooldown > 0 && !this.cj) {
+            --this.portalCooldown;
         }
 
     }
@@ -862,11 +933,33 @@
 
     }
 
-    public long D() {
-        return this.bT;
+    public long I() {
+        return this.ch;
     }
 
     public IChatBaseComponent getPlayerListName() {
         return null;
     }
+
+    public void a(EnumHand enumhand) {
+        super.a(enumhand);
+        this.cZ();
+    }
+
+    public boolean K() {
+        return this.cj;
+    }
+
+    public void L() {
+        this.cj = false;
+    }
+
+    public void M() {
+        this.setFlag(7, true);
+    }
+
+    public void N() {
+        this.setFlag(7, true);
+        this.setFlag(7, false);
+    }
 }
