--- a/net/minecraft/server/DedicatedServer.java
+++ b/net/minecraft/server/DedicatedServer.java
@@ -1,6 +1,9 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+import com.mojang.authlib.GameProfileRepository;
+import com.mojang.authlib.minecraft.MinecraftSessionService;
+import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.IOException;
@@ -18,17 +21,18 @@
 public class DedicatedServer extends MinecraftServer implements IMinecraftServer {
 
     private static final Logger LOGGER = LogManager.getLogger();
-    private final List<ServerCommand> l = Collections.synchronizedList(Lists.newArrayList());
+    private final List<ServerCommand> serverCommandQueue = Collections.synchronizedList(Lists.newArrayList());
     private RemoteStatusListener m;
-    private RemoteControlListener n;
+    public final RemoteControlCommandListener remoteControlCommandListener = new RemoteControlCommandListener(this);
+    private RemoteControlListener o;
     public PropertyManager propertyManager;
-    private EULA p;
+    private EULA q;
     private boolean generateStructures;
-    private WorldSettings.EnumGamemode r;
-    private boolean s;
+    private WorldSettings.EnumGamemode s;
+    private boolean t;
 
-    public DedicatedServer(File file) {
-        super(file, Proxy.NO_PROXY, DedicatedServer.a);
+    public DedicatedServer(File file, DataConverterManager dataconvertermanager, YggdrasilAuthenticationService yggdrasilauthenticationservice, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, UserCache usercache) {
+        super(file, Proxy.NO_PROXY, dataconvertermanager, yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, usercache);
         Thread thread = new Thread("Server Infinisleeper") {
             {
                 this.setDaemon(true);
@@ -67,20 +71,20 @@
 
         thread.setDaemon(true);
         thread.start();
-        DedicatedServer.LOGGER.info("Starting minecraft server version 1.8.8");
+        DedicatedServer.LOGGER.info("Starting minecraft server version 1.9");
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
             DedicatedServer.LOGGER.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
         }
 
         DedicatedServer.LOGGER.info("Loading properties");
         this.propertyManager = new PropertyManager(new File("server.properties"));
-        this.p = new EULA(new File("eula.txt"));
-        if (!this.p.a()) {
+        this.q = new EULA(new File("eula.txt"));
+        if (!this.q.a()) {
             DedicatedServer.LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
-            this.p.b();
+            this.q.b();
             return false;
         } else {
-            if (this.T()) {
+            if (this.R()) {
                 this.c("127.0.0.1");
             } else {
                 this.setOnlineMode(this.propertyManager.getBoolean("online-mode", true));
@@ -91,7 +95,7 @@
             this.setSpawnNPCs(this.propertyManager.getBoolean("spawn-npcs", true));
             this.setPVP(this.propertyManager.getBoolean("pvp", true));
             this.setAllowFlight(this.propertyManager.getBoolean("allow-flight", false));
-            this.setResourcePack(this.propertyManager.getString("resource-pack", ""), this.propertyManager.getString("resource-pack-hash", ""));
+            this.setResourcePack(this.propertyManager.getString("resource-pack", ""), this.aK());
             this.setMotd(this.propertyManager.getString("motd", "A Minecraft Server"));
             this.setForceGamemode(this.propertyManager.getBoolean("force-gamemode", false));
             this.setIdleTimeout(this.propertyManager.getInt("player-idle-timeout", 0));
@@ -104,24 +108,24 @@
             this.generateStructures = this.propertyManager.getBoolean("generate-structures", true);
             int i = this.propertyManager.getInt("gamemode", WorldSettings.EnumGamemode.SURVIVAL.getId());
 
-            this.r = WorldSettings.a(i);
-            DedicatedServer.LOGGER.info("Default game type: " + this.r);
+            this.s = WorldSettings.a(i);
+            DedicatedServer.LOGGER.info("Default game type: " + this.s);
             InetAddress inetaddress = null;
 
-            if (this.getServerIp().length() > 0) {
+            if (!this.getServerIp().isEmpty()) {
                 inetaddress = InetAddress.getByName(this.getServerIp());
             }
 
-            if (this.R() < 0) {
+            if (this.P() < 0) {
                 this.setPort(this.propertyManager.getInt("server-port", 25565));
             }
 
             DedicatedServer.LOGGER.info("Generating keypair");
             this.a(MinecraftEncryption.b());
-            DedicatedServer.LOGGER.info("Starting Minecraft server on " + (this.getServerIp().length() == 0 ? "*" : this.getServerIp()) + ":" + this.R());
+            DedicatedServer.LOGGER.info("Starting Minecraft server on " + (this.getServerIp().isEmpty() ? "*" : this.getServerIp()) + ":" + this.P());
 
             try {
-                this.aq().a(inetaddress, this.R());
+                this.am().a(inetaddress, this.P());
             } catch (IOException ioexception) {
                 DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
                 DedicatedServer.LOGGER.warn("The exception was: {}", new Object[] { ioexception.toString()});
@@ -136,7 +140,7 @@
                 DedicatedServer.LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
             }
 
-            if (this.aR()) {
+            if (this.aO()) {
                 this.getUserCache().c();
             }
 
@@ -146,7 +150,7 @@
                 this.a((PlayerList) (new DedicatedPlayerList(this)));
                 long j = System.nanoTime();
 
-                if (this.U() == null) {
+                if (this.S() == null) {
                     this.setWorld(this.propertyManager.getString("level-name", "world"));
                 }
 
@@ -155,7 +159,7 @@
                 String s2 = this.propertyManager.getString("generator-settings", "");
                 long k = (new Random()).nextLong();
 
-                if (s.length() > 0) {
+                if (!s.isEmpty()) {
                     try {
                         long l = Long.parseLong(s);
 
@@ -173,17 +177,20 @@
                     worldtype = WorldType.NORMAL;
                 }
 
-                this.aB();
+                this.ax();
                 this.getEnableCommandBlock();
-                this.p();
+                this.q();
                 this.getSnooperEnabled();
-                this.aK();
+                this.aF();
                 this.c(this.propertyManager.getInt("max-build-height", 256));
                 this.c((this.getMaxBuildHeight() + 8) / 16 * 16);
                 this.c(MathHelper.clamp(this.getMaxBuildHeight(), 64, 256));
                 this.propertyManager.setProperty("max-build-height", Integer.valueOf(this.getMaxBuildHeight()));
-                DedicatedServer.LOGGER.info("Preparing level \"" + this.U() + "\"");
-                this.a(this.U(), this.U(), k, worldtype, s2);
+                TileEntitySkull.a(this.getUserCache());
+                TileEntitySkull.a(this.ay());
+                UserCache.a(this.getOnlineMode());
+                DedicatedServer.LOGGER.info("Preparing level \"" + this.S() + "\"");
+                this.a(this.S(), this.S(), k, worldtype, s2);
                 long i1 = System.nanoTime() - j;
                 String s3 = String.format("%.3fs", new Object[] { Double.valueOf((double) i1 / 1.0E9D)});
 
@@ -196,11 +203,11 @@
 
                 if (this.propertyManager.getBoolean("enable-rcon", false)) {
                     DedicatedServer.LOGGER.info("Starting remote control listener");
-                    this.n = new RemoteControlListener(this);
-                    this.n.a();
+                    this.o = new RemoteControlListener(this);
+                    this.o.a();
                 }
 
-                if (this.aS() > 0L) {
+                if (this.aP() > 0L) {
                     Thread thread1 = new Thread(new ThreadWatchdog(this));
 
                     thread1.setName("Server Watchdog");
@@ -213,9 +220,35 @@
         }
     }
 
+    public String aK() {
+        String s = "";
+
+        if (this.propertyManager.a("resource-pack-hash") && !this.propertyManager.a("resource-pack-sha1")) {
+            DedicatedServer.LOGGER.warn("ressource-pack-hash is depricated. Please use ressource-pack-sha1 instead.");
+            s = this.propertyManager.getString("resource-pack-hash", "");
+            this.propertyManager.getString("resource-pack-sha1", s);
+            this.propertyManager.b("resource-pack-hash");
+        }
+
+        if (this.propertyManager.a("resource-pack-hash") && this.propertyManager.a("resource-pack-sha1")) {
+            DedicatedServer.LOGGER.warn("ressource-pack-hash is depricated and found along side resource-pack-sha1. resource-pack-hash will be ignored.");
+        }
+
+        s = this.propertyManager.getString("resource-pack-sha1", "");
+        if (!s.equals("") && !s.matches("^[a-f0-9]{40}$")) {
+            DedicatedServer.LOGGER.warn("Invalid sha1 for ressource-pack-sha1");
+        }
+
+        if (!this.propertyManager.getString("resource-pack", "").equals("") && s.equals("")) {
+            DedicatedServer.LOGGER.warn("You specified a resource pack without providing a sha1 hash. Pack will be updated on the client only if you change the name of the pack.");
+        }
+
+        return s;
+    }
+
     public void setGamemode(WorldSettings.EnumGamemode worldsettings_enumgamemode) {
         super.setGamemode(worldsettings_enumgamemode);
-        this.r = worldsettings_enumgamemode;
+        this.s = worldsettings_enumgamemode;
     }
 
     public boolean getGenerateStructures() {
@@ -223,7 +256,7 @@
     }
 
     public WorldSettings.EnumGamemode getGamemode() {
-        return this.r;
+        return this.s;
     }
 
     public EnumDifficulty getDifficulty() {
@@ -261,13 +294,13 @@
         return crashreport;
     }
 
-    protected void z() {
+    protected void B() {
         System.exit(0);
     }
 
-    protected void B() {
-        super.B();
-        this.aO();
+    protected void D() {
+        super.D();
+        this.aL();
     }
 
     public boolean getAllowNether() {
@@ -279,8 +312,8 @@
     }
 
     public void a(MojangStatisticsGenerator mojangstatisticsgenerator) {
-        mojangstatisticsgenerator.a("whitelist_enabled", Boolean.valueOf(this.aP().getHasWhitelist()));
-        mojangstatisticsgenerator.a("whitelist_count", Integer.valueOf(this.aP().getWhitelisted().length));
+        mojangstatisticsgenerator.a("whitelist_enabled", Boolean.valueOf(this.aM().getHasWhitelist()));
+        mojangstatisticsgenerator.a("whitelist_count", Integer.valueOf(this.aM().getWhitelisted().length));
         super.a(mojangstatisticsgenerator);
     }
 
@@ -289,27 +322,27 @@
     }
 
     public void issueCommand(String s, ICommandListener icommandlistener) {
-        this.l.add(new ServerCommand(s, icommandlistener));
+        this.serverCommandQueue.add(new ServerCommand(s, icommandlistener));
     }
 
-    public void aO() {
-        while (!this.l.isEmpty()) {
-            ServerCommand servercommand = (ServerCommand) this.l.remove(0);
+    public void aL() {
+        while (!this.serverCommandQueue.isEmpty()) {
+            ServerCommand servercommand = (ServerCommand) this.serverCommandQueue.remove(0);
 
             this.getCommandHandler().a(servercommand.source, servercommand.command);
         }
 
     }
 
-    public boolean ae() {
+    public boolean aa() {
         return true;
     }
 
-    public boolean ai() {
+    public boolean ae() {
         return this.propertyManager.getBoolean("use-native-transport", true);
     }
 
-    public DedicatedPlayerList aP() {
+    public DedicatedPlayerList aM() {
         return (DedicatedPlayerList) super.getPlayerList();
     }
 
@@ -339,13 +372,25 @@
         return file != null ? file.getAbsolutePath() : "No settings file";
     }
 
-    public void aQ() {
+    public String d_() {
+        return this.getServerIp();
+    }
+
+    public int e_() {
+        return this.P();
+    }
+
+    public String f_() {
+        return this.getMotd();
+    }
+
+    public void aN() {
         ServerGUI.a(this);
-        this.s = true;
+        this.t = true;
     }
 
-    public boolean as() {
-        return this.s;
+    public boolean ao() {
+        return this.t;
     }
 
     public String a(WorldSettings.EnumGamemode worldsettings_enumgamemode, boolean flag) {
@@ -361,11 +406,11 @@
     }
 
     public boolean a(World world, BlockPosition blockposition, EntityHuman entityhuman) {
-        if (world.worldProvider.getDimension() != 0) {
+        if (world.worldProvider.getDimensionManager().getDimensionID() != 0) {
             return false;
-        } else if (this.aP().getOPs().isEmpty()) {
+        } else if (this.aM().getOPs().isEmpty()) {
             return false;
-        } else if (this.aP().isOp(entityhuman.getProfile())) {
+        } else if (this.aM().isOp(entityhuman.getProfile())) {
             return false;
         } else if (this.getSpawnProtection() <= 0) {
             return false;
@@ -379,7 +424,7 @@
         }
     }
 
-    public int p() {
+    public int q() {
         return this.propertyManager.getInt("op-permission-level", 4);
     }
 
@@ -389,35 +434,35 @@
         this.a();
     }
 
-    public boolean q() {
+    public boolean r() {
         return this.propertyManager.getBoolean("broadcast-rcon-to-ops", true);
     }
 
-    public boolean r() {
+    public boolean s() {
         return this.propertyManager.getBoolean("broadcast-console-to-ops", true);
     }
 
-    public boolean aB() {
+    public boolean ax() {
         return this.propertyManager.getBoolean("announce-player-achievements", true);
     }
 
-    public int aI() {
-        int i = this.propertyManager.getInt("max-world-size", super.aI());
+    public int aD() {
+        int i = this.propertyManager.getInt("max-world-size", super.aD());
 
         if (i < 1) {
             i = 1;
-        } else if (i > super.aI()) {
-            i = super.aI();
+        } else if (i > super.aD()) {
+            i = super.aD();
         }
 
         return i;
     }
 
-    public int aK() {
-        return this.propertyManager.getInt("network-compression-threshold", super.aK());
+    public int aF() {
+        return this.propertyManager.getInt("network-compression-threshold", super.aF());
     }
 
-    protected boolean aR() {
+    protected boolean aO() {
         boolean flag = false;
 
         int i;
@@ -425,7 +470,7 @@
         for (i = 0; !flag && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the user banlist, retrying in a few seconds");
-                this.aU();
+                this.aR();
             }
 
             flag = NameReferencingFileConverter.a((MinecraftServer) this);
@@ -436,7 +481,7 @@
         for (i = 0; !flag1 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the ip banlist, retrying in a few seconds");
-                this.aU();
+                this.aR();
             }
 
             flag1 = NameReferencingFileConverter.b((MinecraftServer) this);
@@ -447,7 +492,7 @@
         for (i = 0; !flag2 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the op list, retrying in a few seconds");
-                this.aU();
+                this.aR();
             }
 
             flag2 = NameReferencingFileConverter.c((MinecraftServer) this);
@@ -458,7 +503,7 @@
         for (i = 0; !flag3 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the whitelist, retrying in a few seconds");
-                this.aU();
+                this.aR();
             }
 
             flag3 = NameReferencingFileConverter.d((MinecraftServer) this);
@@ -469,7 +514,7 @@
         for (i = 0; !flag4 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the player save files, retrying in a few seconds");
-                this.aU();
+                this.aR();
             }
 
             flag4 = NameReferencingFileConverter.a(this, this.propertyManager);
@@ -478,7 +523,7 @@
         return flag || flag1 || flag2 || flag3 || flag4;
     }
 
-    private void aU() {
+    private void aR() {
         try {
             Thread.sleep(5000L);
         } catch (InterruptedException interruptedexception) {
@@ -486,7 +531,7 @@
         }
     }
 
-    public long aS() {
+    public long aP() {
         return this.propertyManager.getLong("max-tick-time", TimeUnit.MINUTES.toMillis(1L));
     }
 
@@ -495,12 +540,12 @@
     }
 
     public String executeRemoteCommand(String s) {
-        RemoteControlCommandListener.getInstance().i();
-        this.b.a(RemoteControlCommandListener.getInstance(), s);
-        return RemoteControlCommandListener.getInstance().j();
+        this.remoteControlCommandListener.clearMessages();
+        this.b.a(this.remoteControlCommandListener, s);
+        return this.remoteControlCommandListener.getMessages();
     }
 
     public PlayerList getPlayerList() {
-        return this.aP();
+        return this.aM();
     }
 }
