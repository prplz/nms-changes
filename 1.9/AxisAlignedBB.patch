--- a/net/minecraft/server/AxisAlignedBB.java
+++ b/net/minecraft/server/AxisAlignedBB.java
@@ -18,13 +18,45 @@
         this.f = Math.max(d2, d5);
     }
 
+    public AxisAlignedBB(BlockPosition blockposition) {
+        this((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), (double) (blockposition.getX() + 1), (double) (blockposition.getY() + 1), (double) (blockposition.getZ() + 1));
+    }
+
     public AxisAlignedBB(BlockPosition blockposition, BlockPosition blockposition1) {
-        this.a = (double) blockposition.getX();
-        this.b = (double) blockposition.getY();
-        this.c = (double) blockposition.getZ();
-        this.d = (double) blockposition1.getX();
-        this.e = (double) blockposition1.getY();
-        this.f = (double) blockposition1.getZ();
+        this((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), (double) blockposition1.getX(), (double) blockposition1.getY(), (double) blockposition1.getZ());
+    }
+
+    public AxisAlignedBB e(double d0) {
+        return new AxisAlignedBB(this.a, this.b, this.c, this.d, d0, this.f);
+    }
+
+    public boolean equals(Object object) {
+        if (this == object) {
+            return true;
+        } else if (!(object instanceof AxisAlignedBB)) {
+            return false;
+        } else {
+            AxisAlignedBB axisalignedbb = (AxisAlignedBB) object;
+
+            return Double.compare(axisalignedbb.a, this.a) != 0 ? false : (Double.compare(axisalignedbb.b, this.b) != 0 ? false : (Double.compare(axisalignedbb.c, this.c) != 0 ? false : (Double.compare(axisalignedbb.d, this.d) != 0 ? false : (Double.compare(axisalignedbb.e, this.e) != 0 ? false : Double.compare(axisalignedbb.f, this.f) == 0))));
+        }
+    }
+
+    public int hashCode() {
+        long i = Double.doubleToLongBits(this.a);
+        int j = (int) (i ^ i >>> 32);
+
+        i = Double.doubleToLongBits(this.b);
+        j = 31 * j + (int) (i ^ i >>> 32);
+        i = Double.doubleToLongBits(this.c);
+        j = 31 * j + (int) (i ^ i >>> 32);
+        i = Double.doubleToLongBits(this.d);
+        j = 31 * j + (int) (i ^ i >>> 32);
+        i = Double.doubleToLongBits(this.e);
+        j = 31 * j + (int) (i ^ i >>> 32);
+        i = Double.doubleToLongBits(this.f);
+        j = 31 * j + (int) (i ^ i >>> 32);
+        return j;
     }
 
     public AxisAlignedBB a(double d0, double d1, double d2) {
@@ -67,6 +99,10 @@
         return new AxisAlignedBB(d3, d4, d5, d6, d7, d8);
     }
 
+    public AxisAlignedBB g(double d0) {
+        return this.grow(d0, d0, d0);
+    }
+
     public AxisAlignedBB a(AxisAlignedBB axisalignedbb) {
         double d0 = Math.min(this.a, axisalignedbb.a);
         double d1 = Math.min(this.b, axisalignedbb.b);
@@ -78,21 +114,14 @@
         return new AxisAlignedBB(d0, d1, d2, d3, d4, d5);
     }
 
-    public static AxisAlignedBB a(double d0, double d1, double d2, double d3, double d4, double d5) {
-        double d6 = Math.min(d0, d3);
-        double d7 = Math.min(d1, d4);
-        double d8 = Math.min(d2, d5);
-        double d9 = Math.max(d0, d3);
-        double d10 = Math.max(d1, d4);
-        double d11 = Math.max(d2, d5);
-
-        return new AxisAlignedBB(d6, d7, d8, d9, d10, d11);
-    }
-
     public AxisAlignedBB c(double d0, double d1, double d2) {
         return new AxisAlignedBB(this.a + d0, this.b + d1, this.c + d2, this.d + d0, this.e + d1, this.f + d2);
     }
 
+    public AxisAlignedBB a(BlockPosition blockposition) {
+        return new AxisAlignedBB(this.a + (double) blockposition.getX(), this.b + (double) blockposition.getY(), this.c + (double) blockposition.getZ(), this.d + (double) blockposition.getX(), this.e + (double) blockposition.getY(), this.f + (double) blockposition.getZ());
+    }
+
     public double a(AxisAlignedBB axisalignedbb, double d0) {
         if (axisalignedbb.e > this.b && axisalignedbb.b < this.e && axisalignedbb.f > this.c && axisalignedbb.c < this.f) {
             double d1;
@@ -160,11 +189,15 @@
     }
 
     public boolean b(AxisAlignedBB axisalignedbb) {
-        return axisalignedbb.d > this.a && axisalignedbb.a < this.d ? (axisalignedbb.e > this.b && axisalignedbb.b < this.e ? axisalignedbb.f > this.c && axisalignedbb.c < this.f : false) : false;
+        return this.a(axisalignedbb.a, axisalignedbb.b, axisalignedbb.c, axisalignedbb.d, axisalignedbb.e, axisalignedbb.f);
+    }
+
+    public boolean a(double d0, double d1, double d2, double d3, double d4, double d5) {
+        return this.a < d3 && this.d > d0 && this.b < d4 && this.e > d1 && this.c < d5 && this.f > d2;
     }
 
     public boolean a(Vec3D vec3d) {
-        return vec3d.a > this.a && vec3d.a < this.d ? (vec3d.b > this.b && vec3d.b < this.e ? vec3d.c > this.c && vec3d.c < this.f : false) : false;
+        return vec3d.x > this.a && vec3d.x < this.d ? (vec3d.y > this.b && vec3d.y < this.e ? vec3d.z > this.c && vec3d.z < this.f : false) : false;
     }
 
     public double a() {
@@ -175,108 +208,79 @@
         return (d0 + d1 + d2) / 3.0D;
     }
 
-    public AxisAlignedBB shrink(double d0, double d1, double d2) {
-        double d3 = this.a + d0;
-        double d4 = this.b + d1;
-        double d5 = this.c + d2;
-        double d6 = this.d - d0;
-        double d7 = this.e - d1;
-        double d8 = this.f - d2;
-
-        return new AxisAlignedBB(d3, d4, d5, d6, d7, d8);
+    public AxisAlignedBB shrink(double d0) {
+        return this.g(-d0);
     }
 
     public MovingObjectPosition a(Vec3D vec3d, Vec3D vec3d1) {
-        Vec3D vec3d2 = vec3d.a(vec3d1, this.a);
-        Vec3D vec3d3 = vec3d.a(vec3d1, this.d);
-        Vec3D vec3d4 = vec3d.b(vec3d1, this.b);
-        Vec3D vec3d5 = vec3d.b(vec3d1, this.e);
-        Vec3D vec3d6 = vec3d.c(vec3d1, this.c);
-        Vec3D vec3d7 = vec3d.c(vec3d1, this.f);
-
-        if (!this.b(vec3d2)) {
-            vec3d2 = null;
-        }
-
-        if (!this.b(vec3d3)) {
-            vec3d3 = null;
-        }
+        Vec3D vec3d2 = this.a(this.a, vec3d, vec3d1);
+        EnumDirection enumdirection = EnumDirection.WEST;
+        Vec3D vec3d3 = this.a(this.d, vec3d, vec3d1);
 
-        if (!this.c(vec3d4)) {
-            vec3d4 = null;
+        if (vec3d3 != null && this.a(vec3d, vec3d2, vec3d3)) {
+            vec3d2 = vec3d3;
+            enumdirection = EnumDirection.EAST;
         }
 
-        if (!this.c(vec3d5)) {
-            vec3d5 = null;
+        vec3d3 = this.b(this.b, vec3d, vec3d1);
+        if (vec3d3 != null && this.a(vec3d, vec3d2, vec3d3)) {
+            vec3d2 = vec3d3;
+            enumdirection = EnumDirection.DOWN;
         }
 
-        if (!this.d(vec3d6)) {
-            vec3d6 = null;
+        vec3d3 = this.b(this.e, vec3d, vec3d1);
+        if (vec3d3 != null && this.a(vec3d, vec3d2, vec3d3)) {
+            vec3d2 = vec3d3;
+            enumdirection = EnumDirection.UP;
         }
 
-        if (!this.d(vec3d7)) {
-            vec3d7 = null;
+        vec3d3 = this.c(this.c, vec3d, vec3d1);
+        if (vec3d3 != null && this.a(vec3d, vec3d2, vec3d3)) {
+            vec3d2 = vec3d3;
+            enumdirection = EnumDirection.NORTH;
         }
 
-        Vec3D vec3d8 = null;
-
-        if (vec3d2 != null) {
-            vec3d8 = vec3d2;
+        vec3d3 = this.c(this.f, vec3d, vec3d1);
+        if (vec3d3 != null && this.a(vec3d, vec3d2, vec3d3)) {
+            vec3d2 = vec3d3;
+            enumdirection = EnumDirection.SOUTH;
         }
 
-        if (vec3d3 != null && (vec3d8 == null || vec3d.distanceSquared(vec3d3) < vec3d.distanceSquared(vec3d8))) {
-            vec3d8 = vec3d3;
-        }
+        return vec3d2 == null ? null : new MovingObjectPosition(vec3d2, enumdirection);
+    }
 
-        if (vec3d4 != null && (vec3d8 == null || vec3d.distanceSquared(vec3d4) < vec3d.distanceSquared(vec3d8))) {
-            vec3d8 = vec3d4;
-        }
+    boolean a(Vec3D vec3d, Vec3D vec3d1, Vec3D vec3d2) {
+        return vec3d1 == null || vec3d.distanceSquared(vec3d2) < vec3d.distanceSquared(vec3d1);
+    }
 
-        if (vec3d5 != null && (vec3d8 == null || vec3d.distanceSquared(vec3d5) < vec3d.distanceSquared(vec3d8))) {
-            vec3d8 = vec3d5;
-        }
+    Vec3D a(double d0, Vec3D vec3d, Vec3D vec3d1) {
+        Vec3D vec3d2 = vec3d.a(vec3d1, d0);
 
-        if (vec3d6 != null && (vec3d8 == null || vec3d.distanceSquared(vec3d6) < vec3d.distanceSquared(vec3d8))) {
-            vec3d8 = vec3d6;
-        }
+        return vec3d2 != null && this.b(vec3d2) ? vec3d2 : null;
+    }
 
-        if (vec3d7 != null && (vec3d8 == null || vec3d.distanceSquared(vec3d7) < vec3d.distanceSquared(vec3d8))) {
-            vec3d8 = vec3d7;
-        }
+    Vec3D b(double d0, Vec3D vec3d, Vec3D vec3d1) {
+        Vec3D vec3d2 = vec3d.b(vec3d1, d0);
 
-        if (vec3d8 == null) {
-            return null;
-        } else {
-            EnumDirection enumdirection = null;
+        return vec3d2 != null && this.c(vec3d2) ? vec3d2 : null;
+    }
 
-            if (vec3d8 == vec3d2) {
-                enumdirection = EnumDirection.WEST;
-            } else if (vec3d8 == vec3d3) {
-                enumdirection = EnumDirection.EAST;
-            } else if (vec3d8 == vec3d4) {
-                enumdirection = EnumDirection.DOWN;
-            } else if (vec3d8 == vec3d5) {
-                enumdirection = EnumDirection.UP;
-            } else if (vec3d8 == vec3d6) {
-                enumdirection = EnumDirection.NORTH;
-            } else {
-                enumdirection = EnumDirection.SOUTH;
-            }
+    Vec3D c(double d0, Vec3D vec3d, Vec3D vec3d1) {
+        Vec3D vec3d2 = vec3d.c(vec3d1, d0);
 
-            return new MovingObjectPosition(vec3d8, enumdirection);
-        }
+        return vec3d2 != null && this.d(vec3d2) ? vec3d2 : null;
     }
 
-    private boolean b(Vec3D vec3d) {
-        return vec3d == null ? false : vec3d.b >= this.b && vec3d.b <= this.e && vec3d.c >= this.c && vec3d.c <= this.f;
+    public boolean b(Vec3D vec3d) {
+        return vec3d.y >= this.b && vec3d.y <= this.e && vec3d.z >= this.c && vec3d.z <= this.f;
     }
 
-    private boolean c(Vec3D vec3d) {
-        return vec3d == null ? false : vec3d.a >= this.a && vec3d.a <= this.d && vec3d.c >= this.c && vec3d.c <= this.f;
+    public boolean c(Vec3D vec3d) {
+        return vec3d.x >= this.a && vec3d.x <= this.d && vec3d.z >= this.c && vec3d.z <= this.f;
     }
 
-    private boolean d(Vec3D vec3d) {
-        return vec3d == null ? false : vec3d.a >= this.a && vec3d.a <= this.d && vec3d.b >= this.b && vec3d.b <= this.e;
+    public boolean d(Vec3D vec3d) {
+        return vec3d.x >= this.a && vec3d.x <= this.d && vec3d.y >= this.b && vec3d.y <= this.e;
     }
 
     public String toString() {
