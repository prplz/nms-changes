--- a/net/minecraft/server/TileEntityHopper.java
+++ b/net/minecraft/server/TileEntityHopper.java
@@ -3,7 +3,7 @@
 import java.util.Iterator;
 import java.util.List;
 
-public class TileEntityHopper extends TileEntityContainer implements IHopper, IUpdatePlayerListBox {
+public class TileEntityHopper extends TileEntityLootable implements IHopper, ITickable {
 
     private ItemStack[] items = new ItemStack[5];
     private String f;
@@ -13,41 +13,45 @@
 
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
-        NBTTagList nbttaglist = nbttagcompound.getList("Items", 10);
-
         this.items = new ItemStack[this.getSize()];
         if (nbttagcompound.hasKeyOfType("CustomName", 8)) {
             this.f = nbttagcompound.getString("CustomName");
         }
 
         this.g = nbttagcompound.getInt("TransferCooldown");
+        if (!this.c(nbttagcompound)) {
+            NBTTagList nbttaglist = nbttagcompound.getList("Items", 10);
 
-        for (int i = 0; i < nbttaglist.size(); ++i) {
-            NBTTagCompound nbttagcompound1 = nbttaglist.get(i);
-            byte b0 = nbttagcompound1.getByte("Slot");
+            for (int i = 0; i < nbttaglist.size(); ++i) {
+                NBTTagCompound nbttagcompound1 = nbttaglist.get(i);
+                byte b0 = nbttagcompound1.getByte("Slot");
 
-            if (b0 >= 0 && b0 < this.items.length) {
-                this.items[b0] = ItemStack.createStack(nbttagcompound1);
+                if (b0 >= 0 && b0 < this.items.length) {
+                    this.items[b0] = ItemStack.createStack(nbttagcompound1);
+                }
             }
         }
 
     }
 
-    public void b(NBTTagCompound nbttagcompound) {
-        super.b(nbttagcompound);
-        NBTTagList nbttaglist = new NBTTagList();
+    public void save(NBTTagCompound nbttagcompound) {
+        super.save(nbttagcompound);
+        if (!this.d(nbttagcompound)) {
+            NBTTagList nbttaglist = new NBTTagList();
 
-        for (int i = 0; i < this.items.length; ++i) {
-            if (this.items[i] != null) {
-                NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+            for (int i = 0; i < this.items.length; ++i) {
+                if (this.items[i] != null) {
+                    NBTTagCompound nbttagcompound1 = new NBTTagCompound();
 
-                nbttagcompound1.setByte("Slot", (byte) i);
-                this.items[i].save(nbttagcompound1);
-                nbttaglist.add(nbttagcompound1);
+                    nbttagcompound1.setByte("Slot", (byte) i);
+                    this.items[i].save(nbttagcompound1);
+                    nbttaglist.add(nbttagcompound1);
+                }
             }
+
+            nbttagcompound.set("Items", nbttaglist);
         }
 
-        nbttagcompound.set("Items", nbttaglist);
         nbttagcompound.setInt("TransferCooldown", this.g);
         if (this.hasCustomName()) {
             nbttagcompound.setString("CustomName", this.f);
@@ -55,51 +59,27 @@
 
     }
 
-    public void update() {
-        super.update();
-    }
-
     public int getSize() {
         return this.items.length;
     }
 
     public ItemStack getItem(int i) {
+        this.d((EntityHuman) null);
         return this.items[i];
     }
 
     public ItemStack splitStack(int i, int j) {
-        if (this.items[i] != null) {
-            ItemStack itemstack;
-
-            if (this.items[i].count <= j) {
-                itemstack = this.items[i];
-                this.items[i] = null;
-                return itemstack;
-            } else {
-                itemstack = this.items[i].cloneAndSubtract(j);
-                if (this.items[i].count == 0) {
-                    this.items[i] = null;
-                }
-
-                return itemstack;
-            }
-        } else {
-            return null;
-        }
+        this.d((EntityHuman) null);
+        return ContainerUtil.a(this.items, i, j);
     }
 
     public ItemStack splitWithoutUpdate(int i) {
-        if (this.items[i] != null) {
-            ItemStack itemstack = this.items[i];
-
-            this.items[i] = null;
-            return itemstack;
-        } else {
-            return null;
-        }
+        this.d((EntityHuman) null);
+        return ContainerUtil.a(this.items, i);
     }
 
     public void setItem(int i, ItemStack itemstack) {
+        this.d((EntityHuman) null);
         this.items[i] = itemstack;
         if (itemstack != null && itemstack.count > this.getMaxStackSize()) {
             itemstack.count = this.getMaxStackSize();
@@ -112,7 +92,7 @@
     }
 
     public boolean hasCustomName() {
-        return this.f != null && this.f.length() > 0;
+        return this.f != null && !this.f.isEmpty();
     }
 
     public void a(String s) {
@@ -138,8 +118,8 @@
     public void c() {
         if (this.world != null && !this.world.isClientSide) {
             --this.g;
-            if (!this.n()) {
-                this.d(0);
+            if (!this.o()) {
+                this.setCooldown(0);
                 this.m();
             }
 
@@ -148,19 +128,19 @@
 
     public boolean m() {
         if (this.world != null && !this.world.isClientSide) {
-            if (!this.n() && BlockHopper.f(this.u())) {
+            if (!this.o() && BlockHopper.f(this.u())) {
                 boolean flag = false;
 
-                if (!this.p()) {
-                    flag = this.r();
+                if (!this.q()) {
+                    flag = this.H();
                 }
 
-                if (!this.q()) {
+                if (!this.r()) {
                     flag = a((IHopper) this) || flag;
                 }
 
                 if (flag) {
-                    this.d(8);
+                    this.setCooldown(8);
                     this.update();
                     return true;
                 }
@@ -172,7 +152,7 @@
         }
     }
 
-    private boolean p() {
+    private boolean q() {
         ItemStack[] aitemstack = this.items;
         int i = aitemstack.length;
 
@@ -187,7 +167,7 @@
         return true;
     }
 
-    private boolean q() {
+    private boolean r() {
         ItemStack[] aitemstack = this.items;
         int i = aitemstack.length;
 
@@ -202,13 +182,13 @@
         return true;
     }
 
-    private boolean r() {
-        IInventory iinventory = this.H();
+    private boolean H() {
+        IInventory iinventory = this.I();
 
         if (iinventory == null) {
             return false;
         } else {
-            EnumDirection enumdirection = BlockHopper.b(this.u()).opposite();
+            EnumDirection enumdirection = BlockHopper.e(this.u()).opposite();
 
             if (this.a(iinventory, enumdirection)) {
                 return false;
@@ -311,7 +291,7 @@
                 }
             }
         } else {
-            Iterator iterator = a(ihopper.getWorld(), ihopper.A(), ihopper.B() + 1.0D, ihopper.C()).iterator();
+            Iterator iterator = a(ihopper.getWorld(), ihopper.E(), ihopper.F(), ihopper.G()).iterator();
 
             while (iterator.hasNext()) {
                 EntityItem entityitem = (EntityItem) iterator.next();
@@ -417,8 +397,8 @@
                 if (iinventory instanceof TileEntityHopper) {
                     TileEntityHopper tileentityhopper = (TileEntityHopper) iinventory;
 
-                    if (tileentityhopper.o()) {
-                        tileentityhopper.d(8);
+                    if (tileentityhopper.p()) {
+                        tileentityhopper.setCooldown(8);
                     }
 
                     iinventory.update();
@@ -431,18 +411,18 @@
         return itemstack;
     }
 
-    private IInventory H() {
-        EnumDirection enumdirection = BlockHopper.b(this.u());
+    private IInventory I() {
+        EnumDirection enumdirection = BlockHopper.e(this.u());
 
-        return b(this.getWorld(), (double) (this.position.getX() + enumdirection.getAdjacentX()), (double) (this.position.getY() + enumdirection.getAdjacentY()), (double) (this.position.getZ() + enumdirection.getAdjacentZ()));
+        return b(this.getWorld(), this.E() + (double) enumdirection.getAdjacentX(), this.F() + (double) enumdirection.getAdjacentY(), this.G() + (double) enumdirection.getAdjacentZ());
     }
 
     public static IInventory b(IHopper ihopper) {
-        return b(ihopper.getWorld(), ihopper.A(), ihopper.B() + 1.0D, ihopper.C());
+        return b(ihopper.getWorld(), ihopper.E(), ihopper.F() + 1.0D, ihopper.G());
     }
 
     public static List<EntityItem> a(World world, double d0, double d1, double d2) {
-        return world.a(EntityItem.class, new AxisAlignedBB(d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, d0 + 0.5D, d1 + 0.5D, d2 + 0.5D), IEntitySelector.a);
+        return world.a(EntityItem.class, new AxisAlignedBB(d0 - 0.5D, d1, d2 - 0.5D, d0 + 0.5D, d1 + 1.5D, d2 + 0.5D), IEntitySelector.a);
     }
 
     public static IInventory b(World world, double d0, double d1, double d2) {
@@ -459,7 +439,7 @@
             if (tileentity instanceof IInventory) {
                 object = (IInventory) tileentity;
                 if (object instanceof TileEntityChest && block instanceof BlockChest) {
-                    object = ((BlockChest) block).f(world, blockposition);
+                    object = ((BlockChest) block).c(world, blockposition);
                 }
             }
         }
@@ -467,7 +447,7 @@
         if (object == null) {
             List list = world.a((Entity) null, new AxisAlignedBB(d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, d0 + 0.5D, d1 + 0.5D, d2 + 0.5D), IEntitySelector.c);
 
-            if (list.size() > 0) {
+            if (!list.isEmpty()) {
                 object = (IInventory) list.get(world.random.nextInt(list.size()));
             }
         }
@@ -479,27 +459,27 @@
         return itemstack.getItem() != itemstack1.getItem() ? false : (itemstack.getData() != itemstack1.getData() ? false : (itemstack.count > itemstack.getMaxStackSize() ? false : ItemStack.equals(itemstack, itemstack1)));
     }
 
-    public double A() {
+    public double E() {
         return (double) this.position.getX() + 0.5D;
     }
 
-    public double B() {
+    public double F() {
         return (double) this.position.getY() + 0.5D;
     }
 
-    public double C() {
+    public double G() {
         return (double) this.position.getZ() + 0.5D;
     }
 
-    public void d(int i) {
+    public void setCooldown(int i) {
         this.g = i;
     }
 
-    public boolean n() {
+    public boolean o() {
         return this.g > 0;
     }
 
-    public boolean o() {
+    public boolean p() {
         return this.g <= 1;
     }
 
@@ -508,6 +488,7 @@
     }
 
     public Container createContainer(PlayerInventory playerinventory, EntityHuman entityhuman) {
+        this.d(entityhuman);
         return new ContainerHopper(playerinventory, this, entityhuman);
     }
 
@@ -515,13 +496,15 @@
         return 0;
     }
 
-    public void b(int i, int j) {}
+    public void setProperty(int i, int j) {}
 
     public int g() {
         return 0;
     }
 
     public void l() {
+        this.d((EntityHuman) null);
+
         for (int i = 0; i < this.items.length; ++i) {
             this.items[i] = null;
         }
