--- a/net/minecraft/server/BlockFire.java
+++ b/net/minecraft/server/BlockFire.java
@@ -7,43 +7,25 @@
 public class BlockFire extends Block {
 
     public static final BlockStateInteger AGE = BlockStateInteger.of("age", 0, 15);
-    public static final BlockStateBoolean FLIP = BlockStateBoolean.of("flip");
-    public static final BlockStateBoolean ALT = BlockStateBoolean.of("alt");
     public static final BlockStateBoolean NORTH = BlockStateBoolean.of("north");
     public static final BlockStateBoolean EAST = BlockStateBoolean.of("east");
     public static final BlockStateBoolean SOUTH = BlockStateBoolean.of("south");
     public static final BlockStateBoolean WEST = BlockStateBoolean.of("west");
-    public static final BlockStateInteger UPPER = BlockStateInteger.of("upper", 0, 2);
+    public static final BlockStateBoolean UPPER = BlockStateBoolean.of("up");
     private final Map<Block, Integer> flameChances = Maps.newIdentityHashMap();
-    private final Map<Block, Integer> U = Maps.newIdentityHashMap();
+    private final Map<Block, Integer> B = Maps.newIdentityHashMap();
 
     public IBlockData updateState(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        int i = blockposition.getX();
-        int j = blockposition.getY();
-        int k = blockposition.getZ();
-
-        if (!World.a(iblockaccess, blockposition.down()) && !Blocks.FIRE.e(iblockaccess, blockposition.down())) {
-            boolean flag = (i + j + k & 1) == 1;
-            boolean flag1 = (i / 2 + j / 2 + k / 2 & 1) == 1;
-            int l = 0;
-
-            if (this.e(iblockaccess, blockposition.up())) {
-                l = flag ? 1 : 2;
-            }
-
-            return iblockdata.set(BlockFire.NORTH, Boolean.valueOf(this.e(iblockaccess, blockposition.north()))).set(BlockFire.EAST, Boolean.valueOf(this.e(iblockaccess, blockposition.east()))).set(BlockFire.SOUTH, Boolean.valueOf(this.e(iblockaccess, blockposition.south()))).set(BlockFire.WEST, Boolean.valueOf(this.e(iblockaccess, blockposition.west()))).set(BlockFire.UPPER, Integer.valueOf(l)).set(BlockFire.FLIP, Boolean.valueOf(flag1)).set(BlockFire.ALT, Boolean.valueOf(flag));
-        } else {
-            return this.getBlockData();
-        }
+        return !iblockaccess.getType(blockposition.down()).q() && !Blocks.FIRE.c(iblockaccess, blockposition.down()) ? iblockdata.set(BlockFire.NORTH, Boolean.valueOf(this.c(iblockaccess, blockposition.north()))).set(BlockFire.EAST, Boolean.valueOf(this.c(iblockaccess, blockposition.east()))).set(BlockFire.SOUTH, Boolean.valueOf(this.c(iblockaccess, blockposition.south()))).set(BlockFire.WEST, Boolean.valueOf(this.c(iblockaccess, blockposition.west()))).set(BlockFire.UPPER, Boolean.valueOf(this.c(iblockaccess, blockposition.up()))) : this.getBlockData();
     }
 
     protected BlockFire() {
         super(Material.FIRE);
-        this.j(this.blockStateList.getBlockData().set(BlockFire.AGE, Integer.valueOf(0)).set(BlockFire.FLIP, Boolean.valueOf(false)).set(BlockFire.ALT, Boolean.valueOf(false)).set(BlockFire.NORTH, Boolean.valueOf(false)).set(BlockFire.EAST, Boolean.valueOf(false)).set(BlockFire.SOUTH, Boolean.valueOf(false)).set(BlockFire.WEST, Boolean.valueOf(false)).set(BlockFire.UPPER, Integer.valueOf(0)));
+        this.w(this.blockStateList.getBlockData().set(BlockFire.AGE, Integer.valueOf(0)).set(BlockFire.NORTH, Boolean.valueOf(false)).set(BlockFire.EAST, Boolean.valueOf(false)).set(BlockFire.SOUTH, Boolean.valueOf(false)).set(BlockFire.WEST, Boolean.valueOf(false)).set(BlockFire.UPPER, Boolean.valueOf(false)));
         this.a(true);
     }
 
-    public static void l() {
+    public static void e() {
         Blocks.FIRE.a(Blocks.PLANKS, 5, 20);
         Blocks.FIRE.a(Blocks.DOUBLE_WOODEN_SLAB, 5, 20);
         Blocks.FIRE.a(Blocks.WOODEN_SLAB, 5, 20);
@@ -63,6 +45,8 @@
         Blocks.FIRE.a(Blocks.BIRCH_STAIRS, 5, 20);
         Blocks.FIRE.a(Blocks.SPRUCE_STAIRS, 5, 20);
         Blocks.FIRE.a(Blocks.JUNGLE_STAIRS, 5, 20);
+        Blocks.FIRE.a(Blocks.ACACIA_STAIRS, 5, 20);
+        Blocks.FIRE.a(Blocks.DARK_OAK_STAIRS, 5, 20);
         Blocks.FIRE.a(Blocks.LOG, 5, 5);
         Blocks.FIRE.a(Blocks.LOG2, 5, 5);
         Blocks.FIRE.a(Blocks.LEAVES, 30, 60);
@@ -83,18 +67,18 @@
 
     public void a(Block block, int i, int j) {
         this.flameChances.put(block, Integer.valueOf(i));
-        this.U.put(block, Integer.valueOf(j));
+        this.B.put(block, Integer.valueOf(j));
     }
 
-    public AxisAlignedBB a(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        return null;
+    public AxisAlignedBB a(IBlockData iblockdata, World world, BlockPosition blockposition) {
+        return BlockFire.k;
     }
 
-    public boolean c() {
+    public boolean b(IBlockData iblockdata) {
         return false;
     }
 
-    public boolean d() {
+    public boolean c(IBlockData iblockdata) {
         return false;
     }
 
@@ -119,11 +103,11 @@
                 flag = true;
             }
 
-            if (!flag && world.S() && this.e(world, blockposition)) {
+            int i = ((Integer) iblockdata.get(BlockFire.AGE)).intValue();
+
+            if (!flag && world.W() && this.b(world, blockposition) && random.nextFloat() < 0.2F + (float) i * 0.03F) {
                 world.setAir(blockposition);
             } else {
-                int i = ((Integer) iblockdata.get(BlockFire.AGE)).intValue();
-
                 if (i < 15) {
                     iblockdata = iblockdata.set(BlockFire.AGE, Integer.valueOf(i + random.nextInt(3) / 2));
                     world.setTypeAndData(blockposition, iblockdata, 4);
@@ -131,21 +115,21 @@
 
                 world.a(blockposition, (Block) this, this.a(world) + random.nextInt(10));
                 if (!flag) {
-                    if (!this.f(world, blockposition)) {
-                        if (!World.a((IBlockAccess) world, blockposition.down()) || i > 3) {
+                    if (!this.c(world, blockposition)) {
+                        if (!world.getType(blockposition.down()).q() || i > 3) {
                             world.setAir(blockposition);
                         }
 
                         return;
                     }
 
-                    if (!this.e((IBlockAccess) world, blockposition.down()) && i == 15 && random.nextInt(4) == 0) {
+                    if (!this.c((IBlockAccess) world, blockposition.down()) && i == 15 && random.nextInt(4) == 0) {
                         world.setAir(blockposition);
                         return;
                     }
                 }
 
-                boolean flag1 = world.D(blockposition);
+                boolean flag1 = world.C(blockposition);
                 byte b0 = 0;
 
                 if (flag1) {
@@ -170,7 +154,7 @@
                                 }
 
                                 BlockPosition blockposition1 = blockposition.a(j, l, k);
-                                int j1 = this.m(world, blockposition1);
+                                int j1 = this.d(world, blockposition1);
 
                                 if (j1 > 0) {
                                     int k1 = (j1 + 40 + world.getDifficulty().a() * 7) / (i + 30);
@@ -179,7 +163,7 @@
                                         k1 /= 2;
                                     }
 
-                                    if (k1 > 0 && random.nextInt(i1) <= k1 && (!world.S() || !this.e(world, blockposition1))) {
+                                    if (k1 > 0 && random.nextInt(i1) <= k1 && (!world.W() || !this.b(world, blockposition1))) {
                                         int l1 = i + random.nextInt(5) / 4;
 
                                         if (l1 > 15) {
@@ -198,16 +182,16 @@
         }
     }
 
-    protected boolean e(World world, BlockPosition blockposition) {
+    protected boolean b(World world, BlockPosition blockposition) {
         return world.isRainingAt(blockposition) || world.isRainingAt(blockposition.west()) || world.isRainingAt(blockposition.east()) || world.isRainingAt(blockposition.north()) || world.isRainingAt(blockposition.south());
     }
 
-    public boolean N() {
+    public boolean s() {
         return false;
     }
 
     private int c(Block block) {
-        Integer integer = (Integer) this.U.get(block);
+        Integer integer = (Integer) this.B.get(block);
 
         return integer == null ? 0 : integer.intValue();
     }
@@ -243,14 +227,14 @@
 
     }
 
-    private boolean f(World world, BlockPosition blockposition) {
+    private boolean c(World world, BlockPosition blockposition) {
         EnumDirection[] aenumdirection = EnumDirection.values();
         int i = aenumdirection.length;
 
         for (int j = 0; j < i; ++j) {
             EnumDirection enumdirection = aenumdirection[j];
 
-            if (this.e((IBlockAccess) world, blockposition.shift(enumdirection))) {
+            if (this.c((IBlockAccess) world, blockposition.shift(enumdirection))) {
                 return true;
             }
         }
@@ -258,7 +242,7 @@
         return false;
     }
 
-    private int m(World world, BlockPosition blockposition) {
+    private int d(World world, BlockPosition blockposition) {
         if (!world.isEmpty(blockposition)) {
             return 0;
         } else {
@@ -276,28 +260,28 @@
         }
     }
 
-    public boolean A() {
+    public boolean n() {
         return false;
     }
 
-    public boolean e(IBlockAccess iblockaccess, BlockPosition blockposition) {
+    public boolean c(IBlockAccess iblockaccess, BlockPosition blockposition) {
         return this.d(iblockaccess.getType(blockposition).getBlock()) > 0;
     }
 
     public boolean canPlace(World world, BlockPosition blockposition) {
-        return World.a((IBlockAccess) world, blockposition.down()) || this.f(world, blockposition);
+        return world.getType(blockposition.down()).q() || this.c(world, blockposition);
     }
 
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
-        if (!World.a((IBlockAccess) world, blockposition.down()) && !this.f(world, blockposition)) {
+        if (!world.getType(blockposition.down()).q() && !this.c(world, blockposition)) {
             world.setAir(blockposition);
         }
 
     }
 
     public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (world.worldProvider.getDimension() > 0 || !Blocks.PORTAL.e(world, blockposition)) {
-            if (!World.a((IBlockAccess) world, blockposition.down()) && !this.f(world, blockposition)) {
+        if (world.worldProvider.getDimensionManager().getDimensionID() > 0 || !Blocks.PORTAL.b(world, blockposition)) {
+            if (!world.getType(blockposition.down()).q() && !this.c(world, blockposition)) {
                 world.setAir(blockposition);
             } else {
                 world.a(blockposition, (Block) this, this.a(world) + world.random.nextInt(10));
@@ -305,7 +289,7 @@
         }
     }
 
-    public MaterialMapColor g(IBlockData iblockdata) {
+    public MaterialMapColor r(IBlockData iblockdata) {
         return MaterialMapColor.f;
     }
 
@@ -318,6 +302,6 @@
     }
 
     protected BlockStateList getStateList() {
-        return new BlockStateList(this, new IBlockState[] { BlockFire.AGE, BlockFire.NORTH, BlockFire.EAST, BlockFire.SOUTH, BlockFire.WEST, BlockFire.UPPER, BlockFire.FLIP, BlockFire.ALT});
+        return new BlockStateList(this, new IBlockState[] { BlockFire.AGE, BlockFire.NORTH, BlockFire.EAST, BlockFire.SOUTH, BlockFire.WEST, BlockFire.UPPER});
     }
 }
