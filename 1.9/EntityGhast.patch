--- a/net/minecraft/server/EntityGhast.java
+++ b/net/minecraft/server/EntityGhast.java
@@ -4,7 +4,8 @@
 
 public class EntityGhast extends EntityFlying implements IMonster {
 
-    private int a = 1;
+    private static final DataWatcherObject<Boolean> a = DataWatcher.a(EntityGhast.class, DataWatcherRegistry.h);
+    private int b = 1;
 
     public EntityGhast(World world) {
         super(world);
@@ -12,6 +13,9 @@
         this.fireProof = true;
         this.b_ = 5;
         this.moveController = new EntityGhast.ControllerGhast(this);
+    }
+
+    protected void r() {
         this.goalSelector.a(5, new EntityGhast.PathfinderGoalGhastIdleMove(this));
         this.goalSelector.a(7, new EntityGhast.PathfinderGoalGhastMoveTowardsTarget(this));
         this.goalSelector.a(7, new EntityGhast.PathfinderGoalGhastAttackTarget(this));
@@ -19,15 +23,15 @@
     }
 
     public void a(boolean flag) {
-        this.datawatcher.watch(16, Byte.valueOf((byte) (flag ? 1 : 0)));
+        this.datawatcher.set(EntityGhast.a, Boolean.valueOf(flag));
     }
 
-    public int cf() {
-        return this.a;
+    public int getPower() {
+        return this.b;
     }
 
-    public void t_() {
-        super.t_();
+    public void m() {
+        super.m();
         if (!this.world.isClientSide && this.world.getDifficulty() == EnumDifficulty.PEACEFUL) {
             this.die();
         }
@@ -46,9 +50,9 @@
         }
     }
 
-    protected void h() {
-        super.h();
-        this.datawatcher.a(16, Byte.valueOf((byte) 0));
+    protected void i() {
+        super.i();
+        this.datawatcher.register(EntityGhast.a, Boolean.valueOf(false));
     }
 
     protected void initAttributes() {
@@ -57,60 +61,47 @@
         this.getAttributeInstance(GenericAttributes.FOLLOW_RANGE).setValue(100.0D);
     }
 
-    protected String z() {
-        return "mob.ghast.moan";
+    public SoundCategory bz() {
+        return SoundCategory.HOSTILE;
     }
 
-    protected String bo() {
-        return "mob.ghast.scream";
+    protected SoundEffect G() {
+        return SoundEffects.bJ;
     }
 
-    protected String bp() {
-        return "mob.ghast.death";
+    protected SoundEffect bR() {
+        return SoundEffects.bL;
     }
 
-    protected Item getLoot() {
-        return Items.GUNPOWDER;
+    protected SoundEffect bS() {
+        return SoundEffects.bK;
     }
 
-    protected void dropDeathLoot(boolean flag, int i) {
-        int j = this.random.nextInt(2) + this.random.nextInt(1 + i);
-
-        int k;
-
-        for (k = 0; k < j; ++k) {
-            this.a(Items.GHAST_TEAR, 1);
-        }
-
-        j = this.random.nextInt(3) + this.random.nextInt(1 + i);
-
-        for (k = 0; k < j; ++k) {
-            this.a(Items.GUNPOWDER, 1);
-        }
-
+    protected MinecraftKey J() {
+        return LootTables.ae;
     }
 
-    protected float bB() {
+    protected float cd() {
         return 10.0F;
     }
 
-    public boolean bR() {
-        return this.random.nextInt(20) == 0 && super.bR() && this.world.getDifficulty() != EnumDifficulty.PEACEFUL;
+    public boolean cF() {
+        return this.random.nextInt(20) == 0 && super.cF() && this.world.getDifficulty() != EnumDifficulty.PEACEFUL;
     }
 
-    public int bV() {
+    public int cJ() {
         return 1;
     }
 
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
-        nbttagcompound.setInt("ExplosionPower", this.a);
+        nbttagcompound.setInt("ExplosionPower", this.b);
     }
 
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
         if (nbttagcompound.hasKeyOfType("ExplosionPower", 99)) {
-            this.a = nbttagcompound.getInt("ExplosionPower");
+            this.b = nbttagcompound.getInt("ExplosionPower");
         }
 
     }
@@ -121,15 +112,15 @@
 
     static class PathfinderGoalGhastAttackTarget extends PathfinderGoal {
 
-        private EntityGhast b;
+        private EntityGhast ghast;
         public int a;
 
         public PathfinderGoalGhastAttackTarget(EntityGhast entityghast) {
-            this.b = entityghast;
+            this.ghast = entityghast;
         }
 
         public boolean a() {
-            return this.b.getGoalTarget() != null;
+            return this.ghast.getGoalTarget() != null;
         }
 
         public void c() {
@@ -137,35 +128,35 @@
         }
 
         public void d() {
-            this.b.a(false);
+            this.ghast.a(false);
         }
 
         public void e() {
-            EntityLiving entityliving = this.b.getGoalTarget();
+            EntityLiving entityliving = this.ghast.getGoalTarget();
             double d0 = 64.0D;
 
-            if (entityliving.h(this.b) < d0 * d0 && this.b.hasLineOfSight(entityliving)) {
-                World world = this.b.world;
+            if (entityliving.h(this.ghast) < d0 * d0 && this.ghast.hasLineOfSight(entityliving)) {
+                World world = this.ghast.world;
 
                 ++this.a;
                 if (this.a == 10) {
-                    world.a((EntityHuman) null, 1007, new BlockPosition(this.b), 0);
+                    world.a((EntityHuman) null, 1015, new BlockPosition(this.ghast), 0);
                 }
 
                 if (this.a == 20) {
                     double d1 = 4.0D;
-                    Vec3D vec3d = this.b.d(1.0F);
-                    double d2 = entityliving.locX - (this.b.locX + vec3d.a * d1);
-                    double d3 = entityliving.getBoundingBox().b + (double) (entityliving.length / 2.0F) - (0.5D + this.b.locY + (double) (this.b.length / 2.0F));
-                    double d4 = entityliving.locZ - (this.b.locZ + vec3d.c * d1);
-
-                    world.a((EntityHuman) null, 1008, new BlockPosition(this.b), 0);
-                    EntityLargeFireball entitylargefireball = new EntityLargeFireball(world, this.b, d2, d3, d4);
-
-                    entitylargefireball.yield = this.b.cf();
-                    entitylargefireball.locX = this.b.locX + vec3d.a * d1;
-                    entitylargefireball.locY = this.b.locY + (double) (this.b.length / 2.0F) + 0.5D;
-                    entitylargefireball.locZ = this.b.locZ + vec3d.c * d1;
+                    Vec3D vec3d = this.ghast.f(1.0F);
+                    double d2 = entityliving.locX - (this.ghast.locX + vec3d.x * d1);
+                    double d3 = entityliving.getBoundingBox().b + (double) (entityliving.length / 2.0F) - (0.5D + this.ghast.locY + (double) (this.ghast.length / 2.0F));
+                    double d4 = entityliving.locZ - (this.ghast.locZ + vec3d.z * d1);
+
+                    world.a((EntityHuman) null, 1016, new BlockPosition(this.ghast), 0);
+                    EntityLargeFireball entitylargefireball = new EntityLargeFireball(world, this.ghast, d2, d3, d4);
+
+                    entitylargefireball.yield = this.ghast.getPower();
+                    entitylargefireball.locX = this.ghast.locX + vec3d.x * d1;
+                    entitylargefireball.locY = this.ghast.locY + (double) (this.ghast.length / 2.0F) + 0.5D;
+                    entitylargefireball.locZ = this.ghast.locZ + vec3d.z * d1;
                     world.addEntity(entitylargefireball);
                     this.a = -40;
                 }
@@ -173,7 +164,7 @@
                 --this.a;
             }
 
-            this.b.a(this.a > 10);
+            this.ghast.a(this.a > 10);
         }
     }
 
@@ -192,7 +183,7 @@
 
         public void e() {
             if (this.a.getGoalTarget() == null) {
-                this.a.aI = this.a.yaw = -((float) MathHelper.b(this.a.motX, this.a.motZ)) * 180.0F / 3.1415927F;
+                this.a.aM = this.a.yaw = -((float) MathHelper.b(this.a.motX, this.a.motZ)) * 57.295776F;
             } else {
                 EntityLiving entityliving = this.a.getGoalTarget();
                 double d0 = 64.0D;
@@ -201,7 +192,7 @@
                     double d1 = entityliving.locX - this.a.locX;
                     double d2 = entityliving.locZ - this.a.locZ;
 
-                    this.a.aI = this.a.yaw = -((float) MathHelper.b(d1, d2)) * 180.0F / 3.1415927F;
+                    this.a.aM = this.a.yaw = -((float) MathHelper.b(d1, d2)) * 57.295776F;
                 }
             }
 
@@ -237,7 +228,7 @@
         }
 
         public void c() {
-            Random random = this.a.bc();
+            Random random = this.a.getRandom();
             double d0 = this.a.locX + (double) ((random.nextFloat() * 2.0F - 1.0F) * 16.0F);
             double d1 = this.a.locY + (double) ((random.nextFloat() * 2.0F - 1.0F) * 16.0F);
             double d2 = this.a.locZ + (double) ((random.nextFloat() * 2.0F - 1.0F) * 16.0F);
@@ -248,30 +239,30 @@
 
     static class ControllerGhast extends ControllerMove {
 
-        private EntityGhast g;
-        private int h;
+        private EntityGhast i;
+        private int j;
 
         public ControllerGhast(EntityGhast entityghast) {
             super(entityghast);
-            this.g = entityghast;
+            this.i = entityghast;
         }
 
         public void c() {
-            if (this.f) {
-                double d0 = this.b - this.g.locX;
-                double d1 = this.c - this.g.locY;
-                double d2 = this.d - this.g.locZ;
+            if (this.h == ControllerMove.Operation.MOVE_TO) {
+                double d0 = this.b - this.i.locX;
+                double d1 = this.c - this.i.locY;
+                double d2 = this.d - this.i.locZ;
                 double d3 = d0 * d0 + d1 * d1 + d2 * d2;
 
-                if (this.h-- <= 0) {
-                    this.h += this.g.bc().nextInt(5) + 2;
+                if (this.j-- <= 0) {
+                    this.j += this.i.getRandom().nextInt(5) + 2;
                     d3 = (double) MathHelper.sqrt(d3);
                     if (this.b(this.b, this.c, this.d, d3)) {
-                        this.g.motX += d0 / d3 * 0.1D;
-                        this.g.motY += d1 / d3 * 0.1D;
-                        this.g.motZ += d2 / d3 * 0.1D;
+                        this.i.motX += d0 / d3 * 0.1D;
+                        this.i.motY += d1 / d3 * 0.1D;
+                        this.i.motZ += d2 / d3 * 0.1D;
                     } else {
-                        this.f = false;
+                        this.h = ControllerMove.Operation.WAIT;
                     }
                 }
 
@@ -279,14 +270,14 @@
         }
 
         private boolean b(double d0, double d1, double d2, double d3) {
-            double d4 = (d0 - this.g.locX) / d3;
-            double d5 = (d1 - this.g.locY) / d3;
-            double d6 = (d2 - this.g.locZ) / d3;
-            AxisAlignedBB axisalignedbb = this.g.getBoundingBox();
+            double d4 = (d0 - this.i.locX) / d3;
+            double d5 = (d1 - this.i.locY) / d3;
+            double d6 = (d2 - this.i.locZ) / d3;
+            AxisAlignedBB axisalignedbb = this.i.getBoundingBox();
 
             for (int i = 1; (double) i < d3; ++i) {
                 axisalignedbb = axisalignedbb.c(d4, d5, d6);
-                if (!this.g.world.getCubes(this.g, axisalignedbb).isEmpty()) {
+                if (!this.i.world.getCubes(this.i, axisalignedbb).isEmpty()) {
                     return false;
                 }
             }
