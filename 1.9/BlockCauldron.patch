--- a/net/minecraft/server/BlockCauldron.java
+++ b/net/minecraft/server/BlockCauldron.java
@@ -6,37 +6,34 @@
 public class BlockCauldron extends Block {
 
     public static final BlockStateInteger LEVEL = BlockStateInteger.of("level", 0, 3);
+    protected static final AxisAlignedBB b = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.3125D, 1.0D);
+    protected static final AxisAlignedBB c = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 1.0D, 0.125D);
+    protected static final AxisAlignedBB d = new AxisAlignedBB(0.0D, 0.0D, 0.875D, 1.0D, 1.0D, 1.0D);
+    protected static final AxisAlignedBB e = new AxisAlignedBB(0.875D, 0.0D, 0.0D, 1.0D, 1.0D, 1.0D);
+    protected static final AxisAlignedBB f = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.125D, 1.0D, 1.0D);
 
     public BlockCauldron() {
         super(Material.ORE, MaterialMapColor.m);
-        this.j(this.blockStateList.getBlockData().set(BlockCauldron.LEVEL, Integer.valueOf(0)));
+        this.w(this.blockStateList.getBlockData().set(BlockCauldron.LEVEL, Integer.valueOf(0)));
     }
 
-    public void a(World world, BlockPosition blockposition, IBlockData iblockdata, AxisAlignedBB axisalignedbb, List<AxisAlignedBB> list, Entity entity) {
-        this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.3125F, 1.0F);
-        super.a(world, blockposition, iblockdata, axisalignedbb, list, entity);
-        float f = 0.125F;
-
-        this.a(0.0F, 0.0F, 0.0F, f, 1.0F, 1.0F);
-        super.a(world, blockposition, iblockdata, axisalignedbb, list, entity);
-        this.a(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f);
-        super.a(world, blockposition, iblockdata, axisalignedbb, list, entity);
-        this.a(1.0F - f, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-        super.a(world, blockposition, iblockdata, axisalignedbb, list, entity);
-        this.a(0.0F, 0.0F, 1.0F - f, 1.0F, 1.0F, 1.0F);
-        super.a(world, blockposition, iblockdata, axisalignedbb, list, entity);
-        this.j();
+    public void a(IBlockData iblockdata, World world, BlockPosition blockposition, AxisAlignedBB axisalignedbb, List<AxisAlignedBB> list, Entity entity) {
+        a(blockposition, axisalignedbb, list, BlockCauldron.b);
+        a(blockposition, axisalignedbb, list, BlockCauldron.f);
+        a(blockposition, axisalignedbb, list, BlockCauldron.c);
+        a(blockposition, axisalignedbb, list, BlockCauldron.e);
+        a(blockposition, axisalignedbb, list, BlockCauldron.d);
     }
 
-    public void j() {
-        this.a(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+    public AxisAlignedBB a(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
+        return BlockCauldron.j;
     }
 
-    public boolean c() {
+    public boolean b(IBlockData iblockdata) {
         return false;
     }
 
-    public boolean d() {
+    public boolean c(IBlockData iblockdata) {
         return false;
     }
 
@@ -51,92 +48,99 @@
 
     }
 
-    public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (world.isClientSide) {
+    public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumHand enumhand, ItemStack itemstack, EnumDirection enumdirection, float f, float f1, float f2) {
+        if (itemstack == null) {
             return true;
         } else {
-            ItemStack itemstack = entityhuman.inventory.getItemInHand();
+            int i = ((Integer) iblockdata.get(BlockCauldron.LEVEL)).intValue();
+            Item item = itemstack.getItem();
+
+            if (item == Items.WATER_BUCKET) {
+                if (i < 3 && !world.isClientSide) {
+                    if (!entityhuman.abilities.canInstantlyBuild) {
+                        entityhuman.a(enumhand, new ItemStack(Items.BUCKET));
+                    }
+
+                    entityhuman.b(StatisticList.K);
+                    this.a(world, blockposition, iblockdata, 3);
+                }
+
+                return true;
+            } else if (item == Items.BUCKET) {
+                if (i == 3 && !world.isClientSide) {
+                    if (!entityhuman.abilities.canInstantlyBuild) {
+                        --itemstack.count;
+                        if (itemstack.count == 0) {
+                            entityhuman.a(enumhand, new ItemStack(Items.WATER_BUCKET));
+                        } else if (!entityhuman.inventory.pickup(new ItemStack(Items.WATER_BUCKET))) {
+                            entityhuman.drop(new ItemStack(Items.WATER_BUCKET), false);
+                        }
+                    }
+
+                    entityhuman.b(StatisticList.L);
+                    this.a(world, blockposition, iblockdata, 0);
+                }
 
-            if (itemstack == null) {
                 return true;
             } else {
-                int i = ((Integer) iblockdata.get(BlockCauldron.LEVEL)).intValue();
-                Item item = itemstack.getItem();
+                ItemStack itemstack1;
 
-                if (item == Items.WATER_BUCKET) {
-                    if (i < 3) {
+                if (item == Items.GLASS_BOTTLE) {
+                    if (i > 0 && !world.isClientSide) {
                         if (!entityhuman.abilities.canInstantlyBuild) {
-                            entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, new ItemStack(Items.BUCKET));
+                            itemstack1 = PotionUtil.a(new ItemStack(Items.POTION), Potions.b);
+                            entityhuman.b(StatisticList.L);
+                            if (--itemstack.count == 0) {
+                                entityhuman.a(enumhand, itemstack1);
+                            } else if (!entityhuman.inventory.pickup(itemstack1)) {
+                                entityhuman.drop(itemstack1, false);
+                            } else if (entityhuman instanceof EntityPlayer) {
+                                ((EntityPlayer) entityhuman).updateInventory(entityhuman.defaultContainer);
+                            }
                         }
 
-                        entityhuman.b(StatisticList.I);
-                        this.a(world, blockposition, iblockdata, 3);
+                        this.a(world, blockposition, iblockdata, i - 1);
                     }
 
                     return true;
                 } else {
-                    ItemStack itemstack1;
-
-                    if (item == Items.GLASS_BOTTLE) {
-                        if (i > 0) {
-                            if (!entityhuman.abilities.canInstantlyBuild) {
-                                itemstack1 = new ItemStack(Items.POTION, 1, 0);
-                                if (!entityhuman.inventory.pickup(itemstack1)) {
-                                    world.addEntity(new EntityItem(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 1.5D, (double) blockposition.getZ() + 0.5D, itemstack1));
-                                } else if (entityhuman instanceof EntityPlayer) {
-                                    ((EntityPlayer) entityhuman).updateInventory(entityhuman.defaultContainer);
-                                }
-
-                                entityhuman.b(StatisticList.J);
-                                --itemstack.count;
-                                if (itemstack.count <= 0) {
-                                    entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, (ItemStack) null);
-                                }
-                            }
+                    if (i > 0 && item instanceof ItemArmor) {
+                        ItemArmor itemarmor = (ItemArmor) item;
 
+                        if (itemarmor.d() == ItemArmor.EnumArmorMaterial.LEATHER && itemarmor.e_(itemstack) && !world.isClientSide) {
+                            itemarmor.c(itemstack);
                             this.a(world, blockposition, iblockdata, i - 1);
+                            entityhuman.b(StatisticList.M);
+                            return true;
                         }
+                    }
 
-                        return true;
-                    } else {
-                        if (i > 0 && item instanceof ItemArmor) {
-                            ItemArmor itemarmor = (ItemArmor) item;
-
-                            if (itemarmor.x_() == ItemArmor.EnumArmorMaterial.LEATHER && itemarmor.d_(itemstack)) {
-                                itemarmor.c(itemstack);
-                                this.a(world, blockposition, iblockdata, i - 1);
-                                entityhuman.b(StatisticList.K);
-                                return true;
-                            }
-                        }
-
-                        if (i > 0 && item instanceof ItemBanner && TileEntityBanner.c(itemstack) > 0) {
+                    if (i > 0 && item instanceof ItemBanner) {
+                        if (TileEntityBanner.c(itemstack) > 0 && !world.isClientSide) {
                             itemstack1 = itemstack.cloneItemStack();
                             itemstack1.count = 1;
                             TileEntityBanner.e(itemstack1);
-                            if (itemstack.count <= 1 && !entityhuman.abilities.canInstantlyBuild) {
-                                entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, itemstack1);
-                            } else {
-                                if (!entityhuman.inventory.pickup(itemstack1)) {
-                                    world.addEntity(new EntityItem(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 1.5D, (double) blockposition.getZ() + 0.5D, itemstack1));
-                                } else if (entityhuman instanceof EntityPlayer) {
-                                    ((EntityPlayer) entityhuman).updateInventory(entityhuman.defaultContainer);
-                                }
-
-                                entityhuman.b(StatisticList.L);
-                                if (!entityhuman.abilities.canInstantlyBuild) {
-                                    --itemstack.count;
-                                }
+                            entityhuman.b(StatisticList.N);
+                            if (!entityhuman.abilities.canInstantlyBuild) {
+                                --itemstack.count;
+                            }
+
+                            if (itemstack.count == 0) {
+                                entityhuman.a(enumhand, itemstack1);
+                            } else if (!entityhuman.inventory.pickup(itemstack1)) {
+                                entityhuman.drop(itemstack1, false);
+                            } else if (entityhuman instanceof EntityPlayer) {
+                                ((EntityPlayer) entityhuman).updateInventory(entityhuman.defaultContainer);
                             }
 
                             if (!entityhuman.abilities.canInstantlyBuild) {
                                 this.a(world, blockposition, iblockdata, i - 1);
                             }
-
-                            return true;
-                        } else {
-                            return false;
                         }
+
+                        return true;
+                    } else {
+                        return false;
                     }
                 }
             }
@@ -148,14 +152,18 @@
         world.updateAdjacentComparators(blockposition, this);
     }
 
-    public void k(World world, BlockPosition blockposition) {
+    public void h(World world, BlockPosition blockposition) {
         if (world.random.nextInt(20) == 1) {
-            IBlockData iblockdata = world.getType(blockposition);
+            float f = world.getBiome(blockposition).a(blockposition);
 
-            if (((Integer) iblockdata.get(BlockCauldron.LEVEL)).intValue() < 3) {
-                world.setTypeAndData(blockposition, iblockdata.a(BlockCauldron.LEVEL), 2);
-            }
+            if (world.getWorldChunkManager().a(f, blockposition.getY()) >= 0.15F) {
+                IBlockData iblockdata = world.getType(blockposition);
+
+                if (((Integer) iblockdata.get(BlockCauldron.LEVEL)).intValue() < 3) {
+                    world.setTypeAndData(blockposition, iblockdata.a((IBlockState) BlockCauldron.LEVEL), 2);
+                }
 
+            }
         }
     }
 
@@ -163,12 +171,16 @@
         return Items.CAULDRON;
     }
 
-    public boolean isComplexRedstone() {
+    public ItemStack a(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        return new ItemStack(Items.CAULDRON);
+    }
+
+    public boolean isComplexRedstone(IBlockData iblockdata) {
         return true;
     }
 
-    public int l(World world, BlockPosition blockposition) {
-        return ((Integer) world.getType(blockposition).get(BlockCauldron.LEVEL)).intValue();
+    public int d(IBlockData iblockdata, World world, BlockPosition blockposition) {
+        return ((Integer) iblockdata.get(BlockCauldron.LEVEL)).intValue();
     }
 
     public IBlockData fromLegacyData(int i) {
@@ -182,4 +194,8 @@
     protected BlockStateList getStateList() {
         return new BlockStateList(this, new IBlockState[] { BlockCauldron.LEVEL});
     }
+
+    public boolean b(IBlockAccess iblockaccess, BlockPosition blockposition) {
+        return true;
+    }
 }
