--- a/net/minecraft/server/EntityHuman.java
+++ b/net/minecraft/server/EntityHuman.java
@@ -3,6 +3,7 @@
 import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
@@ -10,53 +11,61 @@
 
 public abstract class EntityHuman extends EntityLiving {
 
+    private static final DataWatcherObject<Float> a = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.c);
+    private static final DataWatcherObject<Integer> b = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.b);
+    protected static final DataWatcherObject<Byte> bp = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);
+    protected static final DataWatcherObject<Byte> bq = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);
     public PlayerInventory inventory = new PlayerInventory(this);
     private InventoryEnderChest enderChest = new InventoryEnderChest();
     public Container defaultContainer;
     public Container activeContainer;
     protected FoodMetaData foodData = new FoodMetaData();
-    protected int bm;
-    public float bn;
-    public float bo;
-    public int bp;
-    public double bq;
-    public double br;
-    public double bs;
-    public double bt;
-    public double bu;
-    public double bv;
+    protected int bv;
+    public float bw;
+    public float bx;
+    public int by;
+    public double bz;
+    public double bA;
+    public double bB;
+    public double bC;
+    public double bD;
+    public double bE;
     public boolean sleeping;
-    public BlockPosition bx;
+    public BlockPosition bedPosition;
     public int sleepTicks;
-    public float by;
-    public float bz;
-    private BlockPosition c;
-    private boolean d;
+    public float bH;
+    public float bI;
     private BlockPosition e;
+    private boolean f;
+    private BlockPosition g;
     public PlayerAbilities abilities = new PlayerAbilities();
     public int expLevel;
     public int expTotal;
     public float exp;
-    private int f;
-    private ItemStack g;
     private int h;
-    protected float bE = 0.1F;
-    protected float bF = 0.02F;
-    private int i;
-    private final GameProfile bH;
-    private boolean bI = false;
+    protected float bN = 0.1F;
+    protected float bO = 0.02F;
+    private int bQ;
+    private final GameProfile bR;
+    private boolean bS = false;
+    private ItemStack bT = null;
+    private final ItemCooldown bU = this.l();
     public EntityFishingHook hookedFish;
 
+    protected ItemCooldown l() {
+        return new ItemCooldown();
+    }
+
     public EntityHuman(World world, GameProfile gameprofile) {
         super(world);
         this.uniqueID = a(gameprofile);
-        this.bH = gameprofile;
+        this.bR = gameprofile;
         this.defaultContainer = new ContainerPlayer(this.inventory, !world.isClientSide, this);
         this.activeContainer = this.defaultContainer;
         BlockPosition blockposition = world.getSpawn();
 
         this.setPositionRotation((double) blockposition.getX() + 0.5D, (double) (blockposition.getY() + 1), (double) blockposition.getZ() + 0.5D, 0.0F, 0.0F);
-        this.aV = 180.0F;
+        this.aZ = 180.0F;
         this.maxFireTicks = 20;
     }
 
@@ -64,65 +73,26 @@
         super.initAttributes();
         this.getAttributeMap().b(GenericAttributes.ATTACK_DAMAGE).setValue(1.0D);
         this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue(0.10000000149011612D);
+        this.getAttributeMap().b(GenericAttributes.f);
+        this.getAttributeMap().b(GenericAttributes.h);
     }
 
-    protected void h() {
-        super.h();
-        this.datawatcher.a(16, Byte.valueOf((byte) 0));
-        this.datawatcher.a(17, Float.valueOf(0.0F));
-        this.datawatcher.a(18, Integer.valueOf(0));
-        this.datawatcher.a(10, Byte.valueOf((byte) 0));
-    }
-
-    public boolean bS() {
-        return this.g != null;
-    }
-
-    public void bU() {
-        if (this.g != null) {
-            this.g.b(this.world, this, this.h);
-        }
-
-        this.bV();
-    }
-
-    public void bV() {
-        this.g = null;
-        this.h = 0;
-        if (!this.world.isClientSide) {
-            this.f(false);
-        }
-
-    }
-
-    public boolean isBlocking() {
-        return this.bS() && this.g.getItem().e(this.g) == EnumAnimation.BLOCK;
+    protected void i() {
+        super.i();
+        this.datawatcher.register(EntityHuman.a, Float.valueOf(0.0F));
+        this.datawatcher.register(EntityHuman.b, Integer.valueOf(0));
+        this.datawatcher.register(EntityHuman.bp, Byte.valueOf((byte) 0));
+        this.datawatcher.register(EntityHuman.bq, Byte.valueOf((byte) 1));
     }
 
-    public void t_() {
+    public void m() {
         this.noclip = this.isSpectator();
         if (this.isSpectator()) {
             this.onGround = false;
         }
 
-        if (this.g != null) {
-            ItemStack itemstack = this.inventory.getItemInHand();
-
-            if (itemstack == this.g) {
-                if (this.h <= 25 && this.h % 4 == 0) {
-                    this.b(itemstack, 5);
-                }
-
-                if (--this.h == 0 && !this.world.isClientSide) {
-                    this.s();
-                }
-            } else {
-                this.bV();
-            }
-        }
-
-        if (this.bp > 0) {
-            --this.bp;
+        if (this.by > 0) {
+            --this.by;
         }
 
         if (this.isSleeping()) {
@@ -132,9 +102,9 @@
             }
 
             if (!this.world.isClientSide) {
-                if (!this.p()) {
+                if (!this.r()) {
                     this.a(true, true, false);
-                } else if (this.world.w()) {
+                } else if (this.world.B()) {
                     this.a(false, true, true);
                 }
             }
@@ -145,7 +115,7 @@
             }
         }
 
-        super.t_();
+        super.m();
         if (!this.world.isClientSide && this.activeContainer != null && !this.activeContainer.a(this)) {
             this.closeInventory();
             this.activeContainer = this.defaultContainer;
@@ -155,131 +125,138 @@
             this.extinguish();
         }
 
-        this.bq = this.bt;
-        this.br = this.bu;
-        this.bs = this.bv;
-        double d0 = this.locX - this.bt;
-        double d1 = this.locY - this.bu;
-        double d2 = this.locZ - this.bv;
+        this.o();
+        if (!this.isPassenger()) {
+            this.g = null;
+        }
+
+        if (!this.world.isClientSide) {
+            this.foodData.a(this);
+            this.b(StatisticList.g);
+            if (this.isAlive()) {
+                this.b(StatisticList.h);
+            }
+
+            if (this.isSneaking()) {
+                this.b(StatisticList.i);
+            }
+        }
+
+        int i = 29999999;
+        double d0 = MathHelper.a(this.locX, -2.9999999E7D, 2.9999999E7D);
+        double d1 = MathHelper.a(this.locZ, -2.9999999E7D, 2.9999999E7D);
+
+        if (d0 != this.locX || d1 != this.locZ) {
+            this.setPosition(d0, this.locY, d1);
+        }
+
+        ++this.aD;
+        ItemStack itemstack = this.getItemInMainHand();
+
+        if (!ItemStack.matches(this.bT, itemstack)) {
+            if (!ItemStack.d(this.bT, itemstack)) {
+                this.cZ();
+            }
+
+            this.bT = itemstack == null ? null : itemstack.cloneItemStack();
+        }
+
+        this.bU.a();
+        this.cE();
+    }
+
+    private void o() {
+        this.bz = this.bC;
+        this.bA = this.bD;
+        this.bB = this.bE;
+        double d0 = this.locX - this.bC;
+        double d1 = this.locY - this.bD;
+        double d2 = this.locZ - this.bE;
         double d3 = 10.0D;
 
         if (d0 > d3) {
-            this.bq = this.bt = this.locX;
+            this.bz = this.bC = this.locX;
         }
 
         if (d2 > d3) {
-            this.bs = this.bv = this.locZ;
+            this.bB = this.bE = this.locZ;
         }
 
         if (d1 > d3) {
-            this.br = this.bu = this.locY;
+            this.bA = this.bD = this.locY;
         }
 
         if (d0 < -d3) {
-            this.bq = this.bt = this.locX;
+            this.bz = this.bC = this.locX;
         }
 
         if (d2 < -d3) {
-            this.bs = this.bv = this.locZ;
+            this.bB = this.bE = this.locZ;
         }
 
         if (d1 < -d3) {
-            this.br = this.bu = this.locY;
+            this.bA = this.bD = this.locY;
         }
 
-        this.bt += d0 * 0.25D;
-        this.bv += d2 * 0.25D;
-        this.bu += d1 * 0.25D;
-        if (this.vehicle == null) {
-            this.e = null;
-        }
+        this.bC += d0 * 0.25D;
+        this.bE += d2 * 0.25D;
+        this.bD += d1 * 0.25D;
+    }
 
-        if (!this.world.isClientSide) {
-            this.foodData.a(this);
-            this.b(StatisticList.g);
-            if (this.isAlive()) {
-                this.b(StatisticList.h);
-            }
+    protected void cE() {
+        float f = this.width;
+        float f1 = this.length;
+
+        if (this.cB()) {
+            f = 0.6F;
+            f1 = 0.6F;
+        } else if (this.isSleeping()) {
+            f = 0.2F;
+            f1 = 0.2F;
+        } else if (this.isSneaking()) {
+            f = 0.6F;
+            f1 = 1.65F;
+        } else {
+            f = 0.6F;
+            f1 = 1.8F;
         }
 
-        int i = 29999999;
-        double d4 = MathHelper.a(this.locX, -2.9999999E7D, 2.9999999E7D);
-        double d5 = MathHelper.a(this.locZ, -2.9999999E7D, 2.9999999E7D);
+        if (f != this.width || f1 != this.length) {
+            AxisAlignedBB axisalignedbb = this.getBoundingBox();
 
-        if (d4 != this.locX || d5 != this.locZ) {
-            this.setPosition(d4, this.locY, d5);
+            axisalignedbb = new AxisAlignedBB(axisalignedbb.a, axisalignedbb.b, axisalignedbb.c, axisalignedbb.a + (double) f, axisalignedbb.b + (double) f1, axisalignedbb.c + (double) f);
+            if (!this.world.b(axisalignedbb)) {
+                this.setSize(f, f1);
+            }
         }
 
     }
 
-    public int L() {
-        return this.abilities.isInvulnerable ? 0 : 80;
+    public int V() {
+        return this.abilities.isInvulnerable ? 1 : 80;
     }
 
-    protected String P() {
-        return "game.player.swim";
+    protected SoundEffect aa() {
+        return SoundEffects.ek;
     }
 
-    protected String aa() {
-        return "game.player.swim.splash";
+    protected SoundEffect ab() {
+        return SoundEffects.ej;
     }
 
-    public int aq() {
+    public int aC() {
         return 10;
     }
 
-    public void makeSound(String s, float f, float f1) {
-        this.world.a(this, s, f, f1);
+    public void a(SoundEffect soundeffect, float f, float f1) {
+        this.world.a(this, this.locX, this.locY, this.locZ, soundeffect, this.bz(), f, f1);
     }
 
-    protected void b(ItemStack itemstack, int i) {
-        if (itemstack.m() == EnumAnimation.DRINK) {
-            this.makeSound("random.drink", 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
-        }
-
-        if (itemstack.m() == EnumAnimation.EAT) {
-            for (int j = 0; j < i; ++j) {
-                Vec3D vec3d = new Vec3D(((double) this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
-
-                vec3d = vec3d.a(-this.pitch * 3.1415927F / 180.0F);
-                vec3d = vec3d.b(-this.yaw * 3.1415927F / 180.0F);
-                double d0 = (double) (-this.random.nextFloat()) * 0.6D - 0.3D;
-                Vec3D vec3d1 = new Vec3D(((double) this.random.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
-
-                vec3d1 = vec3d1.a(-this.pitch * 3.1415927F / 180.0F);
-                vec3d1 = vec3d1.b(-this.yaw * 3.1415927F / 180.0F);
-                vec3d1 = vec3d1.add(this.locX, this.locY + (double) this.getHeadHeight(), this.locZ);
-                if (itemstack.usesData()) {
-                    this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.a, vec3d1.b, vec3d1.c, vec3d.a, vec3d.b + 0.05D, vec3d.c, new int[] { Item.getId(itemstack.getItem()), itemstack.getData()});
-                } else {
-                    this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.a, vec3d1.b, vec3d1.c, vec3d.a, vec3d.b + 0.05D, vec3d.c, new int[] { Item.getId(itemstack.getItem())});
-                }
-            }
-
-            this.makeSound("random.eat", 0.5F + 0.5F * (float) this.random.nextInt(2), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
-        }
-
+    public SoundCategory bz() {
+        return SoundCategory.PLAYERS;
     }
 
-    protected void s() {
-        if (this.g != null) {
-            this.b(this.g, 16);
-            int i = this.g.count;
-            ItemStack itemstack = this.g.b(this.world, this);
-
-            if (itemstack != this.g || itemstack != null && itemstack.count != i) {
-                this.inventory.items[this.inventory.itemInHandIndex] = itemstack;
-                if (itemstack.count == 0) {
-                    this.inventory.items[this.inventory.itemInHandIndex] = null;
-                }
-            }
-
-            this.bV();
-        }
-
-    }
-
-    protected boolean bD() {
+    protected boolean cf() {
         return this.getHealth() <= 0.0F || this.isSleeping();
     }
 
@@ -287,9 +264,9 @@
         this.activeContainer = this.defaultContainer;
     }
 
-    public void ak() {
-        if (!this.world.isClientSide && this.isSneaking()) {
-            this.mount((Entity) null);
+    public void aw() {
+        if (!this.world.isClientSide && this.isSneaking() && this.isPassenger()) {
+            this.stopRiding();
             this.setSneaking(false);
         } else {
             double d0 = this.locX;
@@ -298,14 +275,14 @@
             float f = this.yaw;
             float f1 = this.pitch;
 
-            super.ak();
-            this.bn = this.bo;
-            this.bo = 0.0F;
-            this.l(this.locX - d0, this.locY - d1, this.locZ - d2);
-            if (this.vehicle instanceof EntityPig) {
+            super.aw();
+            this.bw = this.bx;
+            this.bx = 0.0F;
+            this.m(this.locX - d0, this.locY - d1, this.locZ - d2);
+            if (this.by() instanceof EntityPig) {
                 this.pitch = f1;
                 this.yaw = f;
-                this.aI = ((EntityPig) this.vehicle).aI;
+                this.aM = ((EntityPig) this.by()).aM;
             }
 
         }
@@ -313,13 +290,13 @@
 
     protected void doTick() {
         super.doTick();
-        this.bx();
-        this.aK = this.yaw;
+        this.bY();
+        this.aO = this.yaw;
     }
 
-    public void m() {
-        if (this.bm > 0) {
-            --this.bm;
+    public void n() {
+        if (this.bv > 0) {
+            --this.bv;
         }
 
         if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.world.getGameRules().getBoolean("naturalRegeneration")) {
@@ -332,21 +309,21 @@
             }
         }
 
-        this.inventory.k();
-        this.bn = this.bo;
-        super.m();
+        this.inventory.m();
+        this.bw = this.bx;
+        super.n();
         AttributeInstance attributeinstance = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED);
 
         if (!this.world.isClientSide) {
             attributeinstance.setValue((double) this.abilities.b());
         }
 
-        this.aM = this.bF;
+        this.aQ = this.bO;
         if (this.isSprinting()) {
-            this.aM = (float) ((double) this.aM + (double) this.bF * 0.3D);
+            this.aQ = (float) ((double) this.aQ + (double) this.bO * 0.3D);
         }
 
-        this.k((float) attributeinstance.getValue());
+        this.l((float) attributeinstance.getValue());
         float f = MathHelper.sqrt(this.motX * this.motX + this.motZ * this.motZ);
         float f1 = (float) (Math.atan(-this.motY * 0.20000000298023224D) * 15.0D);
 
@@ -362,13 +339,13 @@
             f1 = 0.0F;
         }
 
-        this.bo += (f - this.bo) * 0.4F;
-        this.aF += (f1 - this.aF) * 0.8F;
+        this.bx += (f - this.bx) * 0.4F;
+        this.aJ += (f1 - this.aJ) * 0.8F;
         if (this.getHealth() > 0.0F && !this.isSpectator()) {
             AxisAlignedBB axisalignedbb = null;
 
-            if (this.vehicle != null && !this.vehicle.dead) {
-                axisalignedbb = this.getBoundingBox().a(this.vehicle.getBoundingBox()).grow(1.0D, 0.0D, 1.0D);
+            if (this.isPassenger() && !this.by().dead) {
+                axisalignedbb = this.getBoundingBox().a(this.by().getBoundingBox()).grow(1.0D, 0.0D, 1.0D);
             } else {
                 axisalignedbb = this.getBoundingBox().grow(1.0D, 0.5D, 1.0D);
             }
@@ -379,29 +356,29 @@
                 Entity entity = (Entity) list.get(i);
 
                 if (!entity.dead) {
-                    this.d(entity);
+                    this.c(entity);
                 }
             }
         }
 
     }
 
-    private void d(Entity entity) {
+    private void c(Entity entity) {
         entity.d(this);
     }
 
     public int getScore() {
-        return this.datawatcher.getInt(18);
+        return ((Integer) this.datawatcher.get(EntityHuman.b)).intValue();
     }
 
     public void setScore(int i) {
-        this.datawatcher.watch(18, Integer.valueOf(i));
+        this.datawatcher.set(EntityHuman.b, Integer.valueOf(i));
     }
 
     public void addScore(int i) {
         int j = this.getScore();
 
-        this.datawatcher.watch(18, Integer.valueOf(j + i));
+        this.datawatcher.set(EntityHuman.b, Integer.valueOf(j + i));
     }
 
     public void die(DamageSource damagesource) {
@@ -413,77 +390,80 @@
             this.a(new ItemStack(Items.APPLE, 1), true, false);
         }
 
-        if (!this.world.getGameRules().getBoolean("keepInventory")) {
+        if (!this.world.getGameRules().getBoolean("keepInventory") && !this.isSpectator()) {
             this.inventory.n();
         }
 
         if (damagesource != null) {
-            this.motX = (double) (-MathHelper.cos((this.aw + this.yaw) * 3.1415927F / 180.0F) * 0.1F);
-            this.motZ = (double) (-MathHelper.sin((this.aw + this.yaw) * 3.1415927F / 180.0F) * 0.1F);
+            this.motX = (double) (-MathHelper.cos((this.az + this.yaw) * 0.017453292F) * 0.1F);
+            this.motZ = (double) (-MathHelper.sin((this.az + this.yaw) * 0.017453292F) * 0.1F);
         } else {
             this.motX = this.motZ = 0.0D;
         }
 
-        this.b(StatisticList.y);
+        this.b(StatisticList.A);
         this.a(StatisticList.h);
     }
 
-    protected String bo() {
-        return "game.player.hurt";
+    protected SoundEffect bR() {
+        return SoundEffects.ENTITY_PLAYER_HURT;
     }
 
-    protected String bp() {
-        return "game.player.die";
+    protected SoundEffect bS() {
+        return SoundEffects.ef;
     }
 
     public void b(Entity entity, int i) {
-        this.addScore(i);
-        Collection collection = this.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.f);
+        if (entity != this) {
+            this.addScore(i);
+            Collection collection = this.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.f);
+
+            if (entity instanceof EntityHuman) {
+                this.b(StatisticList.D);
+                collection.addAll(this.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.e));
+            } else {
+                this.b(StatisticList.B);
+            }
 
-        if (entity instanceof EntityHuman) {
-            this.b(StatisticList.B);
-            collection.addAll(this.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.e));
-            collection.addAll(this.e(entity));
-        } else {
-            this.b(StatisticList.z);
-        }
+            collection.addAll(this.d(entity));
+            Iterator iterator = collection.iterator();
 
-        Iterator iterator = collection.iterator();
+            while (iterator.hasNext()) {
+                ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
+                ScoreboardScore scoreboardscore = this.getScoreboard().getPlayerScoreForObjective(this.getName(), scoreboardobjective);
 
-        while (iterator.hasNext()) {
-            ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
-            ScoreboardScore scoreboardscore = this.getScoreboard().getPlayerScoreForObjective(this.getName(), scoreboardobjective);
+                scoreboardscore.incrementScore();
+            }
 
-            scoreboardscore.incrementScore();
         }
-
     }
 
-    private Collection<ScoreboardObjective> e(Entity entity) {
+    private Collection<ScoreboardObjective> d(Entity entity) {
+        String s = entity instanceof EntityHuman ? entity.getName() : entity.getUniqueID().toString();
         ScoreboardTeam scoreboardteam = this.getScoreboard().getPlayerTeam(this.getName());
 
         if (scoreboardteam != null) {
-            int i = scoreboardteam.l().b();
+            int i = scoreboardteam.m().b();
 
-            if (i >= 0 && i < IScoreboardCriteria.i.length) {
-                Iterator iterator = this.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.i[i]).iterator();
+            if (i >= 0 && i < IScoreboardCriteria.n.length) {
+                Iterator iterator = this.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.n[i]).iterator();
 
                 while (iterator.hasNext()) {
                     ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
-                    ScoreboardScore scoreboardscore = this.getScoreboard().getPlayerScoreForObjective(entity.getName(), scoreboardobjective);
+                    ScoreboardScore scoreboardscore = this.getScoreboard().getPlayerScoreForObjective(s, scoreboardobjective);
 
                     scoreboardscore.incrementScore();
                 }
             }
         }
 
-        ScoreboardTeam scoreboardteam1 = this.getScoreboard().getPlayerTeam(entity.getName());
+        ScoreboardTeam scoreboardteam1 = this.getScoreboard().getPlayerTeam(s);
 
         if (scoreboardteam1 != null) {
-            int j = scoreboardteam1.l().b();
+            int j = scoreboardteam1.m().b();
 
-            if (j >= 0 && j < IScoreboardCriteria.h.length) {
-                return this.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.h[j]);
+            if (j >= 0 && j < IScoreboardCriteria.m.length) {
+                return this.getScoreboard().getObjectivesForCriteria(IScoreboardCriteria.m[j]);
             }
         }
 
@@ -509,7 +489,7 @@
 
             entityitem.a(40);
             if (flag1) {
-                entityitem.c(this.getName());
+                entityitem.e(this.getName());
             }
 
             float f;
@@ -517,55 +497,63 @@
 
             if (flag) {
                 f = this.random.nextFloat() * 0.5F;
-                f1 = this.random.nextFloat() * 3.1415927F * 2.0F;
+                f1 = this.random.nextFloat() * 6.2831855F;
                 entityitem.motX = (double) (-MathHelper.sin(f1) * f);
                 entityitem.motZ = (double) (MathHelper.cos(f1) * f);
                 entityitem.motY = 0.20000000298023224D;
             } else {
                 f = 0.3F;
-                entityitem.motX = (double) (-MathHelper.sin(this.yaw / 180.0F * 3.1415927F) * MathHelper.cos(this.pitch / 180.0F * 3.1415927F) * f);
-                entityitem.motZ = (double) (MathHelper.cos(this.yaw / 180.0F * 3.1415927F) * MathHelper.cos(this.pitch / 180.0F * 3.1415927F) * f);
-                entityitem.motY = (double) (-MathHelper.sin(this.pitch / 180.0F * 3.1415927F) * f + 0.1F);
-                f1 = this.random.nextFloat() * 3.1415927F * 2.0F;
+                entityitem.motX = (double) (-MathHelper.sin(this.yaw * 0.017453292F) * MathHelper.cos(this.pitch * 0.017453292F) * f);
+                entityitem.motZ = (double) (MathHelper.cos(this.yaw * 0.017453292F) * MathHelper.cos(this.pitch * 0.017453292F) * f);
+                entityitem.motY = (double) (-MathHelper.sin(this.pitch * 0.017453292F) * f + 0.1F);
+                f1 = this.random.nextFloat() * 6.2831855F;
                 f = 0.02F * this.random.nextFloat();
                 entityitem.motX += Math.cos((double) f1) * (double) f;
                 entityitem.motY += (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
                 entityitem.motZ += Math.sin((double) f1) * (double) f;
             }
 
-            this.a(entityitem);
+            ItemStack itemstack1 = this.a(entityitem);
+
             if (flag1) {
-                this.b(StatisticList.v);
+                if (itemstack1 != null) {
+                    this.a(StatisticList.e(itemstack1.getItem()), itemstack.count);
+                }
+
+                this.b(StatisticList.x);
             }
 
             return entityitem;
         }
     }
 
-    protected void a(EntityItem entityitem) {
+    protected ItemStack a(EntityItem entityitem) {
         this.world.addEntity(entityitem);
+        ItemStack itemstack = entityitem.getItemStack();
+
+        return itemstack;
     }
 
-    public float a(Block block) {
-        float f = this.inventory.a(block);
+    public float a(IBlockData iblockdata) {
+        float f = this.inventory.a(iblockdata);
 
         if (f > 1.0F) {
             int i = EnchantmentManager.getDigSpeedEnchantmentLevel(this);
-            ItemStack itemstack = this.inventory.getItemInHand();
+            ItemStack itemstack = this.getItemInMainHand();
 
             if (i > 0 && itemstack != null) {
                 f += (float) (i * i + 1);
             }
         }
 
-        if (this.hasEffect(MobEffectList.FASTER_DIG)) {
-            f *= 1.0F + (float) (this.getEffect(MobEffectList.FASTER_DIG).getAmplifier() + 1) * 0.2F;
+        if (this.hasEffect(MobEffects.FASTER_DIG)) {
+            f *= 1.0F + (float) (this.getEffect(MobEffects.FASTER_DIG).getAmplifier() + 1) * 0.2F;
         }
 
-        if (this.hasEffect(MobEffectList.SLOWER_DIG)) {
+        if (this.hasEffect(MobEffects.SLOWER_DIG)) {
             float f1 = 1.0F;
 
-            switch (this.getEffect(MobEffectList.SLOWER_DIG).getAmplifier()) {
+            switch (this.getEffect(MobEffects.SLOWER_DIG).getAmplifier()) {
             case 0:
                 f1 = 0.3F;
                 break;
@@ -586,7 +574,7 @@
             f *= f1;
         }
 
-        if (this.a(Material.WATER) && !EnchantmentManager.j(this)) {
+        if (this.a(Material.WATER) && !EnchantmentManager.i(this)) {
             f /= 5.0F;
         }
 
@@ -597,13 +585,13 @@
         return f;
     }
 
-    public boolean b(Block block) {
-        return this.inventory.b(block);
+    public boolean hasBlock(IBlockData iblockdata) {
+        return this.inventory.b(iblockdata);
     }
 
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
-        this.uniqueID = a(this.bH);
+        this.uniqueID = a(this.bR);
         NBTTagList nbttaglist = nbttagcompound.getList("Inventory", 10);
 
         this.inventory.b(nbttaglist);
@@ -613,20 +601,20 @@
         this.exp = nbttagcompound.getFloat("XpP");
         this.expLevel = nbttagcompound.getInt("XpLevel");
         this.expTotal = nbttagcompound.getInt("XpTotal");
-        this.f = nbttagcompound.getInt("XpSeed");
-        if (this.f == 0) {
-            this.f = this.random.nextInt();
+        this.h = nbttagcompound.getInt("XpSeed");
+        if (this.h == 0) {
+            this.h = this.random.nextInt();
         }
 
         this.setScore(nbttagcompound.getInt("Score"));
         if (this.sleeping) {
-            this.bx = new BlockPosition(this);
+            this.bedPosition = new BlockPosition(this);
             this.a(true, true, false);
         }
 
         if (nbttagcompound.hasKeyOfType("SpawnX", 99) && nbttagcompound.hasKeyOfType("SpawnY", 99) && nbttagcompound.hasKeyOfType("SpawnZ", 99)) {
-            this.c = new BlockPosition(nbttagcompound.getInt("SpawnX"), nbttagcompound.getInt("SpawnY"), nbttagcompound.getInt("SpawnZ"));
-            this.d = nbttagcompound.getBoolean("SpawnForced");
+            this.e = new BlockPosition(nbttagcompound.getInt("SpawnX"), nbttagcompound.getInt("SpawnY"), nbttagcompound.getInt("SpawnZ"));
+            this.f = nbttagcompound.getBoolean("SpawnForced");
         }
 
         this.foodData.a(nbttagcompound);
@@ -641,6 +629,7 @@
 
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
+        nbttagcompound.setInt("DataVersion", 169);
         nbttagcompound.set("Inventory", this.inventory.a(new NBTTagList()));
         nbttagcompound.setInt("SelectedItemSlot", this.inventory.itemInHandIndex);
         nbttagcompound.setBoolean("Sleeping", this.sleeping);
@@ -648,24 +637,18 @@
         nbttagcompound.setFloat("XpP", this.exp);
         nbttagcompound.setInt("XpLevel", this.expLevel);
         nbttagcompound.setInt("XpTotal", this.expTotal);
-        nbttagcompound.setInt("XpSeed", this.f);
+        nbttagcompound.setInt("XpSeed", this.h);
         nbttagcompound.setInt("Score", this.getScore());
-        if (this.c != null) {
-            nbttagcompound.setInt("SpawnX", this.c.getX());
-            nbttagcompound.setInt("SpawnY", this.c.getY());
-            nbttagcompound.setInt("SpawnZ", this.c.getZ());
-            nbttagcompound.setBoolean("SpawnForced", this.d);
+        if (this.e != null) {
+            nbttagcompound.setInt("SpawnX", this.e.getX());
+            nbttagcompound.setInt("SpawnY", this.e.getY());
+            nbttagcompound.setInt("SpawnZ", this.e.getZ());
+            nbttagcompound.setBoolean("SpawnForced", this.f);
         }
 
         this.foodData.b(nbttagcompound);
         this.abilities.a(nbttagcompound);
         nbttagcompound.set("EnderItems", this.enderChest.h());
-        ItemStack itemstack = this.inventory.getItemInHand();
-
-        if (itemstack != null && itemstack.getItem() != null) {
-            nbttagcompound.set("SelectedItem", itemstack.save(new NBTTagCompound()));
-        }
-
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
@@ -712,8 +695,8 @@
     }
 
     public boolean a(EntityHuman entityhuman) {
-        ScoreboardTeamBase scoreboardteambase = this.getScoreboardTeam();
-        ScoreboardTeamBase scoreboardteambase1 = entityhuman.getScoreboardTeam();
+        ScoreboardTeamBase scoreboardteambase = this.aO();
+        ScoreboardTeamBase scoreboardteambase1 = entityhuman.aO();
 
         return scoreboardteambase == null ? true : (!scoreboardteambase.isAlly(scoreboardteambase1) ? true : scoreboardteambase.allowFriendlyFire());
     }
@@ -722,11 +705,28 @@
         this.inventory.a(f);
     }
 
-    public int br() {
-        return this.inventory.m();
+    protected void k(float f) {
+        if (f > 0.0F && this.bm != null && this.bm.getItem() == Items.SHIELD) {
+            int i = 1 + MathHelper.d(f);
+
+            this.bm.damage(i, this);
+            if (this.bm.count <= 0) {
+                EnumHand enumhand = this.ct();
+
+                if (enumhand == EnumHand.MAIN_HAND) {
+                    this.setSlot(EnumItemSlot.MAINHAND, (ItemStack) null);
+                } else {
+                    this.setSlot(EnumItemSlot.OFFHAND, (ItemStack) null);
+                }
+
+                this.bm = null;
+                this.a(SoundEffects.eR, 0.8F, 0.8F + this.world.random.nextFloat() * 0.4F);
+            }
+        }
+
     }
 
-    public float bY() {
+    public float cG() {
         int i = 0;
         ItemStack[] aitemstack = this.inventory.armor;
         int j = aitemstack.length;
@@ -742,12 +742,8 @@
         return (float) i / (float) this.inventory.armor.length;
     }
 
-    protected void d(DamageSource damagesource, float f) {
+    protected void damageEntity0(DamageSource damagesource, float f) {
         if (!this.isInvulnerable(damagesource)) {
-            if (!damagesource.ignoresArmor() && this.isBlocking() && f > 0.0F) {
-                f = (1.0F + f) * 0.5F;
-            }
-
             f = this.applyArmorModifier(damagesource, f);
             f = this.applyMagicModifier(damagesource, f);
             float f1 = f;
@@ -759,9 +755,9 @@
                 float f2 = this.getHealth();
 
                 this.setHealth(this.getHealth() - f);
-                this.bs().a(damagesource, f2, f);
+                this.getCombatTracker().trackDamage(damagesource, f2, f);
                 if (f < 3.4028235E37F) {
-                    this.a(StatisticList.x, Math.round(f * 10.0F));
+                    this.a(StatisticList.z, Math.round(f * 10.0F));
                 }
 
             }
@@ -772,144 +768,217 @@
 
     public void a(CommandBlockListenerAbstract commandblocklistenerabstract) {}
 
+    public void a(TileEntityCommand tileentitycommand) {}
+
     public void openTrade(IMerchant imerchant) {}
 
     public void openContainer(IInventory iinventory) {}
 
-    public void openHorseInventory(EntityHorse entityhorse, IInventory iinventory) {}
+    public void a(EntityHorse entityhorse, IInventory iinventory) {}
 
     public void openTileEntity(ITileEntityContainer itileentitycontainer) {}
 
-    public void openBook(ItemStack itemstack) {}
+    public void a(ItemStack itemstack, EnumHand enumhand) {}
 
-    public boolean u(Entity entity) {
+    public EnumInteractionResult a(Entity entity, ItemStack itemstack, EnumHand enumhand) {
         if (this.isSpectator()) {
             if (entity instanceof IInventory) {
                 this.openContainer((IInventory) entity);
             }
 
-            return false;
+            return EnumInteractionResult.PASS;
         } else {
-            ItemStack itemstack = this.bZ();
             ItemStack itemstack1 = itemstack != null ? itemstack.cloneItemStack() : null;
 
-            if (!entity.e(this)) {
+            if (!entity.a(this, itemstack, enumhand)) {
                 if (itemstack != null && entity instanceof EntityLiving) {
                     if (this.abilities.canInstantlyBuild) {
                         itemstack = itemstack1;
                     }
 
-                    if (itemstack.a(this, (EntityLiving) entity)) {
+                    if (itemstack.a(this, (EntityLiving) entity, enumhand)) {
                         if (itemstack.count <= 0 && !this.abilities.canInstantlyBuild) {
-                            this.ca();
+                            this.a(enumhand, (ItemStack) null);
                         }
 
-                        return true;
+                        return EnumInteractionResult.SUCCESS;
                     }
                 }
 
-                return false;
+                return EnumInteractionResult.PASS;
             } else {
-                if (itemstack != null && itemstack == this.bZ()) {
+                if (itemstack != null && itemstack == this.b(enumhand)) {
                     if (itemstack.count <= 0 && !this.abilities.canInstantlyBuild) {
-                        this.ca();
+                        this.a(enumhand, (ItemStack) null);
                     } else if (itemstack.count < itemstack1.count && this.abilities.canInstantlyBuild) {
                         itemstack.count = itemstack1.count;
                     }
                 }
 
-                return true;
+                return EnumInteractionResult.SUCCESS;
             }
         }
     }
 
-    public ItemStack bZ() {
-        return this.inventory.getItemInHand();
+    public double ax() {
+        return -0.35D;
     }
 
-    public void ca() {
-        this.inventory.setItem(this.inventory.itemInHandIndex, (ItemStack) null);
-    }
-
-    public double am() {
-        return -0.35D;
+    public void stopRiding() {
+        super.stopRiding();
+        this.j = 0;
     }
 
     public void attack(Entity entity) {
-        if (entity.aD()) {
-            if (!entity.l(this)) {
+        if (entity.aT()) {
+            if (!entity.t(this)) {
                 float f = (float) this.getAttributeInstance(GenericAttributes.ATTACK_DAMAGE).getValue();
-                byte b0 = 0;
                 float f1 = 0.0F;
 
                 if (entity instanceof EntityLiving) {
-                    f1 = EnchantmentManager.a(this.bA(), ((EntityLiving) entity).getMonsterType());
+                    f1 = EnchantmentManager.a(this.getItemInMainHand(), ((EntityLiving) entity).getMonsterType());
                 } else {
-                    f1 = EnchantmentManager.a(this.bA(), EnumMonsterType.UNDEFINED);
+                    f1 = EnchantmentManager.a(this.getItemInMainHand(), EnumMonsterType.UNDEFINED);
                 }
 
-                int i = b0 + EnchantmentManager.a((EntityLiving) this);
-
-                if (this.isSprinting()) {
-                    ++i;
-                }
+                float f2 = this.o(0.5F);
 
+                f *= 0.2F + f2 * f2 * 0.8F;
+                f1 *= f2;
+                this.cZ();
                 if (f > 0.0F || f1 > 0.0F) {
-                    boolean flag = this.fallDistance > 0.0F && !this.onGround && !this.k_() && !this.V() && !this.hasEffect(MobEffectList.BLINDNESS) && this.vehicle == null && entity instanceof EntityLiving;
+                    boolean flag = f2 > 0.9F;
+                    boolean flag1 = false;
+                    boolean flag2 = false;
+                    boolean flag3 = false;
+                    byte b0 = 0;
+                    int i = b0 + EnchantmentManager.a((EntityLiving) this);
+
+                    if (this.isSprinting() && flag) {
+                        this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.dX, this.bz(), 1.0F, 1.0F);
+                        ++i;
+                        flag1 = true;
+                    }
 
-                    if (flag && f > 0.0F) {
+                    flag2 = flag && this.fallDistance > 0.0F && !this.onGround && !this.n_() && !this.isInWater() && !this.hasEffect(MobEffects.BLINDNESS) && !this.isPassenger() && entity instanceof EntityLiving;
+                    flag2 = flag2 && !this.isSprinting();
+                    if (flag2) {
                         f *= 1.5F;
                     }
 
                     f += f1;
-                    boolean flag1 = false;
+                    double d0 = (double) (this.J - this.I);
+
+                    if (flag && !flag2 && !flag1 && this.onGround && d0 < (double) this.ck()) {
+                        ItemStack itemstack = this.b(EnumHand.MAIN_HAND);
+
+                        if (itemstack != null && itemstack.getItem() instanceof ItemSword) {
+                            flag3 = true;
+                        }
+                    }
+
+                    float f3 = 0.0F;
+                    boolean flag4 = false;
                     int j = EnchantmentManager.getFireAspectEnchantmentLevel(this);
 
-                    if (entity instanceof EntityLiving && j > 0 && !entity.isBurning()) {
-                        flag1 = true;
-                        entity.setOnFire(1);
+                    if (entity instanceof EntityLiving) {
+                        f3 = ((EntityLiving) entity).getHealth();
+                        if (j > 0 && !entity.isBurning()) {
+                            flag4 = true;
+                            entity.setOnFire(1);
+                        }
                     }
 
-                    double d0 = entity.motX;
-                    double d1 = entity.motY;
-                    double d2 = entity.motZ;
-                    boolean flag2 = entity.damageEntity(DamageSource.playerAttack(this), f);
+                    double d1 = entity.motX;
+                    double d2 = entity.motY;
+                    double d3 = entity.motZ;
+                    boolean flag5 = entity.damageEntity(DamageSource.playerAttack(this), f);
 
-                    if (flag2) {
+                    if (flag5) {
                         if (i > 0) {
-                            entity.g((double) (-MathHelper.sin(this.yaw * 3.1415927F / 180.0F) * (float) i * 0.5F), 0.1D, (double) (MathHelper.cos(this.yaw * 3.1415927F / 180.0F) * (float) i * 0.5F));
+                            if (entity instanceof EntityLiving) {
+                                ((EntityLiving) entity).a(this, (float) i * 0.5F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)));
+                            } else {
+                                entity.g((double) (-MathHelper.sin(this.yaw * 0.017453292F) * (float) i * 0.5F), 0.1D, (double) (MathHelper.cos(this.yaw * 0.017453292F) * (float) i * 0.5F));
+                            }
+
                             this.motX *= 0.6D;
                             this.motZ *= 0.6D;
                             this.setSprinting(false);
                         }
 
+                        if (flag3) {
+                            List list = this.world.a(EntityLiving.class, entity.getBoundingBox().grow(1.0D, 0.25D, 1.0D));
+                            Iterator iterator = list.iterator();
+
+                            while (iterator.hasNext()) {
+                                EntityLiving entityliving = (EntityLiving) iterator.next();
+
+                                if (entityliving != this && entityliving != entity && !this.r(entityliving) && this.h(entityliving) < 9.0D) {
+                                    entityliving.a(this, 0.4F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)));
+                                    entityliving.damageEntity(DamageSource.playerAttack(this), 1.0F);
+                                }
+                            }
+
+                            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ea, this.bz(), 1.0F, 1.0F);
+                            this.cH();
+                        }
+
                         if (entity instanceof EntityPlayer && entity.velocityChanged) {
                             ((EntityPlayer) entity).playerConnection.sendPacket(new PacketPlayOutEntityVelocity(entity));
                             entity.velocityChanged = false;
-                            entity.motX = d0;
-                            entity.motY = d1;
-                            entity.motZ = d2;
+                            entity.motX = d1;
+                            entity.motY = d2;
+                            entity.motZ = d3;
                         }
 
-                        if (flag) {
-                            this.b(entity);
+                        if (flag2) {
+                            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_PLAYER_ATTACK_CRIT, this.bz(), 1.0F, 1.0F);
+                            this.a(entity);
+                        }
+
+                        if (!flag2 && !flag3) {
+                            if (flag) {
+                                this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.dZ, this.bz(), 1.0F, 1.0F);
+                            } else {
+                                this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.eb, this.bz(), 1.0F, 1.0F);
+                            }
                         }
 
                         if (f1 > 0.0F) {
-                            this.c(entity);
+                            this.b(entity);
+                        }
+
+                        if (!this.world.isClientSide && entity instanceof EntityHuman) {
+                            EntityHuman entityhuman = (EntityHuman) entity;
+                            ItemStack itemstack1 = this.getItemInMainHand();
+                            ItemStack itemstack2 = entityhuman.cs() ? entityhuman.cv() : null;
+
+                            if (itemstack1 != null && itemstack2 != null && itemstack1.getItem() instanceof ItemAxe && itemstack2.getItem() == Items.SHIELD) {
+                                float f4 = 0.25F + (float) EnchantmentManager.getDigSpeedEnchantmentLevel(this) * 0.05F;
+
+                                if (flag1) {
+                                    f4 += 0.75F;
+                                }
+
+                                if (this.random.nextFloat() < f4) {
+                                    entityhuman.da().a(Items.SHIELD, 100);
+                                    this.world.broadcastEntityEffect(entityhuman, (byte) 30);
+                                }
+                            }
                         }
 
                         if (f >= 18.0F) {
                             this.b((Statistic) AchievementList.F);
                         }
 
-                        this.p(entity);
+                        this.z(entity);
                         if (entity instanceof EntityLiving) {
                             EnchantmentManager.a((EntityLiving) entity, (Entity) this);
                         }
 
-                        EnchantmentManager.b(this, entity);
-                        ItemStack itemstack = this.bZ();
+                        EnchantmentManager.b((EntityLiving) this, entity);
+                        ItemStack itemstack3 = this.getItemInMainHand();
                         Object object = entity;
 
                         if (entity instanceof EntityComplexPart) {
@@ -920,23 +989,34 @@
                             }
                         }
 
-                        if (itemstack != null && object instanceof EntityLiving) {
-                            itemstack.a((EntityLiving) object, this);
-                            if (itemstack.count <= 0) {
-                                this.ca();
+                        if (itemstack3 != null && object instanceof EntityLiving) {
+                            itemstack3.a((EntityLiving) object, this);
+                            if (itemstack3.count <= 0) {
+                                this.a(EnumHand.MAIN_HAND, (ItemStack) null);
                             }
                         }
 
                         if (entity instanceof EntityLiving) {
-                            this.a(StatisticList.w, Math.round(f * 10.0F));
+                            float f5 = f3 - ((EntityLiving) entity).getHealth();
+
+                            this.a(StatisticList.y, Math.round(f5 * 10.0F));
                             if (j > 0) {
                                 entity.setOnFire(j * 4);
                             }
+
+                            if (this.world instanceof WorldServer && f5 > 2.0F) {
+                                int k = (int) ((double) f5 * 0.5D);
+
+                                ((WorldServer) this.world).a(EnumParticle.DAMAGE_INDICATOR, entity.locX, entity.locY + (double) (entity.length * 0.5F), entity.locZ, k, 0.1D, 0.0D, 0.1D, 0.2D, new int[0]);
+                            }
                         }
 
                         this.applyExhaustion(0.3F);
-                    } else if (flag1) {
-                        entity.extinguish();
+                    } else {
+                        this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.dY, this.bz(), 1.0F, 1.0F);
+                        if (flag4) {
+                            entity.extinguish();
+                        }
                     }
                 }
 
@@ -944,9 +1024,19 @@
         }
     }
 
+    public void a(Entity entity) {}
+
     public void b(Entity entity) {}
 
-    public void c(Entity entity) {}
+    public void cH() {
+        double d0 = (double) (-MathHelper.sin(this.yaw * 0.017453292F));
+        double d1 = (double) MathHelper.cos(this.yaw * 0.017453292F);
+
+        if (this.world instanceof WorldServer) {
+            ((WorldServer) this.world).a(EnumParticle.SWEEP_ATTACK, this.locX + d0, this.locY + (double) this.length * 0.5D, this.locZ + d1, 0, d0, 0.0D, d1, 0.0D, new int[0]);
+        }
+
+    }
 
     public void die() {
         super.die();
@@ -961,8 +1051,12 @@
         return !this.sleeping && super.inBlock();
     }
 
+    public boolean cJ() {
+        return false;
+    }
+
     public GameProfile getProfile() {
-        return this.bH;
+        return this.bR;
     }
 
     public EntityHuman.EnumBedResult a(BlockPosition blockposition) {
@@ -975,7 +1069,7 @@
                 return EntityHuman.EnumBedResult.NOT_POSSIBLE_HERE;
             }
 
-            if (this.world.w()) {
+            if (this.world.B()) {
                 return EntityHuman.EnumBedResult.NOT_POSSIBLE_NOW;
             }
 
@@ -992,13 +1086,13 @@
             }
         }
 
-        if (this.au()) {
-            this.mount((Entity) null);
+        if (this.isPassenger()) {
+            this.stopRiding();
         }
 
         this.setSize(0.2F, 0.2F);
         if (this.world.isLoaded(blockposition)) {
-            EnumDirection enumdirection = (EnumDirection) this.world.getType(blockposition).get(BlockDirectional.FACING);
+            EnumDirection enumdirection = (EnumDirection) this.world.getType(blockposition).get(BlockFacingHorizontal.FACING);
             float f = 0.5F;
             float f1 = 0.5F;
 
@@ -1027,7 +1121,7 @@
 
         this.sleeping = true;
         this.sleepTicks = 0;
-        this.bx = blockposition;
+        this.bedPosition = blockposition;
         this.motX = this.motZ = this.motY = 0.0D;
         if (!this.world.isClientSide) {
             this.world.everyoneSleeping();
@@ -1037,37 +1131,37 @@
     }
 
     private void a(EnumDirection enumdirection) {
-        this.by = 0.0F;
-        this.bz = 0.0F;
+        this.bH = 0.0F;
+        this.bI = 0.0F;
         switch (EntityHuman.SyntheticClass_1.a[enumdirection.ordinal()]) {
         case 1:
-            this.bz = -1.8F;
+            this.bI = -1.8F;
             break;
 
         case 2:
-            this.bz = 1.8F;
+            this.bI = 1.8F;
             break;
 
         case 3:
-            this.by = 1.8F;
+            this.bH = 1.8F;
             break;
 
         case 4:
-            this.by = -1.8F;
+            this.bH = -1.8F;
         }
 
     }
 
     public void a(boolean flag, boolean flag1, boolean flag2) {
         this.setSize(0.6F, 1.8F);
-        IBlockData iblockdata = this.world.getType(this.bx);
+        IBlockData iblockdata = this.world.getType(this.bedPosition);
 
-        if (this.bx != null && iblockdata.getBlock() == Blocks.BED) {
-            this.world.setTypeAndData(this.bx, iblockdata.set(BlockBed.OCCUPIED, Boolean.valueOf(false)), 4);
-            BlockPosition blockposition = BlockBed.a(this.world, this.bx, 0);
+        if (this.bedPosition != null && iblockdata.getBlock() == Blocks.BED) {
+            this.world.setTypeAndData(this.bedPosition, iblockdata.set(BlockBed.OCCUPIED, Boolean.valueOf(false)), 4);
+            BlockPosition blockposition = BlockBed.a(this.world, this.bedPosition, 0);
 
             if (blockposition == null) {
-                blockposition = this.bx.up();
+                blockposition = this.bedPosition.up();
             }
 
             this.setPosition((double) ((float) blockposition.getX() + 0.5F), (double) ((float) blockposition.getY() + 0.1F), (double) ((float) blockposition.getZ() + 0.5F));
@@ -1080,13 +1174,13 @@
 
         this.sleepTicks = flag ? 0 : 100;
         if (flag2) {
-            this.setRespawnPosition(this.bx, false);
+            this.setRespawnPosition(this.bedPosition, false);
         }
 
     }
 
-    private boolean p() {
-        return this.world.getType(this.bx).getBlock() == Blocks.BED;
+    private boolean r() {
+        return this.world.getType(this.bedPosition).getBlock() == Blocks.BED;
     }
 
     public static BlockPosition getBed(World world, BlockPosition blockposition, boolean flag) {
@@ -1096,8 +1190,8 @@
             if (!flag) {
                 return null;
             } else {
-                boolean flag1 = block.g();
-                boolean flag2 = world.getType(blockposition.up()).getBlock().g();
+                boolean flag1 = block.d();
+                boolean flag2 = world.getType(blockposition.up()).getBlock().d();
 
                 return flag1 && flag2 ? blockposition : null;
             }
@@ -1117,24 +1211,28 @@
     public void b(IChatBaseComponent ichatbasecomponent) {}
 
     public BlockPosition getBed() {
-        return this.c;
+        return this.e;
     }
 
     public boolean isRespawnForced() {
-        return this.d;
+        return this.f;
     }
 
     public void setRespawnPosition(BlockPosition blockposition, boolean flag) {
         if (blockposition != null) {
-            this.c = blockposition;
-            this.d = flag;
+            this.e = blockposition;
+            this.f = flag;
         } else {
-            this.c = null;
-            this.d = false;
+            this.e = null;
+            this.f = false;
         }
 
     }
 
+    public boolean a(Achievement achievement) {
+        return false;
+    }
+
     public void b(Statistic statistic) {
         this.a(statistic, 1);
     }
@@ -1143,9 +1241,9 @@
 
     public void a(Statistic statistic) {}
 
-    public void bF() {
-        super.bF();
-        this.b(StatisticList.u);
+    public void ch() {
+        super.ch();
+        this.b(StatisticList.w);
         if (this.isSprinting()) {
             this.applyExhaustion(0.8F);
         } else {
@@ -1159,14 +1257,16 @@
         double d1 = this.locY;
         double d2 = this.locZ;
 
-        if (this.abilities.isFlying && this.vehicle == null) {
+        if (this.abilities.isFlying && !this.isPassenger()) {
             double d3 = this.motY;
-            float f2 = this.aM;
+            float f2 = this.aQ;
 
-            this.aM = this.abilities.a() * (float) (this.isSprinting() ? 2 : 1);
+            this.aQ = this.abilities.a() * (float) (this.isSprinting() ? 2 : 1);
             super.g(f, f1);
             this.motY = d3 * 0.6D;
-            this.aM = f2;
+            this.aQ = f2;
+            this.fallDistance = 0.0F;
+            this.setFlag(7, false);
         } else {
             super.g(f, f1);
         }
@@ -1174,73 +1274,75 @@
         this.checkMovement(this.locX - d0, this.locY - d1, this.locZ - d2);
     }
 
-    public float bI() {
+    public float ck() {
         return (float) this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getValue();
     }
 
     public void checkMovement(double d0, double d1, double d2) {
-        if (this.vehicle == null) {
+        if (!this.isPassenger()) {
             int i;
 
             if (this.a(Material.WATER)) {
                 i = Math.round(MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2) * 100.0F);
                 if (i > 0) {
-                    this.a(StatisticList.p, i);
+                    this.a(StatisticList.q, i);
                     this.applyExhaustion(0.015F * (float) i * 0.01F);
                 }
-            } else if (this.V()) {
+            } else if (this.isInWater()) {
                 i = Math.round(MathHelper.sqrt(d0 * d0 + d2 * d2) * 100.0F);
                 if (i > 0) {
-                    this.a(StatisticList.l, i);
+                    this.a(StatisticList.m, i);
                     this.applyExhaustion(0.015F * (float) i * 0.01F);
                 }
-            } else if (this.k_()) {
+            } else if (this.n_()) {
                 if (d1 > 0.0D) {
-                    this.a(StatisticList.n, (int) Math.round(d1 * 100.0D));
+                    this.a(StatisticList.o, (int) Math.round(d1 * 100.0D));
                 }
             } else if (this.onGround) {
                 i = Math.round(MathHelper.sqrt(d0 * d0 + d2 * d2) * 100.0F);
                 if (i > 0) {
-                    this.a(StatisticList.i, i);
                     if (this.isSprinting()) {
-                        this.a(StatisticList.k, i);
+                        this.a(StatisticList.l, i);
                         this.applyExhaustion(0.099999994F * (float) i * 0.01F);
+                    } else if (this.isSneaking()) {
+                        this.a(StatisticList.k, i);
+                        this.applyExhaustion(0.005F * (float) i * 0.01F);
                     } else {
-                        if (this.isSneaking()) {
-                            this.a(StatisticList.j, i);
-                        }
-
+                        this.a(StatisticList.j, i);
                         this.applyExhaustion(0.01F * (float) i * 0.01F);
                     }
                 }
+            } else if (this.cB()) {
+                i = Math.round(MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2) * 100.0F);
+                this.a(StatisticList.v, i);
             } else {
                 i = Math.round(MathHelper.sqrt(d0 * d0 + d2 * d2) * 100.0F);
                 if (i > 25) {
-                    this.a(StatisticList.o, i);
+                    this.a(StatisticList.p, i);
                 }
             }
 
         }
     }
 
-    private void l(double d0, double d1, double d2) {
-        if (this.vehicle != null) {
+    private void m(double d0, double d1, double d2) {
+        if (this.isPassenger()) {
             int i = Math.round(MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2) * 100.0F);
 
             if (i > 0) {
-                if (this.vehicle instanceof EntityMinecartAbstract) {
-                    this.a(StatisticList.q, i);
-                    if (this.e == null) {
-                        this.e = new BlockPosition(this);
-                    } else if (this.e.c((double) MathHelper.floor(this.locX), (double) MathHelper.floor(this.locY), (double) MathHelper.floor(this.locZ)) >= 1000000.0D) {
+                if (this.by() instanceof EntityMinecartAbstract) {
+                    this.a(StatisticList.r, i);
+                    if (this.g == null) {
+                        this.g = new BlockPosition(this);
+                    } else if (this.g.distanceSquared((double) MathHelper.floor(this.locX), (double) MathHelper.floor(this.locY), (double) MathHelper.floor(this.locZ)) >= 1000000.0D) {
                         this.b((Statistic) AchievementList.q);
                     }
-                } else if (this.vehicle instanceof EntityBoat) {
-                    this.a(StatisticList.r, i);
-                } else if (this.vehicle instanceof EntityPig) {
+                } else if (this.by() instanceof EntityBoat) {
                     this.a(StatisticList.s, i);
-                } else if (this.vehicle instanceof EntityHorse) {
+                } else if (this.by() instanceof EntityPig) {
                     this.a(StatisticList.t, i);
+                } else if (this.by() instanceof EntityHorse) {
+                    this.a(StatisticList.u, i);
                 }
             }
         }
@@ -1250,30 +1352,30 @@
     public void e(float f, float f1) {
         if (!this.abilities.canFly) {
             if (f >= 2.0F) {
-                this.a(StatisticList.m, (int) Math.round((double) f * 100.0D));
+                this.a(StatisticList.n, (int) Math.round((double) f * 100.0D));
             }
 
             super.e(f, f1);
         }
     }
 
-    protected void X() {
+    protected void ak() {
         if (!this.isSpectator()) {
-            super.X();
+            super.ak();
         }
 
     }
 
-    protected String n(int i) {
-        return i > 4 ? "game.player.hurt.fall.big" : "game.player.hurt.fall.small";
+    protected SoundEffect e(int i) {
+        return i > 4 ? SoundEffects.ec : SoundEffects.ei;
     }
 
-    public void a(EntityLiving entityliving) {
+    public void b(EntityLiving entityliving) {
         if (entityliving instanceof IMonster) {
             this.b((Statistic) AchievementList.s);
         }
 
-        EntityTypes.MonsterEggInfo entitytypes_monsteregginfo = (EntityTypes.MonsterEggInfo) EntityTypes.eggInfo.get(Integer.valueOf(EntityTypes.a(entityliving)));
+        EntityTypes.MonsterEggInfo entitytypes_monsteregginfo = (EntityTypes.MonsterEggInfo) EntityTypes.eggInfo.get(EntityTypes.b((Entity) entityliving));
 
         if (entitytypes_monsteregginfo != null) {
             this.b(entitytypes_monsteregginfo.killEntityStatistic);
@@ -1281,17 +1383,13 @@
 
     }
 
-    public void aA() {
+    public void aQ() {
         if (!this.abilities.isFlying) {
-            super.aA();
+            super.aQ();
         }
 
     }
 
-    public ItemStack q(int i) {
-        return this.inventory.e(i);
-    }
-
     public void giveExp(int i) {
         this.addScore(i);
         int j = Integer.MAX_VALUE - this.expTotal;
@@ -1309,8 +1407,8 @@
 
     }
 
-    public int cj() {
-        return this.f;
+    public int cQ() {
+        return this.h;
     }
 
     public void enchantDone(int i) {
@@ -1321,7 +1419,7 @@
             this.expTotal = 0;
         }
 
-        this.f = this.random.nextInt();
+        this.h = this.random.nextInt();
     }
 
     public void levelDown(int i) {
@@ -1332,11 +1430,11 @@
             this.expTotal = 0;
         }
 
-        if (i > 0 && this.expLevel % 5 == 0 && (float) this.i < (float) this.ticksLived - 100.0F) {
+        if (i > 0 && this.expLevel % 5 == 0 && (float) this.bQ < (float) this.ticksLived - 100.0F) {
             float f = this.expLevel > 30 ? 1.0F : (float) this.expLevel / 30.0F;
 
-            this.world.makeSound(this, "random.levelup", f * 0.75F, 1.0F);
-            this.i = this.ticksLived;
+            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.eh, this.bz(), f * 0.75F, 1.0F);
+            this.bQ = this.ticksLived;
         }
 
     }
@@ -1358,26 +1456,15 @@
         return this.foodData;
     }
 
-    public boolean j(boolean flag) {
+    public boolean l(boolean flag) {
         return (flag || this.foodData.c()) && !this.abilities.isInvulnerable;
     }
 
-    public boolean cm() {
+    public boolean cT() {
         return this.getHealth() > 0.0F && this.getHealth() < this.getMaxHealth();
     }
 
-    public void a(ItemStack itemstack, int i) {
-        if (itemstack != this.g) {
-            this.g = itemstack;
-            this.h = i;
-            if (!this.world.isClientSide) {
-                this.f(true);
-            }
-
-        }
-    }
-
-    public boolean cn() {
+    public boolean cU() {
         return this.abilities.mayBuild;
     }
 
@@ -1390,17 +1477,17 @@
             BlockPosition blockposition1 = blockposition.shift(enumdirection.opposite());
             Block block = this.world.getType(blockposition1).getBlock();
 
-            return itemstack.d(block) || itemstack.x();
+            return itemstack.b(block) || itemstack.x();
         }
     }
 
     protected int getExpValue(EntityHuman entityhuman) {
-        if (this.world.getGameRules().getBoolean("keepInventory")) {
-            return 0;
-        } else {
+        if (!this.world.getGameRules().getBoolean("keepInventory") && !this.isSpectator()) {
             int i = this.expLevel * 7;
 
             return i > 100 ? 100 : i;
+        } else {
+            return 0;
         }
     }
 
@@ -1410,7 +1497,7 @@
 
     public void copyTo(EntityHuman entityhuman, boolean flag) {
         if (flag) {
-            this.inventory.b(entityhuman.inventory);
+            this.inventory.a(entityhuman.inventory);
             this.setHealth(entityhuman.getHealth());
             this.foodData = entityhuman.foodData;
             this.expLevel = entityhuman.expLevel;
@@ -1420,20 +1507,20 @@
             this.an = entityhuman.an;
             this.ao = entityhuman.ao;
             this.ap = entityhuman.ap;
-        } else if (this.world.getGameRules().getBoolean("keepInventory")) {
-            this.inventory.b(entityhuman.inventory);
+        } else if (this.world.getGameRules().getBoolean("keepInventory") || entityhuman.isSpectator()) {
+            this.inventory.a(entityhuman.inventory);
             this.expLevel = entityhuman.expLevel;
             this.expTotal = entityhuman.expTotal;
             this.exp = entityhuman.exp;
             this.setScore(entityhuman.getScore());
         }
 
-        this.f = entityhuman.f;
+        this.h = entityhuman.h;
         this.enderChest = entityhuman.enderChest;
-        this.getDataWatcher().watch(10, Byte.valueOf(entityhuman.getDataWatcher().getByte(10)));
+        this.getDataWatcher().set(EntityHuman.bp, entityhuman.getDataWatcher().get(EntityHuman.bp));
     }
 
-    protected boolean s_() {
+    protected boolean playStepSound() {
         return !this.abilities.isFlying;
     }
 
@@ -1442,32 +1529,44 @@
     public void a(WorldSettings.EnumGamemode worldsettings_enumgamemode) {}
 
     public String getName() {
-        return this.bH.getName();
+        return this.bR.getName();
     }
 
     public InventoryEnderChest getEnderChest() {
         return this.enderChest;
     }
 
-    public ItemStack getEquipment(int i) {
-        return i == 0 ? this.inventory.getItemInHand() : this.inventory.armor[i - 1];
+    public ItemStack getEquipment(EnumItemSlot enumitemslot) {
+        return enumitemslot == EnumItemSlot.MAINHAND ? this.inventory.getItemInHand() : (enumitemslot == EnumItemSlot.OFFHAND ? this.inventory.extraSlots[0] : (enumitemslot.a() == EnumItemSlot.Function.ARMOR ? this.inventory.armor[enumitemslot.b()] : null));
+    }
+
+    public void setSlot(EnumItemSlot enumitemslot, ItemStack itemstack) {
+        if (enumitemslot == EnumItemSlot.MAINHAND) {
+            this.a_(itemstack);
+            this.inventory.items[this.inventory.itemInHandIndex] = itemstack;
+        } else if (enumitemslot == EnumItemSlot.OFFHAND) {
+            this.a_(itemstack);
+            this.inventory.extraSlots[0] = itemstack;
+        } else if (enumitemslot.a() == EnumItemSlot.Function.ARMOR) {
+            this.a_(itemstack);
+            this.inventory.armor[enumitemslot.b()] = itemstack;
+        }
+
     }
 
-    public ItemStack bA() {
-        return this.inventory.getItemInHand();
+    public Iterable<ItemStack> aE() {
+        return Lists.newArrayList(new ItemStack[] { this.getItemInMainHand(), this.getItemInOffHand()});
     }
 
-    public void setEquipment(int i, ItemStack itemstack) {
-        this.inventory.armor[i] = itemstack;
+    public Iterable<ItemStack> getArmorItems() {
+        return Arrays.asList(this.inventory.armor);
     }
 
     public abstract boolean isSpectator();
 
-    public ItemStack[] getEquipment() {
-        return this.inventory.armor;
-    }
+    public abstract boolean l_();
 
-    public boolean aL() {
+    public boolean bd() {
         return !this.abilities.isFlying;
     }
 
@@ -1475,15 +1574,15 @@
         return this.world.getScoreboard();
     }
 
-    public ScoreboardTeamBase getScoreboardTeam() {
+    public ScoreboardTeamBase aO() {
         return this.getScoreboard().getPlayerTeam(this.getName());
     }
 
     public IChatBaseComponent getScoreboardDisplayName() {
-        ChatComponentText chatcomponenttext = new ChatComponentText(ScoreboardTeam.getPlayerDisplayName(this.getScoreboardTeam(), this.getName()));
+        ChatComponentText chatcomponenttext = new ChatComponentText(ScoreboardTeam.getPlayerDisplayName(this.aO(), this.getName()));
 
         chatcomponenttext.getChatModifier().setChatClickable(new ChatClickable(ChatClickable.EnumClickAction.SUGGEST_COMMAND, "/msg " + this.getName() + " "));
-        chatcomponenttext.getChatModifier().setChatHoverable(this.aQ());
+        chatcomponenttext.getChatModifier().setChatHoverable(this.bk());
         chatcomponenttext.getChatModifier().setInsertion(this.getName());
         return chatcomponenttext;
     }
@@ -1493,9 +1592,11 @@
 
         if (this.isSleeping()) {
             f = 0.2F;
-        }
-
-        if (this.isSneaking()) {
+        } else if (!this.isSneaking() && this.length != 1.65F) {
+            if (this.cB() || this.length == 0.6F) {
+                f = 0.4F;
+            }
+        } else {
             f -= 0.08F;
         }
 
@@ -1507,24 +1608,24 @@
             f = 0.0F;
         }
 
-        this.getDataWatcher().watch(17, Float.valueOf(f));
+        this.getDataWatcher().set(EntityHuman.a, Float.valueOf(f));
     }
 
     public float getAbsorptionHearts() {
-        return this.getDataWatcher().getFloat(17);
+        return ((Float) this.getDataWatcher().get(EntityHuman.a)).floatValue();
     }
 
     public static UUID a(GameProfile gameprofile) {
         UUID uuid = gameprofile.getId();
 
         if (uuid == null) {
-            uuid = b(gameprofile.getName());
+            uuid = d(gameprofile.getName());
         }
 
         return uuid;
     }
 
-    public static UUID b(String s) {
+    public static UUID d(String s) {
         return UUID.nameUUIDFromBytes(("OfflinePlayer:" + s).getBytes(Charsets.UTF_8));
     }
 
@@ -1532,50 +1633,102 @@
         if (chestlock.a()) {
             return true;
         } else {
-            ItemStack itemstack = this.bZ();
+            ItemStack itemstack = this.getItemInMainHand();
 
             return itemstack != null && itemstack.hasName() ? itemstack.getName().equals(chestlock.b()) : false;
         }
     }
 
     public boolean getSendCommandFeedback() {
-        return MinecraftServer.getServer().worldServer[0].getGameRules().getBoolean("sendCommandFeedback");
+        return this.h().worldServer[0].getGameRules().getBoolean("sendCommandFeedback");
     }
 
-    public boolean d(int i, ItemStack itemstack) {
+    public boolean c(int i, ItemStack itemstack) {
         if (i >= 0 && i < this.inventory.items.length) {
             this.inventory.setItem(i, itemstack);
             return true;
         } else {
-            int j = i - 100;
-            int k;
+            EnumItemSlot enumitemslot;
+
+            if (i == 100 + EnumItemSlot.HEAD.b()) {
+                enumitemslot = EnumItemSlot.HEAD;
+            } else if (i == 100 + EnumItemSlot.CHEST.b()) {
+                enumitemslot = EnumItemSlot.CHEST;
+            } else if (i == 100 + EnumItemSlot.LEGS.b()) {
+                enumitemslot = EnumItemSlot.LEGS;
+            } else if (i == 100 + EnumItemSlot.FEET.b()) {
+                enumitemslot = EnumItemSlot.FEET;
+            } else {
+                enumitemslot = null;
+            }
+
+            if (i == 98) {
+                this.setSlot(EnumItemSlot.MAINHAND, itemstack);
+                return true;
+            } else if (i == 99) {
+                this.setSlot(EnumItemSlot.OFFHAND, itemstack);
+                return true;
+            } else if (enumitemslot == null) {
+                int j = i - 200;
 
-            if (j >= 0 && j < this.inventory.armor.length) {
-                k = j + 1;
+                if (j >= 0 && j < this.enderChest.getSize()) {
+                    this.enderChest.setItem(j, itemstack);
+                    return true;
+                } else {
+                    return false;
+                }
+            } else {
                 if (itemstack != null && itemstack.getItem() != null) {
-                    if (itemstack.getItem() instanceof ItemArmor) {
-                        if (EntityInsentient.c(itemstack) != k) {
+                    if (!(itemstack.getItem() instanceof ItemArmor) && !(itemstack.getItem() instanceof ItemElytra)) {
+                        if (enumitemslot != EnumItemSlot.HEAD) {
                             return false;
                         }
-                    } else if (k != 4 || itemstack.getItem() != Items.SKULL && !(itemstack.getItem() instanceof ItemBlock)) {
+                    } else if (EntityInsentient.d(itemstack) != enumitemslot) {
                         return false;
                     }
                 }
 
-                this.inventory.setItem(j + this.inventory.items.length, itemstack);
+                this.inventory.setItem(enumitemslot.b() + this.inventory.items.length, itemstack);
                 return true;
-            } else {
-                k = i - 200;
-                if (k >= 0 && k < this.enderChest.getSize()) {
-                    this.enderChest.setItem(k, itemstack);
-                    return true;
-                } else {
-                    return false;
-                }
             }
         }
     }
 
+    public EnumMainHand cr() {
+        return ((Byte) this.datawatcher.get(EntityHuman.bq)).byteValue() == 0 ? EnumMainHand.LEFT : EnumMainHand.RIGHT;
+    }
+
+    public void a(EnumMainHand enummainhand) {
+        this.datawatcher.set(EntityHuman.bq, Byte.valueOf((byte) (enummainhand == EnumMainHand.LEFT ? 0 : 1)));
+    }
+
+    public float cY() {
+        return (float) (1.0D / this.getAttributeInstance(GenericAttributes.f).getValue() * 20.0D);
+    }
+
+    public float o(float f) {
+        return MathHelper.a(((float) this.aD + f) / this.cY(), 0.0F, 1.0F);
+    }
+
+    public void cZ() {
+        this.aD = 0;
+    }
+
+    public ItemCooldown da() {
+        return this.bU;
+    }
+
+    public void collide(Entity entity) {
+        if (!this.isSleeping()) {
+            super.collide(entity);
+        }
+
+    }
+
+    public float db() {
+        return (float) this.getAttributeInstance(GenericAttributes.h).getValue();
+    }
+
     static class SyntheticClass_1 {
 
         static final int[] a = new int[EnumDirection.values().length];
@@ -1628,14 +1781,6 @@
             this.f = s;
         }
 
-        public int a() {
-            return this.e;
-        }
-
-        public static EntityHuman.EnumChatVisibility a(int i) {
-            return EntityHuman.EnumChatVisibility.d[i % EntityHuman.EnumChatVisibility.d.length];
-        }
-
         static {
             EntityHuman.EnumChatVisibility[] aentityhuman_enumchatvisibility = values();
             int i = aentityhuman_enumchatvisibility.length;
