--- a/net/minecraft/server/Entity.java
+++ b/net/minecraft/server/Entity.java
@@ -1,20 +1,31 @@
 package net.minecraft.server;
 
+import com.google.common.collect.Iterables;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.Callable;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public abstract class Entity implements ICommandListener {
 
-    private static final AxisAlignedBB a = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
+    private static final Logger a = LogManager.getLogger();
+    private static final AxisAlignedBB b = new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
+    private static double c = 1.0D;
     private static int entityCount;
     private int id;
-    public double j;
-    public boolean k;
-    public Entity passenger;
-    public Entity vehicle;
+    public boolean i;
+    public final List<Entity> passengers;
+    protected int j;
+    private Entity as;
     public boolean attachedToPlayer;
     public World world;
     public double lastX;
@@ -33,42 +44,45 @@
     private AxisAlignedBB boundingBox;
     public boolean onGround;
     public boolean positionChanged;
-    public boolean E;
-    public boolean F;
+    public boolean B;
+    public boolean C;
     public boolean velocityChanged;
-    protected boolean H;
-    private boolean g;
+    protected boolean E;
+    private boolean au;
     public boolean dead;
     public float width;
     public float length;
-    public float L;
-    public float M;
-    public float N;
+    public float I;
+    public float J;
+    public float K;
     public float fallDistance;
-    private int h;
-    public double P;
-    public double Q;
-    public double R;
-    public float S;
+    private int av;
+    public double M;
+    public double N;
+    public double O;
+    public float P;
     public boolean noclip;
-    public float U;
+    public float R;
     protected Random random;
     public int ticksLived;
     public int maxFireTicks;
     public int fireTicks;
-    protected boolean inWater;
+    public boolean inWater;
     public int noDamageTicks;
     protected boolean justCreated;
     protected boolean fireProof;
     protected DataWatcher datawatcher;
-    private double ar;
-    private double as;
-    public boolean ad;
-    public int ae;
-    public int af;
-    public int ag;
+    private static final DataWatcherObject<Byte> ax = DataWatcher.a(Entity.class, DataWatcherRegistry.a);
+    private static final DataWatcherObject<Integer> ay = DataWatcher.a(Entity.class, DataWatcherRegistry.b);
+    private static final DataWatcherObject<String> az = DataWatcher.a(Entity.class, DataWatcherRegistry.d);
+    private static final DataWatcherObject<Boolean> aA = DataWatcher.a(Entity.class, DataWatcherRegistry.h);
+    private static final DataWatcherObject<Boolean> aB = DataWatcher.a(Entity.class, DataWatcherRegistry.h);
+    public boolean aa;
+    public int ab;
+    public int ac;
+    public int ad;
     public boolean ah;
-    public boolean ai;
+    public boolean impulse;
     public int portalCooldown;
     protected boolean ak;
     protected int al;
@@ -78,48 +92,71 @@
     protected EnumDirection ap;
     private boolean invulnerable;
     protected UUID uniqueID;
-    private final CommandObjectiveExecutor au;
-
-    public int getId() {
-        return this.id;
-    }
-
-    public void d(int i) {
-        this.id = i;
-    }
-
-    public void G() {
-        this.die();
-    }
+    private final CommandObjectiveExecutor aD;
+    private final List<ItemStack> aE;
+    public boolean glowing;
+    private final Set<String> aF;
+    private boolean aG;
 
     public Entity(World world) {
         this.id = Entity.entityCount++;
-        this.j = 1.0D;
-        this.boundingBox = Entity.a;
+        this.passengers = Lists.newArrayList();
+        this.boundingBox = Entity.b;
         this.width = 0.6F;
         this.length = 1.8F;
-        this.h = 1;
+        this.av = 1;
         this.random = new Random();
         this.maxFireTicks = 1;
         this.justCreated = true;
         this.uniqueID = MathHelper.a(this.random);
-        this.au = new CommandObjectiveExecutor();
+        this.aD = new CommandObjectiveExecutor();
+        this.aE = Lists.newArrayList();
+        this.aF = Sets.newHashSet();
         this.world = world;
         this.setPosition(0.0D, 0.0D, 0.0D);
         if (world != null) {
-            this.dimension = world.worldProvider.getDimension();
+            this.dimension = world.worldProvider.getDimensionManager().getDimensionID();
         }
 
         this.datawatcher = new DataWatcher(this);
-        this.datawatcher.a(0, Byte.valueOf((byte) 0));
-        this.datawatcher.a(1, Short.valueOf((short) 300));
-        this.datawatcher.a(3, Byte.valueOf((byte) 0));
-        this.datawatcher.a(2, "");
-        this.datawatcher.a(4, Byte.valueOf((byte) 0));
-        this.h();
+        this.datawatcher.register(Entity.ax, Byte.valueOf((byte) 0));
+        this.datawatcher.register(Entity.ay, Integer.valueOf(300));
+        this.datawatcher.register(Entity.aA, Boolean.valueOf(false));
+        this.datawatcher.register(Entity.az, "");
+        this.datawatcher.register(Entity.aB, Boolean.valueOf(false));
+        this.i();
+    }
+
+    public int getId() {
+        return this.id;
+    }
+
+    public void f(int i) {
+        this.id = i;
+    }
+
+    public Set<String> P() {
+        return this.aF;
+    }
+
+    public boolean a(String s) {
+        if (this.aF.size() >= 1024) {
+            return false;
+        } else {
+            this.aF.add(s);
+            return true;
+        }
     }
 
-    protected abstract void h();
+    public boolean b(String s) {
+        return this.aF.remove(s);
+    }
+
+    public void Q() {
+        this.die();
+    }
+
+    protected abstract void i();
 
     public DataWatcher getDataWatcher() {
         return this.datawatcher;
@@ -137,13 +174,17 @@
         this.dead = true;
     }
 
+    public void b(boolean flag) {}
+
     public void setSize(float f, float f1) {
         if (f != this.width || f1 != this.length) {
             float f2 = this.width;
 
             this.width = f;
             this.length = f1;
-            this.a(new AxisAlignedBB(this.getBoundingBox().a, this.getBoundingBox().b, this.getBoundingBox().c, this.getBoundingBox().a + (double) this.width, this.getBoundingBox().b + (double) this.length, this.getBoundingBox().c + (double) this.width));
+            AxisAlignedBB axisalignedbb = this.getBoundingBox();
+
+            this.a(new AxisAlignedBB(axisalignedbb.a, axisalignedbb.b, axisalignedbb.c, axisalignedbb.a + (double) this.width, axisalignedbb.b + (double) this.length, axisalignedbb.c + (double) this.width));
             if (this.width > f2 && !this.justCreated && !this.world.isClientSide) {
                 this.move((double) (f2 - this.width), 0.0D, (double) (f2 - this.width));
             }
@@ -166,17 +207,25 @@
         this.a(new AxisAlignedBB(d0 - (double) f, d1, d2 - (double) f, d0 + (double) f, d1 + (double) f1, d2 + (double) f));
     }
 
-    public void t_() {
-        this.K();
+    public void m() {
+        if (!this.world.isClientSide) {
+            this.setFlag(6, this.aM());
+        }
+
+        this.U();
     }
 
-    public void K() {
+    public void U() {
         this.world.methodProfiler.a("entityBaseTick");
-        if (this.vehicle != null && this.vehicle.dead) {
-            this.vehicle = null;
+        if (this.isPassenger() && this.by().dead) {
+            this.stopRiding();
+        }
+
+        if (this.j > 0) {
+            --this.j;
         }
 
-        this.L = this.M;
+        this.I = this.J;
         this.lastX = this.locX;
         this.lastY = this.locY;
         this.lastZ = this.locZ;
@@ -184,23 +233,26 @@
         this.lastYaw = this.yaw;
         if (!this.world.isClientSide && this.world instanceof WorldServer) {
             this.world.methodProfiler.a("portal");
-            MinecraftServer minecraftserver = ((WorldServer) this.world).getMinecraftServer();
-            int i = this.L();
-
             if (this.ak) {
+                MinecraftServer minecraftserver = this.world.getMinecraftServer();
+
                 if (minecraftserver.getAllowNether()) {
-                    if (this.vehicle == null && this.al++ >= i) {
-                        this.al = i;
-                        this.portalCooldown = this.aq();
-                        byte b0;
-
-                        if (this.world.worldProvider.getDimension() == -1) {
-                            b0 = 0;
-                        } else {
-                            b0 = -1;
-                        }
+                    if (!this.isPassenger()) {
+                        int i = this.V();
+
+                        if (this.al++ >= i) {
+                            this.al = i;
+                            this.portalCooldown = this.aC();
+                            byte b0;
+
+                            if (this.world.worldProvider.getDimensionManager().getDimensionID() == -1) {
+                                b0 = 0;
+                            } else {
+                                b0 = -1;
+                            }
 
-                        this.c(b0);
+                            this.c(b0);
+                        }
                     }
 
                     this.ak = false;
@@ -215,15 +267,12 @@
                 }
             }
 
-            if (this.portalCooldown > 0) {
-                --this.portalCooldown;
-            }
-
+            this.H();
             this.world.methodProfiler.b();
         }
 
-        this.Y();
-        this.W();
+        this.al();
+        this.aj();
         if (this.world.isClientSide) {
             this.fireTicks = 0;
         } else if (this.fireTicks > 0) {
@@ -241,25 +290,32 @@
             }
         }
 
-        if (this.ab()) {
+        if (this.an()) {
             this.burnFromLava();
             this.fallDistance *= 0.5F;
         }
 
         if (this.locY < -64.0D) {
-            this.O();
+            this.Y();
         }
 
         if (!this.world.isClientSide) {
-            this.b(0, this.fireTicks > 0);
+            this.setFlag(0, this.fireTicks > 0);
         }
 
         this.justCreated = false;
         this.world.methodProfiler.b();
     }
 
-    public int L() {
-        return 0;
+    protected void H() {
+        if (this.portalCooldown > 0) {
+            --this.portalCooldown;
+        }
+
+    }
+
+    public int V() {
+        return 1;
     }
 
     protected void burnFromLava() {
@@ -272,7 +328,10 @@
     public void setOnFire(int i) {
         int j = i * 20;
 
-        j = EnchantmentProtection.a(this, j);
+        if (this instanceof EntityLiving) {
+            j = EnchantmentProtection.a((EntityLiving) this, j);
+        }
+
         if (this.fireTicks < j) {
             this.fireTicks = j;
         }
@@ -283,7 +342,7 @@
         this.fireTicks = 0;
     }
 
-    protected void O() {
+    protected void Y() {
         this.die();
     }
 
@@ -307,8 +366,8 @@
             double d4 = this.locY;
             double d5 = this.locZ;
 
-            if (this.H) {
-                this.H = false;
+            if (this.E) {
+                this.E = false;
                 d0 *= 0.25D;
                 d1 *= 0.05000000074505806D;
                 d2 *= 0.25D;
@@ -367,123 +426,123 @@
 
             List list = this.world.getCubes(this, this.getBoundingBox().a(d0, d1, d2));
             AxisAlignedBB axisalignedbb = this.getBoundingBox();
+            int i = 0;
 
-            AxisAlignedBB axisalignedbb1;
+            int j;
 
-            for (Iterator iterator = list.iterator(); iterator.hasNext(); d1 = axisalignedbb1.b(this.getBoundingBox(), d1)) {
-                axisalignedbb1 = (AxisAlignedBB) iterator.next();
+            for (j = list.size(); i < j; ++i) {
+                d1 = ((AxisAlignedBB) list.get(i)).b(this.getBoundingBox(), d1);
             }
 
             this.a(this.getBoundingBox().c(0.0D, d1, 0.0D));
             boolean flag1 = this.onGround || d7 != d1 && d7 < 0.0D;
 
-            AxisAlignedBB axisalignedbb2;
-            Iterator iterator1;
+            j = 0;
+
+            int k;
 
-            for (iterator1 = list.iterator(); iterator1.hasNext(); d0 = axisalignedbb2.a(this.getBoundingBox(), d0)) {
-                axisalignedbb2 = (AxisAlignedBB) iterator1.next();
+            for (k = list.size(); j < k; ++j) {
+                d0 = ((AxisAlignedBB) list.get(j)).a(this.getBoundingBox(), d0);
             }
 
             this.a(this.getBoundingBox().c(d0, 0.0D, 0.0D));
+            j = 0;
 
-            for (iterator1 = list.iterator(); iterator1.hasNext(); d2 = axisalignedbb2.c(this.getBoundingBox(), d2)) {
-                axisalignedbb2 = (AxisAlignedBB) iterator1.next();
+            for (k = list.size(); j < k; ++j) {
+                d2 = ((AxisAlignedBB) list.get(j)).c(this.getBoundingBox(), d2);
             }
 
             this.a(this.getBoundingBox().c(0.0D, 0.0D, d2));
-            if (this.S > 0.0F && flag1 && (d6 != d0 || d8 != d2)) {
-                double d10 = d0;
-                double d11 = d1;
-                double d12 = d2;
-                AxisAlignedBB axisalignedbb3 = this.getBoundingBox();
+            double d10;
+
+            if (this.P > 0.0F && flag1 && (d6 != d0 || d8 != d2)) {
+                double d11 = d0;
+                double d12 = d1;
+                double d13 = d2;
+                AxisAlignedBB axisalignedbb1 = this.getBoundingBox();
 
                 this.a(axisalignedbb);
-                d1 = (double) this.S;
+                d1 = (double) this.P;
                 List list1 = this.world.getCubes(this, this.getBoundingBox().a(d6, d1, d8));
-                AxisAlignedBB axisalignedbb4 = this.getBoundingBox();
-                AxisAlignedBB axisalignedbb5 = axisalignedbb4.a(d6, 0.0D, d8);
-                double d13 = d1;
+                AxisAlignedBB axisalignedbb2 = this.getBoundingBox();
+                AxisAlignedBB axisalignedbb3 = axisalignedbb2.a(d6, 0.0D, d8);
 
-                AxisAlignedBB axisalignedbb6;
+                d10 = d1;
+                int l = 0;
 
-                for (Iterator iterator2 = list1.iterator(); iterator2.hasNext(); d13 = axisalignedbb6.b(axisalignedbb5, d13)) {
-                    axisalignedbb6 = (AxisAlignedBB) iterator2.next();
+                for (int i1 = list1.size(); l < i1; ++l) {
+                    d10 = ((AxisAlignedBB) list1.get(l)).b(axisalignedbb3, d10);
                 }
 
-                axisalignedbb4 = axisalignedbb4.c(0.0D, d13, 0.0D);
+                axisalignedbb2 = axisalignedbb2.c(0.0D, d10, 0.0D);
                 double d14 = d6;
+                int j1 = 0;
 
-                AxisAlignedBB axisalignedbb7;
-
-                for (Iterator iterator3 = list1.iterator(); iterator3.hasNext(); d14 = axisalignedbb7.a(axisalignedbb4, d14)) {
-                    axisalignedbb7 = (AxisAlignedBB) iterator3.next();
+                for (int k1 = list1.size(); j1 < k1; ++j1) {
+                    d14 = ((AxisAlignedBB) list1.get(j1)).a(axisalignedbb2, d14);
                 }
 
-                axisalignedbb4 = axisalignedbb4.c(d14, 0.0D, 0.0D);
+                axisalignedbb2 = axisalignedbb2.c(d14, 0.0D, 0.0D);
                 double d15 = d8;
+                int l1 = 0;
 
-                AxisAlignedBB axisalignedbb8;
-
-                for (Iterator iterator4 = list1.iterator(); iterator4.hasNext(); d15 = axisalignedbb8.c(axisalignedbb4, d15)) {
-                    axisalignedbb8 = (AxisAlignedBB) iterator4.next();
+                for (int i2 = list1.size(); l1 < i2; ++l1) {
+                    d15 = ((AxisAlignedBB) list1.get(l1)).c(axisalignedbb2, d15);
                 }
 
-                axisalignedbb4 = axisalignedbb4.c(0.0D, 0.0D, d15);
-                AxisAlignedBB axisalignedbb9 = this.getBoundingBox();
+                axisalignedbb2 = axisalignedbb2.c(0.0D, 0.0D, d15);
+                AxisAlignedBB axisalignedbb4 = this.getBoundingBox();
                 double d16 = d1;
+                int j2 = 0;
 
-                AxisAlignedBB axisalignedbb10;
-
-                for (Iterator iterator5 = list1.iterator(); iterator5.hasNext(); d16 = axisalignedbb10.b(axisalignedbb9, d16)) {
-                    axisalignedbb10 = (AxisAlignedBB) iterator5.next();
+                for (int k2 = list1.size(); j2 < k2; ++j2) {
+                    d16 = ((AxisAlignedBB) list1.get(j2)).b(axisalignedbb4, d16);
                 }
 
-                axisalignedbb9 = axisalignedbb9.c(0.0D, d16, 0.0D);
+                axisalignedbb4 = axisalignedbb4.c(0.0D, d16, 0.0D);
                 double d17 = d6;
+                int l2 = 0;
 
-                AxisAlignedBB axisalignedbb11;
-
-                for (Iterator iterator6 = list1.iterator(); iterator6.hasNext(); d17 = axisalignedbb11.a(axisalignedbb9, d17)) {
-                    axisalignedbb11 = (AxisAlignedBB) iterator6.next();
+                for (int i3 = list1.size(); l2 < i3; ++l2) {
+                    d17 = ((AxisAlignedBB) list1.get(l2)).a(axisalignedbb4, d17);
                 }
 
-                axisalignedbb9 = axisalignedbb9.c(d17, 0.0D, 0.0D);
+                axisalignedbb4 = axisalignedbb4.c(d17, 0.0D, 0.0D);
                 double d18 = d8;
+                int j3 = 0;
 
-                AxisAlignedBB axisalignedbb12;
-
-                for (Iterator iterator7 = list1.iterator(); iterator7.hasNext(); d18 = axisalignedbb12.c(axisalignedbb9, d18)) {
-                    axisalignedbb12 = (AxisAlignedBB) iterator7.next();
+                for (int k3 = list1.size(); j3 < k3; ++j3) {
+                    d18 = ((AxisAlignedBB) list1.get(j3)).c(axisalignedbb4, d18);
                 }
 
-                axisalignedbb9 = axisalignedbb9.c(0.0D, 0.0D, d18);
+                axisalignedbb4 = axisalignedbb4.c(0.0D, 0.0D, d18);
                 double d19 = d14 * d14 + d15 * d15;
                 double d20 = d17 * d17 + d18 * d18;
 
                 if (d19 > d20) {
                     d0 = d14;
                     d2 = d15;
-                    d1 = -d13;
-                    this.a(axisalignedbb4);
+                    d1 = -d10;
+                    this.a(axisalignedbb2);
                 } else {
                     d0 = d17;
                     d2 = d18;
                     d1 = -d16;
-                    this.a(axisalignedbb9);
+                    this.a(axisalignedbb4);
                 }
 
-                AxisAlignedBB axisalignedbb13;
+                int l3 = 0;
 
-                for (Iterator iterator8 = list1.iterator(); iterator8.hasNext(); d1 = axisalignedbb13.b(this.getBoundingBox(), d1)) {
-                    axisalignedbb13 = (AxisAlignedBB) iterator8.next();
+                for (int i4 = list1.size(); l3 < i4; ++l3) {
+                    d1 = ((AxisAlignedBB) list1.get(l3)).b(this.getBoundingBox(), d1);
                 }
 
                 this.a(this.getBoundingBox().c(0.0D, d1, 0.0D));
-                if (d10 * d10 + d12 * d12 >= d0 * d0 + d2 * d2) {
-                    d0 = d10;
-                    d1 = d11;
-                    d2 = d12;
-                    this.a(axisalignedbb3);
+                if (d11 * d11 + d13 * d13 >= d0 * d0 + d2 * d2) {
+                    d0 = d11;
+                    d1 = d12;
+                    d2 = d13;
+                    this.a(axisalignedbb1);
                 }
             }
 
@@ -491,25 +550,27 @@
             this.world.methodProfiler.a("rest");
             this.recalcPosition();
             this.positionChanged = d6 != d0 || d8 != d2;
-            this.E = d7 != d1;
-            this.onGround = this.E && d7 < 0.0D;
-            this.F = this.positionChanged || this.E;
-            int i = MathHelper.floor(this.locX);
-            int j = MathHelper.floor(this.locY - 0.20000000298023224D);
-            int k = MathHelper.floor(this.locZ);
-            BlockPosition blockposition = new BlockPosition(i, j, k);
-            Block block = this.world.getType(blockposition).getBlock();
-
-            if (block.getMaterial() == Material.AIR) {
-                Block block1 = this.world.getType(blockposition.down()).getBlock();
-
-                if (block1 instanceof BlockFence || block1 instanceof BlockCobbleWall || block1 instanceof BlockFenceGate) {
-                    block = block1;
-                    blockposition = blockposition.down();
+            this.B = d7 != d1;
+            this.onGround = this.B && d7 < 0.0D;
+            this.C = this.positionChanged || this.B;
+            j = MathHelper.floor(this.locX);
+            k = MathHelper.floor(this.locY - 0.20000000298023224D);
+            int j4 = MathHelper.floor(this.locZ);
+            BlockPosition blockposition = new BlockPosition(j, k, j4);
+            IBlockData iblockdata = this.world.getType(blockposition);
+
+            if (iblockdata.getMaterial() == Material.AIR) {
+                BlockPosition blockposition1 = blockposition.down();
+                IBlockData iblockdata1 = this.world.getType(blockposition1);
+                Block block = iblockdata1.getBlock();
+
+                if (block instanceof BlockFence || block instanceof BlockCobbleWall || block instanceof BlockFenceGate) {
+                    iblockdata = iblockdata1;
+                    blockposition = blockposition1;
                 }
             }
 
-            this.a(d1, this.onGround, block, blockposition);
+            this.a(d1, this.onGround, iblockdata, blockposition);
             if (d6 != d0) {
                 this.motX = 0.0D;
             }
@@ -518,38 +579,40 @@
                 this.motZ = 0.0D;
             }
 
+            Block block1 = iblockdata.getBlock();
+
             if (d7 != d1) {
-                block.a(this.world, this);
+                block1.a(this.world, this);
             }
 
-            if (this.s_() && !flag && this.vehicle == null) {
+            if (this.playStepSound() && !flag && !this.isPassenger()) {
                 double d21 = this.locX - d3;
                 double d22 = this.locY - d4;
-                double d23 = this.locZ - d5;
 
-                if (block != Blocks.LADDER) {
+                d10 = this.locZ - d5;
+                if (block1 != Blocks.LADDER) {
                     d22 = 0.0D;
                 }
 
-                if (block != null && this.onGround) {
-                    block.a(this.world, blockposition, this);
+                if (block1 != null && this.onGround) {
+                    block1.stepOn(this.world, blockposition, this);
                 }
 
-                this.M = (float) ((double) this.M + (double) MathHelper.sqrt(d21 * d21 + d23 * d23) * 0.6D);
-                this.N = (float) ((double) this.N + (double) MathHelper.sqrt(d21 * d21 + d22 * d22 + d23 * d23) * 0.6D);
-                if (this.N > (float) this.h && block.getMaterial() != Material.AIR) {
-                    this.h = (int) this.N + 1;
-                    if (this.V()) {
+                this.J = (float) ((double) this.J + (double) MathHelper.sqrt(d21 * d21 + d10 * d10) * 0.6D);
+                this.K = (float) ((double) this.K + (double) MathHelper.sqrt(d21 * d21 + d22 * d22 + d10 * d10) * 0.6D);
+                if (this.K > (float) this.av && iblockdata.getMaterial() != Material.AIR) {
+                    this.av = (int) this.K + 1;
+                    if (this.isInWater()) {
                         float f = MathHelper.sqrt(this.motX * this.motX * 0.20000000298023224D + this.motY * this.motY + this.motZ * this.motZ * 0.20000000298023224D) * 0.35F;
 
                         if (f > 1.0F) {
                             f = 1.0F;
                         }
 
-                        this.makeSound(this.P(), f, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
+                        this.a(this.aa(), f, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
                     }
 
-                    this.a(blockposition, block);
+                    this.a(blockposition, block1);
                 }
             }
 
@@ -563,9 +626,9 @@
                 throw new ReportedException(crashreport);
             }
 
-            boolean flag2 = this.U();
+            boolean flag2 = this.ah();
 
-            if (this.world.e(this.getBoundingBox().shrink(0.001D, 0.001D, 0.001D))) {
+            if (this.world.f(this.getBoundingBox().shrink(0.001D))) {
                 this.burn(1);
                 if (!flag2) {
                     ++this.fireTicks;
@@ -578,7 +641,7 @@
             }
 
             if (flag2 && this.fireTicks > 0) {
-                this.makeSound("random.fizz", 0.7F, 1.6F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
+                this.a(SoundEffects.bE, 0.7F, 1.6F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
                 this.fireTicks = -this.maxFireTicks;
             }
 
@@ -586,34 +649,42 @@
         }
     }
 
-    private void recalcPosition() {
-        this.locX = (this.getBoundingBox().a + this.getBoundingBox().d) / 2.0D;
-        this.locY = this.getBoundingBox().b;
-        this.locZ = (this.getBoundingBox().c + this.getBoundingBox().f) / 2.0D;
+    public void recalcPosition() {
+        AxisAlignedBB axisalignedbb = this.getBoundingBox();
+
+        this.locX = (axisalignedbb.a + axisalignedbb.d) / 2.0D;
+        this.locY = axisalignedbb.b;
+        this.locZ = (axisalignedbb.c + axisalignedbb.f) / 2.0D;
     }
 
-    protected String P() {
-        return "game.neutral.swim";
+    protected SoundEffect aa() {
+        return SoundEffects.bI;
     }
 
-    protected void checkBlockCollisions() {
-        BlockPosition blockposition = new BlockPosition(this.getBoundingBox().a + 0.001D, this.getBoundingBox().b + 0.001D, this.getBoundingBox().c + 0.001D);
-        BlockPosition blockposition1 = new BlockPosition(this.getBoundingBox().d - 0.001D, this.getBoundingBox().e - 0.001D, this.getBoundingBox().f - 0.001D);
+    protected SoundEffect ab() {
+        return SoundEffects.bH;
+    }
 
-        if (this.world.areChunksLoadedBetween(blockposition, blockposition1)) {
-            for (int i = blockposition.getX(); i <= blockposition1.getX(); ++i) {
-                for (int j = blockposition.getY(); j <= blockposition1.getY(); ++j) {
-                    for (int k = blockposition.getZ(); k <= blockposition1.getZ(); ++k) {
-                        BlockPosition blockposition2 = new BlockPosition(i, j, k);
-                        IBlockData iblockdata = this.world.getType(blockposition2);
+    protected void checkBlockCollisions() {
+        AxisAlignedBB axisalignedbb = this.getBoundingBox();
+        BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.c(axisalignedbb.a + 0.001D, axisalignedbb.b + 0.001D, axisalignedbb.c + 0.001D);
+        BlockPosition.PooledBlockPosition blockposition_pooledblockposition1 = BlockPosition.PooledBlockPosition.c(axisalignedbb.d - 0.001D, axisalignedbb.e - 0.001D, axisalignedbb.f - 0.001D);
+        BlockPosition.PooledBlockPosition blockposition_pooledblockposition2 = BlockPosition.PooledBlockPosition.s();
+
+        if (this.world.areChunksLoadedBetween(blockposition_pooledblockposition, blockposition_pooledblockposition1)) {
+            for (int i = blockposition_pooledblockposition.getX(); i <= blockposition_pooledblockposition1.getX(); ++i) {
+                for (int j = blockposition_pooledblockposition.getY(); j <= blockposition_pooledblockposition1.getY(); ++j) {
+                    for (int k = blockposition_pooledblockposition.getZ(); k <= blockposition_pooledblockposition1.getZ(); ++k) {
+                        blockposition_pooledblockposition2.d(i, j, k);
+                        IBlockData iblockdata = this.world.getType(blockposition_pooledblockposition2);
 
                         try {
-                            iblockdata.getBlock().a(this.world, blockposition2, iblockdata, this);
+                            iblockdata.getBlock().a(this.world, (BlockPosition) blockposition_pooledblockposition2, iblockdata, this);
                         } catch (Throwable throwable) {
                             CrashReport crashreport = CrashReport.a(throwable, "Colliding entity with block");
                             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Block being collided with");
 
-                            CrashReportSystemDetails.a(crashreportsystemdetails, blockposition2, iblockdata);
+                            CrashReportSystemDetails.a(crashreportsystemdetails, blockposition_pooledblockposition2, iblockdata);
                             throw new ReportedException(crashreport);
                         }
                     }
@@ -621,57 +692,56 @@
             }
         }
 
+        blockposition_pooledblockposition.t();
+        blockposition_pooledblockposition1.t();
+        blockposition_pooledblockposition2.t();
     }
 
     protected void a(BlockPosition blockposition, Block block) {
-        Block.StepSound block_stepsound = block.stepSound;
+        SoundEffectType soundeffecttype = block.w();
 
         if (this.world.getType(blockposition.up()).getBlock() == Blocks.SNOW_LAYER) {
-            block_stepsound = Blocks.SNOW_LAYER.stepSound;
-            this.makeSound(block_stepsound.getStepSound(), block_stepsound.getVolume1() * 0.15F, block_stepsound.getVolume2());
-        } else if (!block.getMaterial().isLiquid()) {
-            this.makeSound(block_stepsound.getStepSound(), block_stepsound.getVolume1() * 0.15F, block_stepsound.getVolume2());
+            soundeffecttype = Blocks.SNOW_LAYER.w();
+            this.a(soundeffecttype.d(), soundeffecttype.a() * 0.15F, soundeffecttype.b());
+        } else if (!block.getBlockData().getMaterial().isLiquid()) {
+            this.a(soundeffecttype.d(), soundeffecttype.a() * 0.15F, soundeffecttype.b());
         }
 
     }
 
-    public void makeSound(String s, float f, float f1) {
-        if (!this.R()) {
-            this.world.makeSound(this, s, f, f1);
+    public void a(SoundEffect soundeffect, float f, float f1) {
+        if (!this.ad()) {
+            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, soundeffect, this.bz(), f, f1);
         }
 
     }
 
-    public boolean R() {
-        return this.datawatcher.getByte(4) == 1;
+    public boolean ad() {
+        return ((Boolean) this.datawatcher.get(Entity.aB)).booleanValue();
     }
 
-    public void b(boolean flag) {
-        this.datawatcher.watch(4, Byte.valueOf((byte) (flag ? 1 : 0)));
+    public void c(boolean flag) {
+        this.datawatcher.set(Entity.aB, Boolean.valueOf(flag));
     }
 
-    protected boolean s_() {
+    protected boolean playStepSound() {
         return true;
     }
 
-    protected void a(double d0, boolean flag, Block block, BlockPosition blockposition) {
+    protected void a(double d0, boolean flag, IBlockData iblockdata, BlockPosition blockposition) {
         if (flag) {
             if (this.fallDistance > 0.0F) {
-                if (block != null) {
-                    block.fallOn(this.world, blockposition, this, this.fallDistance);
-                } else {
-                    this.e(this.fallDistance, 1.0F);
-                }
-
-                this.fallDistance = 0.0F;
+                iblockdata.getBlock().fallOn(this.world, blockposition, this, this.fallDistance);
             }
+
+            this.fallDistance = 0.0F;
         } else if (d0 < 0.0D) {
             this.fallDistance = (float) ((double) this.fallDistance - d0);
         }
 
     }
 
-    public AxisAlignedBB S() {
+    public AxisAlignedBB af() {
         return null;
     }
 
@@ -687,24 +757,44 @@
     }
 
     public void e(float f, float f1) {
-        if (this.passenger != null) {
-            this.passenger.e(f, f1);
+        if (this.isVehicle()) {
+            Iterator iterator = this.bu().iterator();
+
+            while (iterator.hasNext()) {
+                Entity entity = (Entity) iterator.next();
+
+                entity.e(f, f1);
+            }
         }
 
     }
 
-    public boolean U() {
-        return this.inWater || this.world.isRainingAt(new BlockPosition(this.locX, this.locY, this.locZ)) || this.world.isRainingAt(new BlockPosition(this.locX, this.locY + (double) this.length, this.locZ));
+    public boolean ah() {
+        if (this.inWater) {
+            return true;
+        } else {
+            BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.c(this.locX, this.locY, this.locZ);
+
+            if (!this.world.isRainingAt(blockposition_pooledblockposition) && !this.world.isRainingAt(blockposition_pooledblockposition.d(this.locX, this.locY + (double) this.length, this.locZ))) {
+                blockposition_pooledblockposition.t();
+                return false;
+            } else {
+                blockposition_pooledblockposition.t();
+                return true;
+            }
+        }
     }
 
-    public boolean V() {
+    public boolean isInWater() {
         return this.inWater;
     }
 
-    public boolean W() {
-        if (this.world.a(this.getBoundingBox().grow(0.0D, -0.4000000059604645D, 0.0D).shrink(0.001D, 0.001D, 0.001D), Material.WATER, this)) {
+    public boolean aj() {
+        if (this.by() instanceof EntityBoat) {
+            this.inWater = false;
+        } else if (this.world.a(this.getBoundingBox().grow(0.0D, -0.4000000059604645D, 0.0D).shrink(0.001D), Material.WATER, this)) {
             if (!this.inWater && !this.justCreated) {
-                this.X();
+                this.ak();
             }
 
             this.fallDistance = 0.0F;
@@ -717,14 +807,14 @@
         return this.inWater;
     }
 
-    protected void X() {
+    protected void ak() {
         float f = MathHelper.sqrt(this.motX * this.motX * 0.20000000298023224D + this.motY * this.motY + this.motZ * this.motZ * 0.20000000298023224D) * 0.2F;
 
         if (f > 1.0F) {
             f = 1.0F;
         }
 
-        this.makeSound(this.aa(), f, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
+        this.a(this.ab(), f, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
         float f1 = (float) MathHelper.floor(this.getBoundingBox().b);
 
         int i;
@@ -745,49 +835,47 @@
 
     }
 
-    public void Y() {
-        if (this.isSprinting() && !this.V()) {
-            this.Z();
+    public void al() {
+        if (this.isSprinting() && !this.isInWater()) {
+            this.am();
         }
 
     }
 
-    protected void Z() {
+    protected void am() {
         int i = MathHelper.floor(this.locX);
         int j = MathHelper.floor(this.locY - 0.20000000298023224D);
         int k = MathHelper.floor(this.locZ);
         BlockPosition blockposition = new BlockPosition(i, j, k);
         IBlockData iblockdata = this.world.getType(blockposition);
-        Block block = iblockdata.getBlock();
 
-        if (block.b() != -1) {
+        if (iblockdata.i() != EnumRenderType.INVISIBLE) {
             this.world.addParticle(EnumParticle.BLOCK_CRACK, this.locX + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, this.getBoundingBox().b + 0.1D, this.locZ + ((double) this.random.nextFloat() - 0.5D) * (double) this.width, -this.motX * 4.0D, 1.5D, -this.motZ * 4.0D, new int[] { Block.getCombinedId(iblockdata)});
         }
 
     }
 
-    protected String aa() {
-        return "game.neutral.swim.splash";
-    }
-
     public boolean a(Material material) {
-        double d0 = this.locY + (double) this.getHeadHeight();
-        BlockPosition blockposition = new BlockPosition(this.locX, d0, this.locZ);
-        IBlockData iblockdata = this.world.getType(blockposition);
-        Block block = iblockdata.getBlock();
-
-        if (block.getMaterial() == material) {
-            float f = BlockFluids.b(iblockdata.getBlock().toLegacyData(iblockdata)) - 0.11111111F;
-            float f1 = (float) (blockposition.getY() + 1) - f;
-            boolean flag = d0 < (double) f1;
-
-            return !flag && this instanceof EntityHuman ? false : flag;
-        } else {
+        if (this.by() instanceof EntityBoat) {
             return false;
+        } else {
+            double d0 = this.locY + (double) this.getHeadHeight();
+            BlockPosition blockposition = new BlockPosition(this.locX, d0, this.locZ);
+            IBlockData iblockdata = this.world.getType(blockposition);
+
+            if (iblockdata.getMaterial() == material) {
+                float f = BlockFluids.e(iblockdata.getBlock().toLegacyData(iblockdata)) - 0.11111111F;
+                float f1 = (float) (blockposition.getY() + 1) - f;
+                boolean flag = d0 < (double) f1;
+
+                return !flag && this instanceof EntityHuman ? false : flag;
+            } else {
+                return false;
+            }
         }
     }
 
-    public boolean ab() {
+    public boolean an() {
         return this.world.a(this.getBoundingBox().grow(-0.10000000149011612D, -0.4000000059604645D, -0.10000000149011612D), Material.LAVA);
     }
 
@@ -803,18 +891,23 @@
             f3 = f2 / f3;
             f *= f3;
             f1 *= f3;
-            float f4 = MathHelper.sin(this.yaw * 3.1415927F / 180.0F);
-            float f5 = MathHelper.cos(this.yaw * 3.1415927F / 180.0F);
+            float f4 = MathHelper.sin(this.yaw * 0.017453292F);
+            float f5 = MathHelper.cos(this.yaw * 0.017453292F);
 
             this.motX += (double) (f * f5 - f1 * f4);
             this.motZ += (double) (f1 * f5 + f * f4);
         }
     }
 
-    public float c(float f) {
-        BlockPosition blockposition = new BlockPosition(this.locX, this.locY + (double) this.getHeadHeight(), this.locZ);
+    public float e(float f) {
+        BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition(MathHelper.floor(this.locX), 0, MathHelper.floor(this.locZ));
 
-        return this.world.isLoaded(blockposition) ? this.world.o(blockposition) : 0.0F;
+        if (this.world.isLoaded(blockposition_mutableblockposition)) {
+            blockposition_mutableblockposition.p(MathHelper.floor(this.locY + (double) this.getHeadHeight()));
+            return this.world.n(blockposition_mutableblockposition);
+        } else {
+            return 0.0F;
+        }
     }
 
     public void spawnIn(World world) {
@@ -822,9 +915,10 @@
     }
 
     public void setLocation(double d0, double d1, double d2, float f, float f1) {
-        this.lastX = this.locX = d0;
+        this.lastX = this.locX = MathHelper.a(d0, -3.0E7D, 3.0E7D);
         this.lastY = this.locY = d1;
-        this.lastZ = this.locZ = d2;
+        this.lastZ = this.locZ = MathHelper.a(d2, -3.0E7D, 3.0E7D);
+        f1 = MathHelper.a(f1, -90.0F, 90.0F);
         this.lastYaw = this.yaw = f;
         this.lastPitch = this.pitch = f1;
         double d3 = (double) (this.lastYaw - f);
@@ -846,9 +940,9 @@
     }
 
     public void setPositionRotation(double d0, double d1, double d2, float f, float f1) {
-        this.P = this.lastX = this.locX = d0;
-        this.Q = this.lastY = this.locY = d1;
-        this.R = this.lastZ = this.locZ = d2;
+        this.M = this.lastX = this.locX = d0;
+        this.N = this.lastY = this.locY = d1;
+        this.O = this.lastZ = this.locZ = d2;
         this.yaw = f;
         this.pitch = f1;
         this.setPosition(this.locX, this.locY, this.locZ);
@@ -870,12 +964,12 @@
         return d3 * d3 + d4 * d4 + d5 * d5;
     }
 
-    public double b(BlockPosition blockposition) {
-        return blockposition.c(this.locX, this.locY, this.locZ);
+    public double c(BlockPosition blockposition) {
+        return blockposition.distanceSquared(this.locX, this.locY, this.locZ);
     }
 
-    public double c(BlockPosition blockposition) {
-        return blockposition.d(this.locX, this.locY, this.locZ);
+    public double d(BlockPosition blockposition) {
+        return blockposition.f(this.locX, this.locY, this.locZ);
     }
 
     public double f(double d0, double d1, double d2) {
@@ -897,7 +991,7 @@
     public void d(EntityHuman entityhuman) {}
 
     public void collide(Entity entity) {
-        if (entity.passenger != this && entity.vehicle != this) {
+        if (!this.x(entity)) {
             if (!entity.noclip && !this.noclip) {
                 double d0 = entity.locX - this.locX;
                 double d1 = entity.locZ - this.locZ;
@@ -917,13 +1011,13 @@
                     d1 *= d3;
                     d0 *= 0.05000000074505806D;
                     d1 *= 0.05000000074505806D;
-                    d0 *= (double) (1.0F - this.U);
-                    d1 *= (double) (1.0F - this.U);
-                    if (this.passenger == null) {
+                    d0 *= (double) (1.0F - this.R);
+                    d1 *= (double) (1.0F - this.R);
+                    if (!this.isVehicle()) {
                         this.g(-d0, 0.0D, -d1);
                     }
 
-                    if (entity.passenger == null) {
+                    if (!entity.isVehicle()) {
                         entity.g(d0, 0.0D, d1);
                     }
                 }
@@ -936,10 +1030,10 @@
         this.motX += d0;
         this.motY += d1;
         this.motZ += d2;
-        this.ai = true;
+        this.impulse = true;
     }
 
-    protected void ac() {
+    protected void ao() {
         this.velocityChanged = true;
     }
 
@@ -947,12 +1041,12 @@
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else {
-            this.ac();
+            this.ao();
             return false;
         }
     }
 
-    public Vec3D d(float f) {
+    public Vec3D f(float f) {
         if (f == 1.0F) {
             return this.f(this.pitch, this.yaw);
         } else {
@@ -972,18 +1066,18 @@
         return new Vec3D((double) (f3 * f4), (double) f5, (double) (f2 * f4));
     }
 
-    public boolean ad() {
+    public boolean isInteractable() {
         return false;
     }
 
-    public boolean ae() {
+    public boolean isCollidable() {
         return false;
     }
 
     public void b(Entity entity, int i) {}
 
     public boolean c(NBTTagCompound nbttagcompound) {
-        String s = this.ag();
+        String s = this.as();
 
         if (!this.dead && s != null) {
             nbttagcompound.setString("id", s);
@@ -995,9 +1089,9 @@
     }
 
     public boolean d(NBTTagCompound nbttagcompound) {
-        String s = this.ag();
+        String s = this.as();
 
-        if (!this.dead && s != null && this.passenger == null) {
+        if (!this.dead && s != null && !this.isPassenger()) {
             nbttagcompound.setString("id", s);
             this.e(nbttagcompound);
             return true;
@@ -1018,24 +1112,56 @@
             nbttagcompound.setInt("Dimension", this.dimension);
             nbttagcompound.setBoolean("Invulnerable", this.invulnerable);
             nbttagcompound.setInt("PortalCooldown", this.portalCooldown);
-            nbttagcompound.setLong("UUIDMost", this.getUniqueID().getMostSignificantBits());
-            nbttagcompound.setLong("UUIDLeast", this.getUniqueID().getLeastSignificantBits());
-            if (this.getCustomName() != null && this.getCustomName().length() > 0) {
+            nbttagcompound.a("UUID", this.getUniqueID());
+            if (this.getCustomName() != null && !this.getCustomName().isEmpty()) {
                 nbttagcompound.setString("CustomName", this.getCustomName());
+            }
+
+            if (this.getCustomNameVisible()) {
                 nbttagcompound.setBoolean("CustomNameVisible", this.getCustomNameVisible());
             }
 
-            this.au.b(nbttagcompound);
-            if (this.R()) {
-                nbttagcompound.setBoolean("Silent", this.R());
+            this.aD.b(nbttagcompound);
+            if (this.ad()) {
+                nbttagcompound.setBoolean("Silent", this.ad());
+            }
+
+            if (this.glowing) {
+                nbttagcompound.setBoolean("Glowing", this.glowing);
+            }
+
+            NBTTagList nbttaglist;
+            Iterator iterator;
+
+            if (this.aF.size() > 0) {
+                nbttaglist = new NBTTagList();
+                iterator = this.aF.iterator();
+
+                while (iterator.hasNext()) {
+                    String s = (String) iterator.next();
+
+                    nbttaglist.add(new NBTTagString(s));
+                }
+
+                nbttagcompound.set("Tags", nbttaglist);
             }
 
             this.b(nbttagcompound);
-            if (this.vehicle != null) {
-                NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+            if (this.isVehicle()) {
+                nbttaglist = new NBTTagList();
+                iterator = this.bu().iterator();
+
+                while (iterator.hasNext()) {
+                    Entity entity = (Entity) iterator.next();
+                    NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+
+                    if (entity.c(nbttagcompound1)) {
+                        nbttaglist.add(nbttagcompound1);
+                    }
+                }
 
-                if (this.vehicle.c(nbttagcompound1)) {
-                    nbttagcompound.set("Riding", nbttagcompound1);
+                if (!nbttaglist.isEmpty()) {
+                    nbttagcompound.set("Passengers", nbttaglist);
                 }
             }
 
@@ -1054,9 +1180,9 @@
             NBTTagList nbttaglist1 = nbttagcompound.getList("Motion", 6);
             NBTTagList nbttaglist2 = nbttagcompound.getList("Rotation", 5);
 
-            this.motX = nbttaglist1.d(0);
-            this.motY = nbttaglist1.d(1);
-            this.motZ = nbttaglist1.d(2);
+            this.motX = nbttaglist1.e(0);
+            this.motY = nbttaglist1.e(1);
+            this.motZ = nbttaglist1.e(2);
             if (Math.abs(this.motX) > 10.0D) {
                 this.motX = 0.0D;
             }
@@ -1069,37 +1195,49 @@
                 this.motZ = 0.0D;
             }
 
-            this.lastX = this.P = this.locX = nbttaglist.d(0);
-            this.lastY = this.Q = this.locY = nbttaglist.d(1);
-            this.lastZ = this.R = this.locZ = nbttaglist.d(2);
-            this.lastYaw = this.yaw = nbttaglist2.e(0);
-            this.lastPitch = this.pitch = nbttaglist2.e(1);
-            this.f(this.yaw);
-            this.g(this.yaw);
+            this.lastX = this.M = this.locX = nbttaglist.e(0);
+            this.lastY = this.N = this.locY = nbttaglist.e(1);
+            this.lastZ = this.O = this.locZ = nbttaglist.e(2);
+            this.lastYaw = this.yaw = nbttaglist2.f(0);
+            this.lastPitch = this.pitch = nbttaglist2.f(1);
+            this.h(this.yaw);
+            this.i(this.yaw);
             this.fallDistance = nbttagcompound.getFloat("FallDistance");
             this.fireTicks = nbttagcompound.getShort("Fire");
             this.setAirTicks(nbttagcompound.getShort("Air"));
             this.onGround = nbttagcompound.getBoolean("OnGround");
-            this.dimension = nbttagcompound.getInt("Dimension");
+            if (nbttagcompound.hasKey("Dimension")) {
+                this.dimension = nbttagcompound.getInt("Dimension");
+            }
+
             this.invulnerable = nbttagcompound.getBoolean("Invulnerable");
             this.portalCooldown = nbttagcompound.getInt("PortalCooldown");
-            if (nbttagcompound.hasKeyOfType("UUIDMost", 4) && nbttagcompound.hasKeyOfType("UUIDLeast", 4)) {
-                this.uniqueID = new UUID(nbttagcompound.getLong("UUIDMost"), nbttagcompound.getLong("UUIDLeast"));
-            } else if (nbttagcompound.hasKeyOfType("UUID", 8)) {
-                this.uniqueID = UUID.fromString(nbttagcompound.getString("UUID"));
+            if (nbttagcompound.b("UUID")) {
+                this.uniqueID = nbttagcompound.a("UUID");
             }
 
             this.setPosition(this.locX, this.locY, this.locZ);
             this.setYawPitch(this.yaw, this.pitch);
-            if (nbttagcompound.hasKeyOfType("CustomName", 8) && nbttagcompound.getString("CustomName").length() > 0) {
+            if (nbttagcompound.hasKeyOfType("CustomName", 8)) {
                 this.setCustomName(nbttagcompound.getString("CustomName"));
             }
 
             this.setCustomNameVisible(nbttagcompound.getBoolean("CustomNameVisible"));
-            this.au.a(nbttagcompound);
-            this.b(nbttagcompound.getBoolean("Silent"));
+            this.aD.a(nbttagcompound);
+            this.c(nbttagcompound.getBoolean("Silent"));
+            this.f(nbttagcompound.getBoolean("Glowing"));
+            if (nbttagcompound.hasKeyOfType("Tags", 9)) {
+                this.aF.clear();
+                NBTTagList nbttaglist3 = nbttagcompound.getList("Tags", 8);
+                int i = Math.min(nbttaglist3.size(), 1024);
+
+                for (int j = 0; j < i; ++j) {
+                    this.aF.add(nbttaglist3.getString(j));
+                }
+            }
+
             this.a(nbttagcompound);
-            if (this.af()) {
+            if (this.ar()) {
                 this.setPosition(this.locX, this.locY, this.locZ);
             }
 
@@ -1112,11 +1250,11 @@
         }
     }
 
-    protected boolean af() {
+    protected boolean ar() {
         return true;
     }
 
-    protected final String ag() {
+    protected final String as() {
         return EntityTypes.b(this);
     }
 
@@ -1124,7 +1262,7 @@
 
     protected abstract void b(NBTTagCompound nbttagcompound);
 
-    public void ah() {}
+    public void at() {}
 
     protected NBTTagList a(double... adouble) {
         NBTTagList nbttaglist = new NBTTagList();
@@ -1166,7 +1304,7 @@
         if (itemstack.count != 0 && itemstack.getItem() != null) {
             EntityItem entityitem = new EntityItem(this.world, this.locX, this.locY + (double) f, this.locZ, itemstack);
 
-            entityitem.p();
+            entityitem.q();
             this.world.addEntity(entityitem);
             return entityitem;
         } else {
@@ -1182,26 +1320,28 @@
         if (this.noclip) {
             return false;
         } else {
-            BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
+            BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.s();
 
             for (int i = 0; i < 8; ++i) {
                 int j = MathHelper.floor(this.locY + (double) (((float) ((i >> 0) % 2) - 0.5F) * 0.1F) + (double) this.getHeadHeight());
                 int k = MathHelper.floor(this.locX + (double) (((float) ((i >> 1) % 2) - 0.5F) * this.width * 0.8F));
                 int l = MathHelper.floor(this.locZ + (double) (((float) ((i >> 2) % 2) - 0.5F) * this.width * 0.8F));
 
-                if (blockposition_mutableblockposition.getX() != k || blockposition_mutableblockposition.getY() != j || blockposition_mutableblockposition.getZ() != l) {
-                    blockposition_mutableblockposition.c(k, j, l);
-                    if (this.world.getType(blockposition_mutableblockposition).getBlock().w()) {
+                if (blockposition_pooledblockposition.getX() != k || blockposition_pooledblockposition.getY() != j || blockposition_pooledblockposition.getZ() != l) {
+                    blockposition_pooledblockposition.d(k, j, l);
+                    if (this.world.getType(blockposition_pooledblockposition).getBlock().j()) {
+                        blockposition_pooledblockposition.t();
                         return true;
                     }
                 }
             }
 
+            blockposition_pooledblockposition.t();
             return false;
         }
     }
 
-    public boolean e(EntityHuman entityhuman) {
+    public boolean a(EntityHuman entityhuman, ItemStack itemstack, EnumHand enumhand) {
         return false;
     }
 
@@ -1209,200 +1349,231 @@
         return null;
     }
 
-    public void ak() {
-        if (this.vehicle.dead) {
-            this.vehicle = null;
+    public void aw() {
+        Entity entity = this.by();
+
+        if (this.isPassenger() && entity.dead) {
+            this.stopRiding();
         } else {
             this.motX = 0.0D;
             this.motY = 0.0D;
             this.motZ = 0.0D;
-            this.t_();
-            if (this.vehicle != null) {
-                this.vehicle.al();
-                this.as += (double) (this.vehicle.yaw - this.vehicle.lastYaw);
-
-                for (this.ar += (double) (this.vehicle.pitch - this.vehicle.lastPitch); this.as >= 180.0D; this.as -= 360.0D) {
-                    ;
-                }
-
-                while (this.as < -180.0D) {
-                    this.as += 360.0D;
-                }
-
-                while (this.ar >= 180.0D) {
-                    this.ar -= 360.0D;
-                }
-
-                while (this.ar < -180.0D) {
-                    this.ar += 360.0D;
-                }
-
-                double d0 = this.as * 0.5D;
-                double d1 = this.ar * 0.5D;
-                float f = 10.0F;
-
-                if (d0 > (double) f) {
-                    d0 = (double) f;
-                }
-
-                if (d0 < (double) (-f)) {
-                    d0 = (double) (-f);
-                }
-
-                if (d1 > (double) f) {
-                    d1 = (double) f;
-                }
-
-                if (d1 < (double) (-f)) {
-                    d1 = (double) (-f);
-                }
-
-                this.as -= d0;
-                this.ar -= d1;
+            this.m();
+            if (this.isPassenger()) {
+                entity.k(this);
             }
         }
     }
 
-    public void al() {
-        if (this.passenger != null) {
-            this.passenger.setPosition(this.locX, this.locY + this.an() + this.passenger.am(), this.locZ);
+    public void k(Entity entity) {
+        if (this.w(entity)) {
+            entity.setPosition(this.locX, this.locY + this.ay() + entity.ax(), this.locZ);
         }
     }
 
-    public double am() {
+    public double ax() {
         return 0.0D;
     }
 
-    public double an() {
+    public double ay() {
         return (double) this.length * 0.75D;
     }
 
-    public void mount(Entity entity) {
-        this.ar = 0.0D;
-        this.as = 0.0D;
-        if (entity == null) {
-            if (this.vehicle != null) {
-                this.setPositionRotation(this.vehicle.locX, this.vehicle.getBoundingBox().b + (double) this.vehicle.length, this.vehicle.locZ, this.yaw, this.pitch);
-                this.vehicle.passenger = null;
-            }
+    public boolean startRiding(Entity entity) {
+        return this.a(entity, false);
+    }
 
-            this.vehicle = null;
+    public boolean a(Entity entity, boolean flag) {
+        if (!flag && (!this.n(entity) || !entity.q(this))) {
+            return false;
         } else {
-            if (this.vehicle != null) {
-                this.vehicle.passenger = null;
+            if (this.isPassenger()) {
+                this.stopRiding();
             }
 
-            if (entity != null) {
-                for (Entity entity1 = entity.vehicle; entity1 != null; entity1 = entity1.vehicle) {
-                    if (entity1 == this) {
-                        return;
-                    }
-                }
+            this.as = entity;
+            this.as.o(this);
+            return true;
+        }
+    }
+
+    protected boolean n(Entity entity) {
+        return this.j <= 0;
+    }
+
+    public void az() {
+        for (int i = this.passengers.size() - 1; i >= 0; --i) {
+            ((Entity) this.passengers.get(i)).stopRiding();
+        }
+
+    }
+
+    public void stopRiding() {
+        if (this.as != null) {
+            Entity entity = this.as;
+
+            this.as = null;
+            entity.p(this);
+        }
+
+    }
+
+    protected void o(Entity entity) {
+        if (entity.by() != this) {
+            throw new IllegalStateException("Use x.startRiding(y), not y.addPassenger(x)");
+        } else {
+            if (!this.world.isClientSide && entity instanceof EntityHuman && !(this.bt() instanceof EntityHuman)) {
+                this.passengers.add(0, entity);
+            } else {
+                this.passengers.add(entity);
             }
 
-            this.vehicle = entity;
-            entity.passenger = this;
         }
     }
 
-    public float ao() {
-        return 0.1F;
+    protected void p(Entity entity) {
+        if (entity.by() == this) {
+            throw new IllegalStateException("Use x.stopRiding(y), not y.removePassenger(x)");
+        } else {
+            this.passengers.remove(entity);
+            entity.j = 60;
+        }
+    }
+
+    protected boolean q(Entity entity) {
+        return this.bu().size() < 1;
     }
 
-    public Vec3D ap() {
+    public float aA() {
+        return 0.0F;
+    }
+
+    public Vec3D aB() {
         return null;
     }
 
-    public void d(BlockPosition blockposition) {
+    public void e(BlockPosition blockposition) {
         if (this.portalCooldown > 0) {
-            this.portalCooldown = this.aq();
+            this.portalCooldown = this.aC();
         } else {
             if (!this.world.isClientSide && !blockposition.equals(this.an)) {
-                this.an = blockposition;
-                ShapeDetector.ShapeDetectorCollection shapedetector_shapedetectorcollection = Blocks.PORTAL.f(this.world, blockposition);
-                double d0 = shapedetector_shapedetectorcollection.b().k() == EnumDirection.EnumAxis.X ? (double) shapedetector_shapedetectorcollection.a().getZ() : (double) shapedetector_shapedetectorcollection.a().getX();
-                double d1 = shapedetector_shapedetectorcollection.b().k() == EnumDirection.EnumAxis.X ? this.locZ : this.locX;
+                this.an = new BlockPosition(blockposition);
+                ShapeDetector.ShapeDetectorCollection shapedetector_shapedetectorcollection = Blocks.PORTAL.c(this.world, this.an);
+                double d0 = shapedetector_shapedetectorcollection.getFacing().k() == EnumDirection.EnumAxis.X ? (double) shapedetector_shapedetectorcollection.a().getZ() : (double) shapedetector_shapedetectorcollection.a().getX();
+                double d1 = shapedetector_shapedetectorcollection.getFacing().k() == EnumDirection.EnumAxis.X ? this.locZ : this.locX;
 
-                d1 = Math.abs(MathHelper.c(d1 - (double) (shapedetector_shapedetectorcollection.b().e().c() == EnumDirection.EnumAxisDirection.NEGATIVE ? 1 : 0), d0, d0 - (double) shapedetector_shapedetectorcollection.d()));
+                d1 = Math.abs(MathHelper.c(d1 - (double) (shapedetector_shapedetectorcollection.getFacing().e().c() == EnumDirection.EnumAxisDirection.NEGATIVE ? 1 : 0), d0, d0 - (double) shapedetector_shapedetectorcollection.d()));
                 double d2 = MathHelper.c(this.locY - 1.0D, (double) shapedetector_shapedetectorcollection.a().getY(), (double) (shapedetector_shapedetectorcollection.a().getY() - shapedetector_shapedetectorcollection.e()));
 
                 this.ao = new Vec3D(d1, d2, 0.0D);
-                this.ap = shapedetector_shapedetectorcollection.b();
+                this.ap = shapedetector_shapedetectorcollection.getFacing();
             }
 
             this.ak = true;
         }
     }
 
-    public int aq() {
+    public int aC() {
         return 300;
     }
 
-    public ItemStack[] getEquipment() {
-        return null;
+    public Iterable<ItemStack> aE() {
+        return this.aE;
     }
 
-    public void setEquipment(int i, ItemStack itemstack) {}
+    public Iterable<ItemStack> getArmorItems() {
+        return this.aE;
+    }
+
+    public Iterable<ItemStack> aG() {
+        return Iterables.concat(this.aE(), this.getArmorItems());
+    }
+
+    public void setEquipment(EnumItemSlot enumitemslot, ItemStack itemstack) {}
 
     public boolean isBurning() {
         boolean flag = this.world != null && this.world.isClientSide;
 
-        return !this.fireProof && (this.fireTicks > 0 || flag && this.g(0));
+        return !this.fireProof && (this.fireTicks > 0 || flag && this.getFlag(0));
+    }
+
+    public boolean isPassenger() {
+        return this.by() != null;
     }
 
-    public boolean au() {
-        return this.vehicle != null;
+    public boolean isVehicle() {
+        return !this.bu().isEmpty();
     }
 
     public boolean isSneaking() {
-        return this.g(1);
+        return this.getFlag(1);
     }
 
     public void setSneaking(boolean flag) {
-        this.b(1, flag);
+        this.setFlag(1, flag);
     }
 
     public boolean isSprinting() {
-        return this.g(3);
+        return this.getFlag(3);
     }
 
     public void setSprinting(boolean flag) {
-        this.b(3, flag);
+        this.setFlag(3, flag);
+    }
+
+    public boolean aM() {
+        return this.glowing || this.world.isClientSide && this.getFlag(6);
+    }
+
+    public void f(boolean flag) {
+        this.glowing = flag;
+        if (!this.world.isClientSide) {
+            this.setFlag(6, this.glowing);
+        }
+
     }
 
     public boolean isInvisible() {
-        return this.g(5);
+        return this.getFlag(5);
     }
 
-    public void setInvisible(boolean flag) {
-        this.b(5, flag);
+    public ScoreboardTeamBase aO() {
+        return this.world.getScoreboard().getPlayerTeam(this.getUniqueID().toString());
     }
 
-    public void f(boolean flag) {
-        this.b(4, flag);
+    public boolean r(Entity entity) {
+        return this.a(entity.aO());
     }
 
-    protected boolean g(int i) {
-        return (this.datawatcher.getByte(0) & 1 << i) != 0;
+    public boolean a(ScoreboardTeamBase scoreboardteambase) {
+        return this.aO() != null ? this.aO().isAlly(scoreboardteambase) : false;
     }
 
-    protected void b(int i, boolean flag) {
-        byte b0 = this.datawatcher.getByte(0);
+    public void setInvisible(boolean flag) {
+        this.setFlag(5, flag);
+    }
+
+    public boolean getFlag(int i) {
+        return (((Byte) this.datawatcher.get(Entity.ax)).byteValue() & 1 << i) != 0;
+    }
+
+    public void setFlag(int i, boolean flag) {
+        byte b0 = ((Byte) this.datawatcher.get(Entity.ax)).byteValue();
 
         if (flag) {
-            this.datawatcher.watch(0, Byte.valueOf((byte) (b0 | 1 << i)));
+            this.datawatcher.set(Entity.ax, Byte.valueOf((byte) (b0 | 1 << i)));
         } else {
-            this.datawatcher.watch(0, Byte.valueOf((byte) (b0 & ~(1 << i))));
+            this.datawatcher.set(Entity.ax, Byte.valueOf((byte) (b0 & ~(1 << i))));
         }
 
     }
 
     public int getAirTicks() {
-        return this.datawatcher.getShort(1);
+        return ((Integer) this.datawatcher.get(Entity.ay)).intValue();
     }
 
     public void setAirTicks(int i) {
-        this.datawatcher.watch(1, Short.valueOf((short) i));
+        this.datawatcher.set(Entity.ay, Integer.valueOf(i));
     }
 
     public void onLightningStrike(EntityLightning entitylightning) {
@@ -1414,7 +1585,7 @@
 
     }
 
-    public void a(EntityLiving entityliving) {}
+    public void b(EntityLiving entityliving) {}
 
     protected boolean j(double d0, double d1, double d2) {
         BlockPosition blockposition = new BlockPosition(d0, d1, d2);
@@ -1423,65 +1594,54 @@
         double d5 = d2 - (double) blockposition.getZ();
         List list = this.world.a(this.getBoundingBox());
 
-        if (list.isEmpty() && !this.world.u(blockposition)) {
+        if (list.isEmpty()) {
             return false;
         } else {
-            byte b0 = 3;
-            double d6 = 9999.0D;
+            EnumDirection enumdirection = EnumDirection.UP;
+            double d6 = Double.MAX_VALUE;
 
-            if (!this.world.u(blockposition.west()) && d3 < d6) {
+            if (!this.world.t(blockposition.west()) && d3 < d6) {
                 d6 = d3;
-                b0 = 0;
+                enumdirection = EnumDirection.WEST;
             }
 
-            if (!this.world.u(blockposition.east()) && 1.0D - d3 < d6) {
+            if (!this.world.t(blockposition.east()) && 1.0D - d3 < d6) {
                 d6 = 1.0D - d3;
-                b0 = 1;
-            }
-
-            if (!this.world.u(blockposition.up()) && 1.0D - d4 < d6) {
-                d6 = 1.0D - d4;
-                b0 = 3;
+                enumdirection = EnumDirection.EAST;
             }
 
-            if (!this.world.u(blockposition.north()) && d5 < d6) {
+            if (!this.world.t(blockposition.north()) && d5 < d6) {
                 d6 = d5;
-                b0 = 4;
+                enumdirection = EnumDirection.NORTH;
             }
 
-            if (!this.world.u(blockposition.south()) && 1.0D - d5 < d6) {
+            if (!this.world.t(blockposition.south()) && 1.0D - d5 < d6) {
                 d6 = 1.0D - d5;
-                b0 = 5;
+                enumdirection = EnumDirection.SOUTH;
             }
 
-            float f = this.random.nextFloat() * 0.2F + 0.1F;
-
-            if (b0 == 0) {
-                this.motX = (double) (-f);
-            }
-
-            if (b0 == 1) {
-                this.motX = (double) f;
-            }
-
-            if (b0 == 3) {
-                this.motY = (double) f;
+            if (!this.world.t(blockposition.up()) && 1.0D - d4 < d6) {
+                d6 = 1.0D - d4;
+                enumdirection = EnumDirection.UP;
             }
 
-            if (b0 == 4) {
-                this.motZ = (double) (-f);
-            }
+            float f = this.random.nextFloat() * 0.2F + 0.1F;
+            float f1 = (float) enumdirection.c().a();
 
-            if (b0 == 5) {
-                this.motZ = (double) f;
+            if (enumdirection.k() == EnumDirection.EnumAxis.X) {
+                this.motX += (double) (f1 * f);
+            } else if (enumdirection.k() == EnumDirection.EnumAxis.Y) {
+                this.motY += (double) (f1 * f);
+            } else if (enumdirection.k() == EnumDirection.EnumAxis.Z) {
+                this.motZ += (double) (f1 * f);
             }
 
             return true;
         }
     }
 
-    public void aA() {
-        this.H = true;
+    public void aQ() {
+        this.E = true;
         this.fallDistance = 0.0F;
     }
 
@@ -1499,11 +1659,11 @@
         }
     }
 
-    public Entity[] aB() {
+    public Entity[] aR() {
         return null;
     }
 
-    public boolean k(Entity entity) {
+    public boolean s(Entity entity) {
         return this == entity;
     }
 
@@ -1511,15 +1671,15 @@
         return 0.0F;
     }
 
-    public void f(float f) {}
+    public void h(float f) {}
 
-    public void g(float f) {}
+    public void i(float f) {}
 
-    public boolean aD() {
+    public boolean aT() {
         return true;
     }
 
-    public boolean l(Entity entity) {
+    public boolean t(Entity entity) {
         return false;
     }
 
@@ -1531,14 +1691,19 @@
         return this.invulnerable && damagesource != DamageSource.OUT_OF_WORLD && !damagesource.u();
     }
 
-    public void m(Entity entity) {
+    public void h(boolean flag) {
+        this.invulnerable = flag;
+    }
+
+    public void u(Entity entity) {
         this.setPositionRotation(entity.locX, entity.locY, entity.locZ, entity.yaw, entity.pitch);
     }
 
-    public void n(Entity entity) {
+    private void a(Entity entity) {
         NBTTagCompound nbttagcompound = new NBTTagCompound();
 
         entity.e(nbttagcompound);
+        nbttagcompound.remove("Dimension");
         this.f(nbttagcompound);
         this.portalCooldown = entity.portalCooldown;
         this.an = entity.an;
@@ -1546,10 +1711,10 @@
         this.ap = entity.ap;
     }
 
-    public void c(int i) {
+    public Entity c(int i) {
         if (!this.world.isClientSide && !this.dead) {
             this.world.methodProfiler.a("changeDimension");
-            MinecraftServer minecraftserver = MinecraftServer.getServer();
+            MinecraftServer minecraftserver = this.h();
             int j = this.dimension;
             WorldServer worldserver = minecraftserver.getWorldServer(j);
             WorldServer worldserver1 = minecraftserver.getWorldServer(i);
@@ -1563,29 +1728,71 @@
             this.world.kill(this);
             this.dead = false;
             this.world.methodProfiler.a("reposition");
-            minecraftserver.getPlayerList().changeWorld(this, j, worldserver, worldserver1);
+            BlockPosition blockposition;
+
+            if (i == 1) {
+                blockposition = worldserver1.getDimensionSpawn();
+            } else {
+                double d0 = this.locX;
+                double d1 = this.locZ;
+                double d2 = 8.0D;
+
+                if (i == -1) {
+                    d0 = MathHelper.a(d0 / d2, worldserver1.getWorldBorder().b() + 16.0D, worldserver1.getWorldBorder().d() - 16.0D);
+                    d1 = MathHelper.a(d1 / d2, worldserver1.getWorldBorder().c() + 16.0D, worldserver1.getWorldBorder().e() - 16.0D);
+                } else if (i == 0) {
+                    d0 = MathHelper.a(d0 * d2, worldserver1.getWorldBorder().b() + 16.0D, worldserver1.getWorldBorder().d() - 16.0D);
+                    d1 = MathHelper.a(d1 * d2, worldserver1.getWorldBorder().c() + 16.0D, worldserver1.getWorldBorder().e() - 16.0D);
+                }
+
+                d0 = (double) MathHelper.clamp((int) d0, -29999872, 29999872);
+                d1 = (double) MathHelper.clamp((int) d1, -29999872, 29999872);
+                float f = this.yaw;
+
+                this.setPositionRotation(d0, this.locY, d1, 90.0F, 0.0F);
+                PortalTravelAgent portaltravelagent = worldserver1.getTravelAgent();
+
+                portaltravelagent.b(this, f);
+                blockposition = new BlockPosition(this);
+            }
+
+            worldserver.entityJoinedWorld(this, false);
             this.world.methodProfiler.c("reloading");
             Entity entity = EntityTypes.createEntityByName(EntityTypes.b(this), worldserver1);
 
             if (entity != null) {
-                entity.n(this);
+                entity.a(this);
                 if (j == 1 && i == 1) {
-                    BlockPosition blockposition = this.world.r(worldserver1.getSpawn());
+                    BlockPosition blockposition1 = worldserver1.q(worldserver1.getSpawn());
 
+                    entity.setPositionRotation(blockposition1, entity.yaw, entity.pitch);
+                } else {
                     entity.setPositionRotation(blockposition, entity.yaw, entity.pitch);
                 }
 
+                boolean flag = entity.attachedToPlayer;
+
+                entity.attachedToPlayer = true;
                 worldserver1.addEntity(entity);
+                entity.attachedToPlayer = flag;
+                worldserver1.entityJoinedWorld(entity, false);
             }
 
             this.dead = true;
             this.world.methodProfiler.b();
-            worldserver.j();
-            worldserver1.j();
+            worldserver.m();
+            worldserver1.m();
             this.world.methodProfiler.b();
+            return entity;
+        } else {
+            return null;
         }
     }
 
+    public boolean aV() {
+        return true;
+    }
+
     public float a(Explosion explosion, World world, BlockPosition blockposition, IBlockData iblockdata) {
         return iblockdata.getBlock().a(this);
     }
@@ -1594,19 +1801,19 @@
         return true;
     }
 
-    public int aE() {
+    public int aW() {
         return 3;
     }
 
-    public Vec3D aG() {
+    public Vec3D getPortalOffset() {
         return this.ao;
     }
 
-    public EnumDirection aH() {
+    public EnumDirection getPortalDirection() {
         return this.ap;
     }
 
-    public boolean aI() {
+    public boolean isIgnoreBlockTrigger() {
         return false;
     }
 
@@ -1631,11 +1838,11 @@
             }
         });
         crashreportsystemdetails.a("Entity\'s Exact location", (Object) String.format("%.2f, %.2f, %.2f", new Object[] { Double.valueOf(this.locX), Double.valueOf(this.locY), Double.valueOf(this.locZ)}));
-        crashreportsystemdetails.a("Entity\'s Block location", (Object) CrashReportSystemDetails.a((double) MathHelper.floor(this.locX), (double) MathHelper.floor(this.locY), (double) MathHelper.floor(this.locZ)));
+        crashreportsystemdetails.a("Entity\'s Block location", (Object) CrashReportSystemDetails.a(MathHelper.floor(this.locX), MathHelper.floor(this.locY), MathHelper.floor(this.locZ)));
         crashreportsystemdetails.a("Entity\'s Momentum", (Object) String.format("%.2f, %.2f, %.2f", new Object[] { Double.valueOf(this.motX), Double.valueOf(this.motY), Double.valueOf(this.motZ)}));
-        crashreportsystemdetails.a("Entity\'s Rider", new Callable() {
+        crashreportsystemdetails.a("Entity\'s Passengers", new Callable() {
             public String a() throws Exception {
-                return Entity.this.passenger.toString();
+                return Entity.this.bu().toString();
             }
 
             public Object call() throws Exception {
@@ -1644,7 +1851,7 @@
         });
         crashreportsystemdetails.a("Entity\'s Vehicle", new Callable() {
             public String a() throws Exception {
-                return Entity.this.vehicle.toString();
+                return Entity.this.by().toString();
             }
 
             public Object call() throws Exception {
@@ -1653,53 +1860,63 @@
         });
     }
 
+    public void a(UUID uuid) {
+        this.uniqueID = uuid;
+    }
+
     public UUID getUniqueID() {
         return this.uniqueID;
     }
 
-    public boolean aL() {
+    public boolean bd() {
         return true;
     }
 
     public IChatBaseComponent getScoreboardDisplayName() {
-        ChatComponentText chatcomponenttext = new ChatComponentText(this.getName());
+        ChatComponentText chatcomponenttext = new ChatComponentText(ScoreboardTeam.getPlayerDisplayName(this.aO(), this.getName()));
 
-        chatcomponenttext.getChatModifier().setChatHoverable(this.aQ());
+        chatcomponenttext.getChatModifier().setChatHoverable(this.bk());
         chatcomponenttext.getChatModifier().setInsertion(this.getUniqueID().toString());
         return chatcomponenttext;
     }
 
     public void setCustomName(String s) {
-        this.datawatcher.watch(2, s);
+        this.datawatcher.set(Entity.az, s);
     }
 
     public String getCustomName() {
-        return this.datawatcher.getString(2);
+        return (String) this.datawatcher.get(Entity.az);
     }
 
     public boolean hasCustomName() {
-        return this.datawatcher.getString(2).length() > 0;
+        return !((String) this.datawatcher.get(Entity.az)).isEmpty();
     }
 
     public void setCustomNameVisible(boolean flag) {
-        this.datawatcher.watch(3, Byte.valueOf((byte) (flag ? 1 : 0)));
+        this.datawatcher.set(Entity.aA, Boolean.valueOf(flag));
     }
 
     public boolean getCustomNameVisible() {
-        return this.datawatcher.getByte(3) == 1;
+        return ((Boolean) this.datawatcher.get(Entity.aA)).booleanValue();
     }
 
     public void enderTeleportTo(double d0, double d1, double d2) {
+        this.aG = true;
         this.setPositionRotation(d0, d1, d2, this.yaw, this.pitch);
+        this.world.entityJoinedWorld(this, false);
     }
 
-    public void i(int i) {}
+    public void a(DataWatcherObject<?> datawatcherobject) {}
 
     public EnumDirection getDirection() {
         return EnumDirection.fromType2(MathHelper.floor((double) (this.yaw * 4.0F / 360.0F) + 0.5D) & 3);
     }
 
-    protected ChatHoverable aQ() {
+    public EnumDirection bj() {
+        return this.getDirection();
+    }
+
+    protected ChatHoverable bk() {
         NBTTagCompound nbttagcompound = new NBTTagCompound();
         String s = EntityTypes.b(this);
 
@@ -1728,15 +1945,15 @@
         return this.length * 0.85F;
     }
 
-    public boolean aT() {
-        return this.g;
+    public boolean bo() {
+        return this.au;
     }
 
-    public void h(boolean flag) {
-        this.g = flag;
+    public void j(boolean flag) {
+        this.au = flag;
     }
 
-    public boolean d(int i, ItemStack itemstack) {
+    public boolean c(int i, ItemStack itemstack) {
         return false;
     }
 
@@ -1767,26 +1984,29 @@
     }
 
     public void a(CommandObjectiveExecutor.EnumCommandResult commandobjectiveexecutor_enumcommandresult, int i) {
-        this.au.a(this, commandobjectiveexecutor_enumcommandresult, i);
+        if (this.world != null && !this.world.isClientSide) {
+            this.aD.a(this.world.getMinecraftServer(), this, commandobjectiveexecutor_enumcommandresult, i);
+        }
+
     }
 
-    public CommandObjectiveExecutor aU() {
-        return this.au;
+    public MinecraftServer h() {
+        return this.world.getMinecraftServer();
     }
 
-    public void o(Entity entity) {
-        this.au.a(entity.aU());
+    public CommandObjectiveExecutor bp() {
+        return this.aD;
     }
 
-    public NBTTagCompound getNBTTag() {
-        return null;
+    public void v(Entity entity) {
+        this.aD.a(entity.bp());
     }
 
-    public boolean a(EntityHuman entityhuman, Vec3D vec3d) {
-        return false;
+    public EnumInteractionResult a(EntityHuman entityhuman, Vec3D vec3d, ItemStack itemstack, EnumHand enumhand) {
+        return EnumInteractionResult.PASS;
     }
 
-    public boolean aW() {
+    public boolean bq() {
         return false;
     }
 
@@ -1797,4 +2017,194 @@
 
         EnchantmentManager.b(entityliving, entity);
     }
+
+    public void b(EntityPlayer entityplayer) {}
+
+    public void c(EntityPlayer entityplayer) {}
+
+    public float a(EnumBlockRotation enumblockrotation) {
+        float f = MathHelper.g(this.yaw);
+
+        switch (Entity.SyntheticClass_1.a[enumblockrotation.ordinal()]) {
+        case 1:
+            return f + 180.0F;
+
+        case 2:
+            return f + 270.0F;
+
+        case 3:
+            return f + 90.0F;
+
+        default:
+            return f;
+        }
+    }
+
+    public float a(EnumBlockMirror enumblockmirror) {
+        float f = MathHelper.g(this.yaw);
+
+        switch (Entity.SyntheticClass_1.b[enumblockmirror.ordinal()]) {
+        case 1:
+            return -f;
+
+        case 2:
+            return 180.0F - f;
+
+        default:
+            return f;
+        }
+    }
+
+    public boolean br() {
+        return false;
+    }
+
+    public boolean bs() {
+        boolean flag = this.aG;
+
+        this.aG = false;
+        return flag;
+    }
+
+    public Entity bt() {
+        return null;
+    }
+
+    public List<Entity> bu() {
+        return (List) (this.passengers.isEmpty() ? Collections.emptyList() : Lists.newArrayList(this.passengers));
+    }
+
+    public boolean w(Entity entity) {
+        Iterator iterator = this.bu().iterator();
+
+        Entity entity1;
+
+        do {
+            if (!iterator.hasNext()) {
+                return false;
+            }
+
+            entity1 = (Entity) iterator.next();
+        } while (!entity1.equals(entity));
+
+        return true;
+    }
+
+    public Collection<Entity> bv() {
+        HashSet hashset = Sets.newHashSet();
+
+        this.a(Entity.class, (Set) hashset);
+        return hashset;
+    }
+
+    public <T extends Entity> Collection<T> b(Class<T> oclass) {
+        HashSet hashset = Sets.newHashSet();
+
+        this.a(oclass, (Set) hashset);
+        return hashset;
+    }
+
+    private <T extends Entity> void a(Class<T> oclass, Set<T> set) {
+        Entity entity;
+
+        for (Iterator iterator = this.bu().iterator(); iterator.hasNext(); entity.a(oclass, set)) {
+            entity = (Entity) iterator.next();
+            if (oclass.isAssignableFrom(entity.getClass())) {
+                set.add(entity);
+            }
+        }
+
+    }
+
+    public Entity getVehicle() {
+        Entity entity;
+
+        for (entity = this; entity.isPassenger(); entity = entity.by()) {
+            ;
+        }
+
+        return entity;
+    }
+
+    public boolean x(Entity entity) {
+        return this.getVehicle() == entity.getVehicle();
+    }
+
+    public boolean y(Entity entity) {
+        Iterator iterator = this.bu().iterator();
+
+        Entity entity1;
+
+        do {
+            if (!iterator.hasNext()) {
+                return false;
+            }
+
+            entity1 = (Entity) iterator.next();
+            if (entity1.equals(entity)) {
+                return true;
+            }
+        } while (!entity1.y(entity));
+
+        return true;
+    }
+
+    public boolean bx() {
+        Entity entity = this.bt();
+
+        return entity instanceof EntityHuman ? ((EntityHuman) entity).cJ() : !this.world.isClientSide;
+    }
+
+    public Entity by() {
+        return this.as;
+    }
+
+    public EnumPistonReaction z() {
+        return EnumPistonReaction.NORMAL;
+    }
+
+    public SoundCategory bz() {
+        return SoundCategory.NEUTRAL;
+    }
+
+    static class SyntheticClass_1 {
+
+        static final int[] a;
+        static final int[] b = new int[EnumBlockMirror.values().length];
+
+        static {
+            try {
+                Entity.SyntheticClass_1.b[EnumBlockMirror.LEFT_RIGHT.ordinal()] = 1;
+            } catch (NoSuchFieldError nosuchfielderror) {
+                ;
+            }
+
+            try {
+                Entity.SyntheticClass_1.b[EnumBlockMirror.FRONT_BACK.ordinal()] = 2;
+            } catch (NoSuchFieldError nosuchfielderror1) {
+                ;
+            }
+
+            a = new int[EnumBlockRotation.values().length];
+
+            try {
+                Entity.SyntheticClass_1.a[EnumBlockRotation.CLOCKWISE_180.ordinal()] = 1;
+            } catch (NoSuchFieldError nosuchfielderror2) {
+                ;
+            }
+
+            try {
+                Entity.SyntheticClass_1.a[EnumBlockRotation.COUNTERCLOCKWISE_90.ordinal()] = 2;
+            } catch (NoSuchFieldError nosuchfielderror3) {
+                ;
+            }
+
+            try {
+                Entity.SyntheticClass_1.a[EnumBlockRotation.CLOCKWISE_90.ordinal()] = 3;
+            } catch (NoSuchFieldError nosuchfielderror4) {
+                ;
+            }
+
+        }
+    }
 }
