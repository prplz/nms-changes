--- a/net/minecraft/server/EntityCreeper.java
+++ b/net/minecraft/server/EntityCreeper.java
@@ -2,14 +2,21 @@
 
 public class EntityCreeper extends EntityMonster {
 
-    private int a;
+    private static final DataWatcherObject<Integer> a = DataWatcher.a(EntityCreeper.class, DataWatcherRegistry.b);
+    private static final DataWatcherObject<Boolean> b = DataWatcher.a(EntityCreeper.class, DataWatcherRegistry.h);
+    private static final DataWatcherObject<Boolean> c = DataWatcher.a(EntityCreeper.class, DataWatcherRegistry.h);
+    private int bv;
     private int fuseTicks;
     private int maxFuseTicks = 30;
     private int explosionRadius = 3;
-    private int bn = 0;
+    private int bz = 0;
 
     public EntityCreeper(World world) {
         super(world);
+        this.setSize(0.6F, 1.7F);
+    }
+
+    protected void r() {
         this.goalSelector.a(1, new PathfinderGoalFloat(this));
         this.goalSelector.a(2, new PathfinderGoalSwell(this));
         this.goalSelector.a(3, new PathfinderGoalAvoidTarget(this, EntityOcelot.class, 6.0F, 1.0D, 1.2D));
@@ -26,7 +33,7 @@
         this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue(0.25D);
     }
 
-    public int aE() {
+    public int aW() {
         return this.getGoalTarget() == null ? 3 : 3 + (int) (this.getHealth() - 1.0F);
     }
 
@@ -39,27 +46,27 @@
 
     }
 
-    protected void h() {
-        super.h();
-        this.datawatcher.a(16, Byte.valueOf((byte) -1));
-        this.datawatcher.a(17, Byte.valueOf((byte) 0));
-        this.datawatcher.a(18, Byte.valueOf((byte) 0));
+    protected void i() {
+        super.i();
+        this.datawatcher.register(EntityCreeper.a, Integer.valueOf(-1));
+        this.datawatcher.register(EntityCreeper.b, Boolean.valueOf(false));
+        this.datawatcher.register(EntityCreeper.c, Boolean.valueOf(false));
     }
 
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
-        if (this.datawatcher.getByte(17) == 1) {
+        if (((Boolean) this.datawatcher.get(EntityCreeper.b)).booleanValue()) {
             nbttagcompound.setBoolean("powered", true);
         }
 
         nbttagcompound.setShort("Fuse", (short) this.maxFuseTicks);
         nbttagcompound.setByte("ExplosionRadius", (byte) this.explosionRadius);
-        nbttagcompound.setBoolean("ignited", this.cn());
+        nbttagcompound.setBoolean("ignited", this.isIgnited());
     }
 
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
-        this.datawatcher.watch(17, Byte.valueOf((byte) (nbttagcompound.getBoolean("powered") ? 1 : 0)));
+        this.datawatcher.set(EntityCreeper.b, Boolean.valueOf(nbttagcompound.getBoolean("powered")));
         if (nbttagcompound.hasKeyOfType("Fuse", 99)) {
             this.maxFuseTicks = nbttagcompound.getShort("Fuse");
         }
@@ -69,22 +76,22 @@
         }
 
         if (nbttagcompound.getBoolean("ignited")) {
-            this.co();
+            this.dc();
         }
 
     }
 
-    public void t_() {
+    public void m() {
         if (this.isAlive()) {
-            this.a = this.fuseTicks;
-            if (this.cn()) {
+            this.bv = this.fuseTicks;
+            if (this.isIgnited()) {
                 this.a(1);
             }
 
-            int i = this.cm();
+            int i = this.da();
 
             if (i > 0 && this.fuseTicks == 0) {
-                this.makeSound("creeper.primed", 1.0F, 0.5F);
+                this.a(SoundEffects.at, 1.0F, 0.5F);
             }
 
             this.fuseTicks += i;
@@ -94,101 +101,102 @@
 
             if (this.fuseTicks >= this.maxFuseTicks) {
                 this.fuseTicks = this.maxFuseTicks;
-                this.cr();
+                this.df();
             }
         }
 
-        super.t_();
+        super.m();
     }
 
-    protected String bo() {
-        return "mob.creeper.say";
+    protected SoundEffect bR() {
+        return SoundEffects.as;
     }
 
-    protected String bp() {
-        return "mob.creeper.death";
+    protected SoundEffect bS() {
+        return SoundEffects.ar;
     }
 
     public void die(DamageSource damagesource) {
         super.die(damagesource);
-        if (damagesource.getEntity() instanceof EntitySkeleton) {
-            int i = Item.getId(Items.RECORD_13);
-            int j = Item.getId(Items.RECORD_WAIT);
-            int k = i + this.random.nextInt(j - i + 1);
-
-            this.a(Item.getById(k), 1);
-        } else if (damagesource.getEntity() instanceof EntityCreeper && damagesource.getEntity() != this && ((EntityCreeper) damagesource.getEntity()).isPowered() && ((EntityCreeper) damagesource.getEntity()).cp()) {
-            ((EntityCreeper) damagesource.getEntity()).cq();
-            this.a(new ItemStack(Items.SKULL, 1, 4), 0.0F);
+        if (this.world.getGameRules().getBoolean("doMobLoot")) {
+            if (damagesource.getEntity() instanceof EntitySkeleton) {
+                int i = Item.getId(Items.RECORD_13);
+                int j = Item.getId(Items.RECORD_WAIT);
+                int k = i + this.random.nextInt(j - i + 1);
+
+                this.a(Item.getById(k), 1);
+            } else if (damagesource.getEntity() instanceof EntityCreeper && damagesource.getEntity() != this && ((EntityCreeper) damagesource.getEntity()).isPowered() && ((EntityCreeper) damagesource.getEntity()).canCauseHeadDrop()) {
+                ((EntityCreeper) damagesource.getEntity()).setCausedHeadDrop();
+                this.a(new ItemStack(Items.SKULL, 1, 4), 0.0F);
+            }
         }
 
     }
 
-    public boolean r(Entity entity) {
+    public boolean B(Entity entity) {
         return true;
     }
 
     public boolean isPowered() {
-        return this.datawatcher.getByte(17) == 1;
+        return ((Boolean) this.datawatcher.get(EntityCreeper.b)).booleanValue();
     }
 
-    protected Item getLoot() {
-        return Items.GUNPOWDER;
+    protected MinecraftKey J() {
+        return LootTables.p;
     }
 
-    public int cm() {
-        return this.datawatcher.getByte(16);
+    public int da() {
+        return ((Integer) this.datawatcher.get(EntityCreeper.a)).intValue();
     }
 
     public void a(int i) {
-        this.datawatcher.watch(16, Byte.valueOf((byte) i));
+        this.datawatcher.set(EntityCreeper.a, Integer.valueOf(i));
     }
 
     public void onLightningStrike(EntityLightning entitylightning) {
         super.onLightningStrike(entitylightning);
-        this.datawatcher.watch(17, Byte.valueOf((byte) 1));
+        this.datawatcher.set(EntityCreeper.b, Boolean.valueOf(true));
     }
 
-    protected boolean a(EntityHuman entityhuman) {
-        ItemStack itemstack = entityhuman.inventory.getItemInHand();
-
+    protected boolean a(EntityHuman entityhuman, EnumHand enumhand, ItemStack itemstack) {
         if (itemstack != null && itemstack.getItem() == Items.FLINT_AND_STEEL) {
-            this.world.makeSound(this.locX + 0.5D, this.locY + 0.5D, this.locZ + 0.5D, "fire.ignite", 1.0F, this.random.nextFloat() * 0.4F + 0.8F);
-            entityhuman.bw();
+            this.world.a(entityhuman, this.locX, this.locY, this.locZ, SoundEffects.bw, this.bz(), 1.0F, this.random.nextFloat() * 0.4F + 0.8F);
+            entityhuman.a(enumhand);
             if (!this.world.isClientSide) {
-                this.co();
+                this.dc();
                 itemstack.damage(1, entityhuman);
                 return true;
             }
         }
 
-        return super.a(entityhuman);
+        return super.a(entityhuman, enumhand, itemstack);
     }
 
-    private void cr() {
+    private void df() {
         if (!this.world.isClientSide) {
             boolean flag = this.world.getGameRules().getBoolean("mobGriefing");
             float f = this.isPowered() ? 2.0F : 1.0F;
 
+            this.aT = true;
             this.world.explode(this, this.locX, this.locY, this.locZ, (float) this.explosionRadius * f, flag);
             this.die();
         }
 
     }
 
-    public boolean cn() {
-        return this.datawatcher.getByte(18) != 0;
+    public boolean isIgnited() {
+        return ((Boolean) this.datawatcher.get(EntityCreeper.c)).booleanValue();
     }
 
-    public void co() {
-        this.datawatcher.watch(18, Byte.valueOf((byte) 1));
+    public void dc() {
+        this.datawatcher.set(EntityCreeper.c, Boolean.valueOf(true));
     }
 
-    public boolean cp() {
-        return this.bn < 1 && this.world.getGameRules().getBoolean("doMobLoot");
+    public boolean canCauseHeadDrop() {
+        return this.bz < 1 && this.world.getGameRules().getBoolean("doMobLoot");
     }
 
-    public void cq() {
-        ++this.bn;
+    public void setCausedHeadDrop() {
+        ++this.bz;
     }
 }
