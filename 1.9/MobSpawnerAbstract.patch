--- a/net/minecraft/server/MobSpawnerAbstract.java
+++ b/net/minecraft/server/MobSpawnerAbstract.java
@@ -7,15 +7,14 @@
 public abstract class MobSpawnerAbstract {
 
     public int spawnDelay = 20;
-    private String mobName = "Pig";
-    private final List<MobSpawnerAbstract.a> mobs = Lists.newArrayList();
-    private MobSpawnerAbstract.a spawnData;
+    private final List<MobSpawnerData> mobs = Lists.newArrayList();
+    private MobSpawnerData spawnData = new MobSpawnerData();
+    private double d;
     private double e;
-    private double f;
     private int minSpawnDelay = 200;
     private int maxSpawnDelay = 800;
     private int spawnCount = 4;
-    private Entity j;
+    private Entity i;
     private int maxNearbyEntities = 6;
     private int requiredPlayerRange = 16;
     private int spawnRange = 4;
@@ -23,48 +22,41 @@
     public MobSpawnerAbstract() {}
 
     public String getMobName() {
-        if (this.i() == null) {
-            if (this.mobName != null && this.mobName.equals("Minecart")) {
-                this.mobName = "MinecartRideable";
-            }
-
-            return this.mobName;
-        } else {
-            return this.i().d;
-        }
+        return this.spawnData.b().getString("id");
     }
 
     public void setMobName(String s) {
-        this.mobName = s;
+        this.spawnData.b().setString("id", s);
     }
 
-    private boolean g() {
+    private boolean h() {
         BlockPosition blockposition = this.b();
 
         return this.a().isPlayerNearby((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, (double) this.requiredPlayerRange);
     }
 
     public void c() {
-        if (this.g()) {
+        if (!this.h()) {
+            this.e = this.d;
+        } else {
             BlockPosition blockposition = this.b();
-            double d0;
 
             if (this.a().isClientSide) {
-                double d1 = (double) ((float) blockposition.getX() + this.a().random.nextFloat());
-                double d2 = (double) ((float) blockposition.getY() + this.a().random.nextFloat());
+                double d0 = (double) ((float) blockposition.getX() + this.a().random.nextFloat());
+                double d1 = (double) ((float) blockposition.getY() + this.a().random.nextFloat());
+                double d2 = (double) ((float) blockposition.getZ() + this.a().random.nextFloat());
 
-                d0 = (double) ((float) blockposition.getZ() + this.a().random.nextFloat());
-                this.a().addParticle(EnumParticle.SMOKE_NORMAL, d1, d2, d0, 0.0D, 0.0D, 0.0D, new int[0]);
-                this.a().addParticle(EnumParticle.FLAME, d1, d2, d0, 0.0D, 0.0D, 0.0D, new int[0]);
+                this.a().addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
+                this.a().addParticle(EnumParticle.FLAME, d0, d1, d2, 0.0D, 0.0D, 0.0D, new int[0]);
                 if (this.spawnDelay > 0) {
                     --this.spawnDelay;
                 }
 
-                this.f = this.e;
-                this.e = (this.e + (double) (1000.0F / ((float) this.spawnDelay + 200.0F))) % 360.0D;
+                this.e = this.d;
+                this.d = (this.d + (double) (1000.0F / ((float) this.spawnDelay + 200.0F))) % 360.0D;
             } else {
                 if (this.spawnDelay == -1) {
-                    this.h();
+                    this.i();
                 }
 
                 if (this.spawnDelay > 0) {
@@ -75,30 +67,38 @@
                 boolean flag = false;
 
                 for (int i = 0; i < this.spawnCount; ++i) {
-                    Entity entity = EntityTypes.createEntityByName(this.getMobName(), this.a());
+                    NBTTagCompound nbttagcompound = this.spawnData.b();
+                    NBTTagList nbttaglist = nbttagcompound.getList("Pos", 6);
+                    World world = this.a();
+                    int j = nbttaglist.size();
+                    double d3 = j >= 1 ? nbttaglist.e(0) : (double) blockposition.getX() + (world.random.nextDouble() - world.random.nextDouble()) * (double) this.spawnRange + 0.5D;
+                    double d4 = j >= 2 ? nbttaglist.e(1) : (double) (blockposition.getY() + world.random.nextInt(3) - 1);
+                    double d5 = j >= 3 ? nbttaglist.e(2) : (double) blockposition.getZ() + (world.random.nextDouble() - world.random.nextDouble()) * (double) this.spawnRange + 0.5D;
+                    Entity entity = ChunkRegionLoader.a(nbttagcompound, world, d3, d4, d5, false);
 
                     if (entity == null) {
                         return;
                     }
 
-                    int j = this.a().a(entity.getClass(), (new AxisAlignedBB((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), (double) (blockposition.getX() + 1), (double) (blockposition.getY() + 1), (double) (blockposition.getZ() + 1))).grow((double) this.spawnRange, (double) this.spawnRange, (double) this.spawnRange)).size();
+                    int k = world.a(entity.getClass(), (new AxisAlignedBB((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), (double) (blockposition.getX() + 1), (double) (blockposition.getY() + 1), (double) (blockposition.getZ() + 1))).g((double) this.spawnRange)).size();
 
-                    if (j >= this.maxNearbyEntities) {
-                        this.h();
+                    if (k >= this.maxNearbyEntities) {
+                        this.i();
                         return;
                     }
 
-                    d0 = (double) blockposition.getX() + (this.a().random.nextDouble() - this.a().random.nextDouble()) * (double) this.spawnRange + 0.5D;
-                    double d3 = (double) (blockposition.getY() + this.a().random.nextInt(3) - 1);
-                    double d4 = (double) blockposition.getZ() + (this.a().random.nextDouble() - this.a().random.nextDouble()) * (double) this.spawnRange + 0.5D;
                     EntityInsentient entityinsentient = entity instanceof EntityInsentient ? (EntityInsentient) entity : null;
 
-                    entity.setPositionRotation(d0, d3, d4, this.a().random.nextFloat() * 360.0F, 0.0F);
-                    if (entityinsentient == null || entityinsentient.bR() && entityinsentient.canSpawn()) {
-                        this.a(entity, true);
-                        this.a().triggerEffect(2004, blockposition, 0);
+                    entity.setPositionRotation(entity.locX, entity.locY, entity.locZ, world.random.nextFloat() * 360.0F, 0.0F);
+                    if (entityinsentient == null || entityinsentient.cF() && entityinsentient.canSpawn()) {
+                        if (this.spawnData.b().d() == 1 && this.spawnData.b().hasKeyOfType("id", 8) && entity instanceof EntityInsentient) {
+                            ((EntityInsentient) entity).prepare(world.D(new BlockPosition(entity)), (GroupDataEntity) null);
+                        }
+
+                        ChunkRegionLoader.a(entity, world);
+                        world.triggerEffect(2004, blockposition, 0);
                         if (entityinsentient != null) {
-                            entityinsentient.y();
+                            entityinsentient.doSpawnEffect();
                         }
 
                         flag = true;
@@ -106,74 +106,14 @@
                 }
 
                 if (flag) {
-                    this.h();
-                }
-            }
-
-        }
-    }
-
-    private Entity a(Entity entity, boolean flag) {
-        if (this.i() != null) {
-            NBTTagCompound nbttagcompound = new NBTTagCompound();
-
-            entity.d(nbttagcompound);
-            Iterator iterator = this.i().c.c().iterator();
-
-            while (iterator.hasNext()) {
-                String s = (String) iterator.next();
-                NBTBase nbtbase = this.i().c.get(s);
-
-                nbttagcompound.set(s, nbtbase.clone());
-            }
-
-            entity.f(nbttagcompound);
-            if (entity.world != null && flag) {
-                entity.world.addEntity(entity);
-            }
-
-            NBTTagCompound nbttagcompound1;
-
-            for (Entity entity1 = entity; nbttagcompound.hasKeyOfType("Riding", 10); nbttagcompound = nbttagcompound1) {
-                nbttagcompound1 = nbttagcompound.getCompound("Riding");
-                Entity entity2 = EntityTypes.createEntityByName(nbttagcompound1.getString("id"), entity.world);
-
-                if (entity2 != null) {
-                    NBTTagCompound nbttagcompound2 = new NBTTagCompound();
-
-                    entity2.d(nbttagcompound2);
-                    Iterator iterator1 = nbttagcompound1.c().iterator();
-
-                    while (iterator1.hasNext()) {
-                        String s1 = (String) iterator1.next();
-                        NBTBase nbtbase1 = nbttagcompound1.get(s1);
-
-                        nbttagcompound2.set(s1, nbtbase1.clone());
-                    }
-
-                    entity2.f(nbttagcompound2);
-                    entity2.setPositionRotation(entity1.locX, entity1.locY, entity1.locZ, entity1.yaw, entity1.pitch);
-                    if (entity.world != null && flag) {
-                        entity.world.addEntity(entity2);
-                    }
-
-                    entity1.mount(entity2);
+                    this.i();
                 }
-
-                entity1 = entity2;
-            }
-        } else if (entity instanceof EntityLiving && entity.world != null && flag) {
-            if (entity instanceof EntityInsentient) {
-                ((EntityInsentient) entity).prepare(entity.world.E(new BlockPosition(entity)), (GroupDataEntity) null);
             }
 
-            entity.world.addEntity(entity);
         }
-
-        return entity;
     }
 
-    private void h() {
+    private void i() {
         if (this.maxSpawnDelay <= this.minSpawnDelay) {
             this.spawnDelay = this.minSpawnDelay;
         } else {
@@ -182,31 +122,31 @@
             this.spawnDelay = this.minSpawnDelay + this.a().random.nextInt(i);
         }
 
-        if (this.mobs.size() > 0) {
-            this.a((MobSpawnerAbstract.a) WeightedRandom.a(this.a().random, this.mobs));
+        if (!this.mobs.isEmpty()) {
+            this.a((MobSpawnerData) WeightedRandom.a(this.a().random, this.mobs));
         }
 
         this.a(1);
     }
 
     public void a(NBTTagCompound nbttagcompound) {
-        this.mobName = nbttagcompound.getString("EntityId");
         this.spawnDelay = nbttagcompound.getShort("Delay");
         this.mobs.clear();
         if (nbttagcompound.hasKeyOfType("SpawnPotentials", 9)) {
             NBTTagList nbttaglist = nbttagcompound.getList("SpawnPotentials", 10);
 
             for (int i = 0; i < nbttaglist.size(); ++i) {
-                this.mobs.add(new MobSpawnerAbstract.a(nbttaglist.get(i)));
+                this.mobs.add(new MobSpawnerData(nbttaglist.get(i)));
             }
         }
 
-        if (nbttagcompound.hasKeyOfType("SpawnData", 10)) {
-            this.a(new MobSpawnerAbstract.a(nbttagcompound.getCompound("SpawnData"), this.mobName));
-        } else {
-            this.a((MobSpawnerAbstract.a) null);
+        NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("SpawnData");
+
+        if (!nbttagcompound1.hasKeyOfType("id", 8)) {
+            nbttagcompound1.setString("id", "Pig");
         }
 
+        this.a(new MobSpawnerData(1, nbttagcompound1));
         if (nbttagcompound.hasKeyOfType("MinSpawnDelay", 99)) {
             this.minSpawnDelay = nbttagcompound.getShort("MinSpawnDelay");
             this.maxSpawnDelay = nbttagcompound.getShort("MaxSpawnDelay");
@@ -223,7 +163,7 @@
         }
 
         if (this.a() != null) {
-            this.j = null;
+            this.i = null;
         }
 
     }
@@ -232,7 +172,6 @@
         String s = this.getMobName();
 
         if (!UtilColor.b(s)) {
-            nbttagcompound.setString("EntityId", s);
             nbttagcompound.setShort("Delay", (short) this.spawnDelay);
             nbttagcompound.setShort("MinSpawnDelay", (short) this.minSpawnDelay);
             nbttagcompound.setShort("MaxSpawnDelay", (short) this.maxSpawnDelay);
@@ -240,28 +179,22 @@
             nbttagcompound.setShort("MaxNearbyEntities", (short) this.maxNearbyEntities);
             nbttagcompound.setShort("RequiredPlayerRange", (short) this.requiredPlayerRange);
             nbttagcompound.setShort("SpawnRange", (short) this.spawnRange);
-            if (this.i() != null) {
-                nbttagcompound.set("SpawnData", this.i().c.clone());
-            }
-
-            if (this.i() != null || this.mobs.size() > 0) {
-                NBTTagList nbttaglist = new NBTTagList();
+            nbttagcompound.set("SpawnData", this.spawnData.b().clone());
+            NBTTagList nbttaglist = new NBTTagList();
 
-                if (this.mobs.size() > 0) {
-                    Iterator iterator = this.mobs.iterator();
+            if (!this.mobs.isEmpty()) {
+                Iterator iterator = this.mobs.iterator();
 
-                    while (iterator.hasNext()) {
-                        MobSpawnerAbstract.a mobspawnerabstract_a = (MobSpawnerAbstract.a) iterator.next();
+                while (iterator.hasNext()) {
+                    MobSpawnerData mobspawnerdata = (MobSpawnerData) iterator.next();
 
-                        nbttaglist.add(mobspawnerabstract_a.a());
-                    }
-                } else {
-                    nbttaglist.add(this.i().a());
+                    nbttaglist.add(mobspawnerdata.a());
                 }
-
-                nbttagcompound.set("SpawnPotentials", nbttaglist);
+            } else {
+                nbttaglist.add(this.spawnData.a());
             }
 
+            nbttagcompound.set("SpawnPotentials", nbttaglist);
         }
     }
 
@@ -274,12 +207,8 @@
         }
     }
 
-    private MobSpawnerAbstract.a i() {
-        return this.spawnData;
-    }
-
-    public void a(MobSpawnerAbstract.a mobspawnerabstract_a) {
-        this.spawnData = mobspawnerabstract_a;
+    public void a(MobSpawnerData mobspawnerdata) {
+        this.spawnData = mobspawnerdata;
     }
 
     public abstract void a(int i);
@@ -287,41 +216,4 @@
     public abstract World a();
 
     public abstract BlockPosition b();
-
-    public class a extends WeightedRandom.WeightedRandomChoice {
-
-        private final NBTTagCompound c;
-        private final String d;
-
-        public a(NBTTagCompound nbttagcompound) {
-            this(nbttagcompound.getCompound("Properties"), nbttagcompound.getString("Type"), nbttagcompound.getInt("Weight"));
-        }
-
-        public a(NBTTagCompound nbttagcompound, String s) {
-            this(nbttagcompound, s, 1);
-        }
-
-        private a(NBTTagCompound nbttagcompound, String s, int i) {
-            super(i);
-            if (s.equals("Minecart")) {
-                if (nbttagcompound != null) {
-                    s = EntityMinecartAbstract.EnumMinecartType.a(nbttagcompound.getInt("Type")).b();
-                } else {
-                    s = "MinecartRideable";
-                }
-            }
-
-            this.c = nbttagcompound;
-            this.d = s;
-        }
-
-        public NBTTagCompound a() {
-            NBTTagCompound nbttagcompound = new NBTTagCompound();
-
-            nbttagcompound.set("Properties", this.c);
-            nbttagcompound.setString("Type", this.d);
-            nbttagcompound.setInt("Weight", this.a);
-            return nbttagcompound;
-        }
-    }
 }
