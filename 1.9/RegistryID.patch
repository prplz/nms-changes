--- a/net/minecraft/server/RegistryID.java
+++ b/net/minecraft/server/RegistryID.java
@@ -2,39 +2,146 @@
 
 import com.google.common.base.Predicates;
 import com.google.common.collect.Iterators;
-import com.google.common.collect.Lists;
-import java.util.IdentityHashMap;
 import java.util.Iterator;
-import java.util.List;
 
-public class RegistryID<T> implements Registry<T> {
+public class RegistryID<K> implements Registry<K>, Iterable<K> {
 
-    private final IdentityHashMap<T, Integer> a = new IdentityHashMap(512);
-    private final List<T> b = Lists.newArrayList();
+    private static final Object a = null;
+    private K[] b;
+    private int[] c;
+    private K[] d;
+    private int e;
+    private int f;
+
+    public RegistryID(int i) {
+        i = (int) ((float) i / 0.8F);
+        this.b = (Object[]) (new Object[i]);
+        this.c = new int[i];
+        this.d = (Object[]) (new Object[i]);
+    }
+
+    public int getId(K k0) {
+        return this.c(this.b(k0, this.d(k0)));
+    }
+
+    public K fromId(int i) {
+        return i >= 0 && i < this.d.length ? this.d[i] : null;
+    }
 
-    public RegistryID() {}
+    private int c(int i) {
+        return i == -1 ? -1 : this.c[i];
+    }
+
+    public int c(K k0) {
+        int i = this.c();
+
+        this.a(k0, i);
+        return i;
+    }
+
+    private int c() {
+        while (this.e < this.d.length && this.d[this.e] != null) {
+            ++this.e;
+        }
+
+        return this.e++;
+    }
+
+    private void d(int i) {
+        Object[] aobject = this.b;
+        int[] aint = this.c;
+
+        this.b = (Object[]) (new Object[i]);
+        this.c = new int[i];
+        this.d = (Object[]) (new Object[i]);
+        this.e = 0;
+        this.f = 0;
+
+        for (int j = 0; j < aobject.length; ++j) {
+            if (aobject[j] != null) {
+                this.a(aobject[j], aint[j]);
+            }
+        }
+
+    }
 
-    public void a(T t0, int i) {
-        this.a.put(t0, Integer.valueOf(i));
+    public void a(K k0, int i) {
+        int j = Math.max(i, ++this.f);
+        int k;
+
+        if ((float) j >= (float) this.b.length * 0.8F) {
+            for (k = this.b.length << 1; k < i; k <<= 1) {
+                ;
+            }
 
-        while (this.b.size() <= i) {
-            this.b.add((Object) null);
+            this.d(k);
         }
 
-        this.b.set(i, t0);
+        k = this.e(this.d(k0));
+        this.b[k] = k0;
+        this.c[k] = i;
+        this.d[i] = k0;
     }
 
-    public int b(T t0) {
-        Integer integer = (Integer) this.a.get(t0);
+    private int d(K k0) {
+        return (MathHelper.f(System.identityHashCode(k0)) & Integer.MAX_VALUE) % this.b.length;
+    }
+
+    private int b(K k0, int i) {
+        int j;
+
+        for (j = i; j < this.b.length; ++j) {
+            if (this.b[j] == k0) {
+                return j;
+            }
+
+            if (this.b[j] == RegistryID.a) {
+                return -1;
+            }
+        }
+
+        for (j = 0; j < i; ++j) {
+            if (this.b[j] == k0) {
+                return j;
+            }
+
+            if (this.b[j] == RegistryID.a) {
+                return -1;
+            }
+        }
+
+        return -1;
+    }
+
+    private int e(int i) {
+        StringBuilder stringbuilder = new StringBuilder("");
+
+        int j;
+
+        for (j = i; j < this.b.length; ++j) {
+            if (this.b[j] == RegistryID.a) {
+                return j;
+            }
+
+            stringbuilder.append(j).append(' ');
+        }
+
+        for (j = 0; j < i; ++j) {
+            if (this.b[j] == RegistryID.a) {
+                return j;
+            }
+
+            stringbuilder.append(j).append(' ');
+        }
 
-        return integer == null ? -1 : integer.intValue();
+        throw new RuntimeException("Overflowed :(");
     }
 
-    public final T a(int i) {
-        return i >= 0 && i < this.b.size() ? this.b.get(i) : null;
+    public Iterator<K> iterator() {
+        return Iterators.filter(Iterators.forArray(this.d), Predicates.notNull());
     }
 
-    public Iterator<T> iterator() {
-        return Iterators.filter(this.b.iterator(), Predicates.notNull());
+    public int b() {
+        return this.f + 1;
     }
 }
