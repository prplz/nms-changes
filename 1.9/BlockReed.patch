--- a/net/minecraft/server/BlockReed.java
+++ b/net/minecraft/server/BlockReed.java
@@ -6,16 +6,18 @@
 public class BlockReed extends Block {
 
     public static final BlockStateInteger AGE = BlockStateInteger.of("age", 0, 15);
+    protected static final AxisAlignedBB b = new AxisAlignedBB(0.125D, 0.0D, 0.125D, 0.875D, 1.0D, 0.875D);
 
     protected BlockReed() {
         super(Material.PLANT);
-        this.j(this.blockStateList.getBlockData().set(BlockReed.AGE, Integer.valueOf(0)));
-        float f = 0.375F;
-
-        this.a(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 1.0F, 0.5F + f);
+        this.w(this.blockStateList.getBlockData().set(BlockReed.AGE, Integer.valueOf(0)));
         this.a(true);
     }
 
+    public AxisAlignedBB a(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
+        return BlockReed.b;
+    }
+
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         if (world.getType(blockposition.down()).getBlock() == Blocks.REEDS || this.e(world, blockposition, iblockdata)) {
             if (world.isEmpty(blockposition.up())) {
@@ -48,17 +50,20 @@
         } else if (block != Blocks.GRASS && block != Blocks.DIRT && block != Blocks.SAND) {
             return false;
         } else {
+            BlockPosition blockposition1 = blockposition.down();
             Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
-            EnumDirection enumdirection;
+            IBlockData iblockdata;
 
             do {
                 if (!iterator.hasNext()) {
                     return false;
                 }
 
-                enumdirection = (EnumDirection) iterator.next();
-            } while (world.getType(blockposition.shift(enumdirection).down()).getBlock().getMaterial() != Material.WATER);
+                EnumDirection enumdirection = (EnumDirection) iterator.next();
+
+                iblockdata = world.getType(blockposition1.shift(enumdirection));
+            } while (iblockdata.getMaterial() != Material.WATER && iblockdata.getBlock() != Blocks.de);
 
             return true;
         }
@@ -69,7 +74,7 @@
     }
 
     protected final boolean e(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        if (this.e(world, blockposition)) {
+        if (this.b(world, blockposition)) {
             return true;
         } else {
             this.b(world, blockposition, iblockdata, 0);
@@ -78,26 +83,30 @@
         }
     }
 
-    public boolean e(World world, BlockPosition blockposition) {
+    public boolean b(World world, BlockPosition blockposition) {
         return this.canPlace(world, blockposition);
     }
 
-    public AxisAlignedBB a(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        return null;
+    public AxisAlignedBB a(IBlockData iblockdata, World world, BlockPosition blockposition) {
+        return BlockReed.k;
     }
 
     public Item getDropType(IBlockData iblockdata, Random random, int i) {
         return Items.REEDS;
     }
 
-    public boolean c() {
+    public boolean b(IBlockData iblockdata) {
         return false;
     }
 
-    public boolean d() {
+    public boolean c(IBlockData iblockdata) {
         return false;
     }
 
+    public ItemStack a(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        return new ItemStack(Items.REEDS);
+    }
+
     public IBlockData fromLegacyData(int i) {
         return this.getBlockData().set(BlockReed.AGE, Integer.valueOf(i));
     }
