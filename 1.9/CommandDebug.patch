--- a/net/minecraft/server/CommandDebug.java
+++ b/net/minecraft/server/CommandDebug.java
@@ -3,6 +3,7 @@
 import java.io.File;
 import java.io.FileWriter;
 import java.text.SimpleDateFormat;
+import java.util.Collections;
 import java.util.Date;
 import java.util.List;
 import org.apache.logging.log4j.LogManager;
@@ -28,7 +29,7 @@
         return "commands.debug.usage";
     }
 
-    public void execute(ICommandListener icommandlistener, String[] astring) throws CommandException {
+    public void execute(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring) throws CommandException {
         if (astring.length < 1) {
             throw new ExceptionUsage("commands.debug.usage", new Object[0]);
         } else {
@@ -37,10 +38,10 @@
                     throw new ExceptionUsage("commands.debug.usage", new Object[0]);
                 }
 
-                a(icommandlistener, this, "commands.debug.start", new Object[0]);
-                MinecraftServer.getServer().au();
-                this.b = MinecraftServer.az();
-                this.c = MinecraftServer.getServer().at();
+                a(icommandlistener, (ICommand) this, "commands.debug.start", new Object[0]);
+                minecraftserver.aq();
+                this.b = MinecraftServer.av();
+                this.c = minecraftserver.ap();
             } else {
                 if (!astring[0].equals("stop")) {
                     throw new ExceptionUsage("commands.debug.usage", new Object[0]);
@@ -50,32 +51,32 @@
                     throw new ExceptionUsage("commands.debug.usage", new Object[0]);
                 }
 
-                if (!MinecraftServer.getServer().methodProfiler.a) {
+                if (!minecraftserver.methodProfiler.a) {
                     throw new CommandException("commands.debug.notStarted", new Object[0]);
                 }
 
-                long i = MinecraftServer.az();
-                int j = MinecraftServer.getServer().at();
+                long i = MinecraftServer.av();
+                int j = minecraftserver.ap();
                 long k = i - this.b;
                 int l = j - this.c;
 
-                this.a(k, l);
-                MinecraftServer.getServer().methodProfiler.a = false;
-                a(icommandlistener, this, "commands.debug.stop", new Object[] { Float.valueOf((float) k / 1000.0F), Integer.valueOf(l)});
+                this.a(k, l, minecraftserver);
+                minecraftserver.methodProfiler.a = false;
+                a(icommandlistener, (ICommand) this, "commands.debug.stop", new Object[] { Float.valueOf((float) k / 1000.0F), Integer.valueOf(l)});
             }
 
         }
     }
 
-    private void a(long i, int j) {
-        File file = new File(MinecraftServer.getServer().d("debug"), "profile-results-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + ".txt");
+    private void a(long i, int j, MinecraftServer minecraftserver) {
+        File file = new File(minecraftserver.d("debug"), "profile-results-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + ".txt");
 
         file.getParentFile().mkdirs();
 
         try {
             FileWriter filewriter = new FileWriter(file);
 
-            filewriter.write(this.b(i, j));
+            filewriter.write(this.b(i, j, minecraftserver));
             filewriter.close();
         } catch (Throwable throwable) {
             CommandDebug.a.error("Could not save profiler results to " + file, throwable);
@@ -83,7 +84,7 @@
 
     }
 
-    private String b(long i, int j) {
+    private String b(long i, int j, MinecraftServer minecraftserver) {
         StringBuilder stringbuilder = new StringBuilder();
 
         stringbuilder.append("---- Minecraft Profiler Results ----\n");
@@ -94,13 +95,13 @@
         stringbuilder.append("Tick span: ").append(j).append(" ticks\n");
         stringbuilder.append("// This is approximately ").append(String.format("%.2f", new Object[] { Float.valueOf((float) j / ((float) i / 1000.0F))})).append(" ticks per second. It should be ").append(20).append(" ticks per second\n\n");
         stringbuilder.append("--- BEGIN PROFILE DUMP ---\n\n");
-        this.a(0, "root", stringbuilder);
+        this.a(0, "root", stringbuilder, minecraftserver);
         stringbuilder.append("--- END PROFILE DUMP ---\n\n");
         return stringbuilder.toString();
     }
 
-    private void a(int i, String s, StringBuilder stringbuilder) {
-        List list = MinecraftServer.getServer().methodProfiler.b(s);
+    private void a(int i, String s, StringBuilder stringbuilder, MinecraftServer minecraftserver) {
+        List list = minecraftserver.methodProfiler.b(s);
 
         if (list != null && list.size() >= 3) {
             for (int j = 1; j < list.size(); ++j) {
@@ -109,13 +110,13 @@
                 stringbuilder.append(String.format("[%02d] ", new Object[] { Integer.valueOf(i)}));
 
                 for (int k = 0; k < i; ++k) {
-                    stringbuilder.append(" ");
+                    stringbuilder.append("|   ");
                 }
 
                 stringbuilder.append(methodprofiler_profilerinfo.c).append(" - ").append(String.format("%.2f", new Object[] { Double.valueOf(methodprofiler_profilerinfo.a)})).append("%/").append(String.format("%.2f", new Object[] { Double.valueOf(methodprofiler_profilerinfo.b)})).append("%\n");
                 if (!methodprofiler_profilerinfo.c.equals("unspecified")) {
                     try {
-                        this.a(i + 1, s + "." + methodprofiler_profilerinfo.c, stringbuilder);
+                        this.a(i + 1, s + "." + methodprofiler_profilerinfo.c, stringbuilder, minecraftserver);
                     } catch (Exception exception) {
                         stringbuilder.append("[[ EXCEPTION ").append(exception).append(" ]]");
                     }
@@ -135,7 +136,7 @@
         }
     }
 
-    public List<String> tabComplete(ICommandListener icommandlistener, String[] astring, BlockPosition blockposition) {
-        return astring.length == 1 ? a(astring, new String[] { "start", "stop"}) : null;
+    public List<String> tabComplete(MinecraftServer minecraftserver, ICommandListener icommandlistener, String[] astring, BlockPosition blockposition) {
+        return astring.length == 1 ? a(astring, new String[] { "start", "stop"}) : Collections.emptyList();
     }
 }
