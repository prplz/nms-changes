--- a/net/minecraft/server/WorldChunkManagerHell.java
+++ b/net/minecraft/server/WorldChunkManagerHell.java
@@ -6,16 +6,14 @@
 
 public class WorldChunkManagerHell extends WorldChunkManager {
 
-    private BiomeBase b;
-    private float c;
+    private final BiomeBase a;
 
-    public WorldChunkManagerHell(BiomeBase biomebase, float f) {
-        this.b = biomebase;
-        this.c = f;
+    public WorldChunkManagerHell(BiomeBase biomebase) {
+        this.a = biomebase;
     }
 
     public BiomeBase getBiome(BlockPosition blockposition) {
-        return this.b;
+        return this.a;
     }
 
     public BiomeBase[] getBiomes(BiomeBase[] abiomebase, int i, int j, int k, int l) {
@@ -23,25 +21,16 @@
             abiomebase = new BiomeBase[k * l];
         }
 
-        Arrays.fill(abiomebase, 0, k * l, this.b);
+        Arrays.fill(abiomebase, 0, k * l, this.a);
         return abiomebase;
     }
 
-    public float[] getWetness(float[] afloat, int i, int j, int k, int l) {
-        if (afloat == null || afloat.length < k * l) {
-            afloat = new float[k * l];
-        }
-
-        Arrays.fill(afloat, 0, k * l, this.c);
-        return afloat;
-    }
-
     public BiomeBase[] getBiomeBlock(BiomeBase[] abiomebase, int i, int j, int k, int l) {
         if (abiomebase == null || abiomebase.length < k * l) {
             abiomebase = new BiomeBase[k * l];
         }
 
-        Arrays.fill(abiomebase, 0, k * l, this.b);
+        Arrays.fill(abiomebase, 0, k * l, this.a);
         return abiomebase;
     }
 
@@ -50,10 +39,10 @@
     }
 
     public BlockPosition a(int i, int j, int k, List<BiomeBase> list, Random random) {
-        return list.contains(this.b) ? new BlockPosition(i - k + random.nextInt(k * 2 + 1), 0, j - k + random.nextInt(k * 2 + 1)) : null;
+        return list.contains(this.a) ? new BlockPosition(i - k + random.nextInt(k * 2 + 1), 0, j - k + random.nextInt(k * 2 + 1)) : null;
     }
 
     public boolean a(int i, int j, int k, List<BiomeBase> list) {
-        return list.contains(this.b);
+        return list.contains(this.a);
     }
 }
