--- a/net/minecraft/server/EntityLiving.java
+++ b/net/minecraft/server/EntityLiving.java
@@ -1,7 +1,6 @@
 package net.minecraft.server;
 
-import com.google.common.base.Predicate;
-import com.google.common.base.Predicates;
+import com.google.common.base.Objects;
 import com.google.common.collect.Maps;
 import java.util.Collection;
 import java.util.Iterator;
@@ -14,63 +13,75 @@
 
     private static final UUID a = UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D");
     private static final AttributeModifier b = (new AttributeModifier(EntityLiving.a, "Sprinting speed boost", 0.30000001192092896D, 2)).a(false);
-    private AttributeMapBase c;
-    public final CombatTracker combatTracker = new CombatTracker(this);
-    public final Map<Integer, MobEffect> effects = Maps.newHashMap();
-    private final ItemStack[] h = new ItemStack[5];
-    public boolean ar;
-    public int as;
-    public int at;
-    public int hurtTicks;
+    protected static final DataWatcherObject<Byte> as = DataWatcher.a(EntityLiving.class, DataWatcherRegistry.a);
+    public static final DataWatcherObject<Float> HEALTH = DataWatcher.a(EntityLiving.class, DataWatcherRegistry.c);
+    private static final DataWatcherObject<Integer> f = DataWatcher.a(EntityLiving.class, DataWatcherRegistry.b);
+    private static final DataWatcherObject<Boolean> g = DataWatcher.a(EntityLiving.class, DataWatcherRegistry.h);
+    private static final DataWatcherObject<Integer> h = DataWatcher.a(EntityLiving.class, DataWatcherRegistry.b);
+    private AttributeMapBase bp;
+    public CombatTracker combatTracker = new CombatTracker(this);
+    public final Map<MobEffectList, MobEffect> effects = Maps.newHashMap();
+    private final ItemStack[] bs = new ItemStack[2];
+    private final ItemStack[] bt = new ItemStack[4];
+    public boolean at;
+    public EnumHand au;
     public int av;
-    public float aw;
-    public int deathTicks;
-    public float ay;
+    public int aw;
+    public int hurtTicks;
+    public int ay;
     public float az;
-    public float aA;
+    public int deathTicks;
     public float aB;
     public float aC;
-    public int maxNoDamageTicks = 20;
+    protected int aD;
     public float aE;
     public float aF;
     public float aG;
-    public float aH;
+    public int maxNoDamageTicks = 20;
     public float aI;
     public float aJ;
     public float aK;
     public float aL;
-    public float aM = 0.02F;
+    public float aM;
+    public float aN;
+    public float aO;
+    public float aP;
+    public float aQ = 0.02F;
     public EntityHuman killer;
     protected int lastDamageByPlayerTime;
-    protected boolean aP;
+    protected boolean aT;
     protected int ticksFarFromPlayer;
-    protected float aR;
-    protected float aS;
-    protected float aT;
-    protected float aU;
     protected float aV;
-    protected int aW;
+    protected float aW;
+    protected float aX;
+    protected float aY;
+    protected float aZ;
+    protected int ba;
     public float lastDamage;
-    protected boolean aY;
-    public float aZ;
-    public float ba;
-    protected float bb;
-    protected int bc;
-    protected double bd;
-    protected double be;
-    protected double bf;
-    protected double bg;
+    protected boolean bc;
+    public float bd;
+    public float be;
+    public float bf;
+    protected int bg;
     protected double bh;
+    protected double bi;
+    protected double bj;
+    protected double bk;
+    protected double bl;
     public boolean updateEffects = true;
     public EntityLiving lastDamager;
     public int hurtTimestamp;
-    private EntityLiving bk;
-    private int bl;
-    private float bm;
-    private int bn;
-    private float bo;
+    private EntityLiving bx;
+    private int by;
+    private float bz;
+    private int bA;
+    private float bB;
+    protected ItemStack bm;
+    protected int bn;
+    protected int bo;
+    private BlockPosition bC;
 
-    public void G() {
+    public void Q() {
         this.damageEntity(DamageSource.OUT_OF_WORLD, Float.MAX_VALUE);
     }
 
@@ -78,61 +89,56 @@
         super(world);
         this.initAttributes();
         this.setHealth(this.getMaxHealth());
-        this.k = true;
-        this.aH = (float) ((Math.random() + 1.0D) * 0.009999999776482582D);
+        this.i = true;
+        this.aL = (float) ((Math.random() + 1.0D) * 0.009999999776482582D);
         this.setPosition(this.locX, this.locY, this.locZ);
-        this.aG = (float) Math.random() * 12398.0F;
-        this.yaw = (float) (Math.random() * 3.1415927410125732D * 2.0D);
-        this.aK = this.yaw;
-        this.S = 0.6F;
+        this.aK = (float) Math.random() * 12398.0F;
+        this.yaw = (float) (Math.random() * 6.2831854820251465D);
+        this.aO = this.yaw;
+        this.P = 0.6F;
     }
 
-    protected void h() {
-        this.datawatcher.a(7, Integer.valueOf(0));
-        this.datawatcher.a(8, Byte.valueOf((byte) 0));
-        this.datawatcher.a(9, Byte.valueOf((byte) 0));
-        this.datawatcher.a(6, Float.valueOf(1.0F));
+    protected void i() {
+        this.datawatcher.register(EntityLiving.as, Byte.valueOf((byte) 0));
+        this.datawatcher.register(EntityLiving.f, Integer.valueOf(0));
+        this.datawatcher.register(EntityLiving.g, Boolean.valueOf(false));
+        this.datawatcher.register(EntityLiving.h, Integer.valueOf(0));
+        this.datawatcher.register(EntityLiving.HEALTH, Float.valueOf(1.0F));
     }
 
     protected void initAttributes() {
         this.getAttributeMap().b(GenericAttributes.maxHealth);
         this.getAttributeMap().b(GenericAttributes.c);
         this.getAttributeMap().b(GenericAttributes.MOVEMENT_SPEED);
+        this.getAttributeMap().b(GenericAttributes.g);
     }
 
-    protected void a(double d0, boolean flag, Block block, BlockPosition blockposition) {
-        if (!this.V()) {
-            this.W();
+    protected void a(double d0, boolean flag, IBlockData iblockdata, BlockPosition blockposition) {
+        if (!this.isInWater()) {
+            this.aj();
         }
 
         if (!this.world.isClientSide && this.fallDistance > 3.0F && flag) {
-            IBlockData iblockdata = this.world.getType(blockposition);
-            Block block1 = iblockdata.getBlock();
             float f = (float) MathHelper.f(this.fallDistance - 3.0F);
 
-            if (block1.getMaterial() != Material.AIR) {
-                double d1 = (double) Math.min(0.2F + f / 15.0F, 10.0F);
-
-                if (d1 > 2.5D) {
-                    d1 = 2.5D;
-                }
-
+            if (iblockdata.getMaterial() != Material.AIR) {
+                double d1 = Math.min((double) (0.2F + f / 15.0F), 2.5D);
                 int i = (int) (150.0D * d1);
 
                 ((WorldServer) this.world).a(EnumParticle.BLOCK_DUST, this.locX, this.locY, this.locZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, new int[] { Block.getCombinedId(iblockdata)});
             }
         }
 
-        super.a(d0, flag, block, blockposition);
+        super.a(d0, flag, iblockdata, blockposition);
     }
 
-    public boolean aY() {
+    public boolean bB() {
         return false;
     }
 
-    public void K() {
-        this.ay = this.az;
-        super.K();
+    public void U() {
+        this.aB = this.aC;
+        super.U();
         this.world.methodProfiler.a("livingEntityBaseTick");
         boolean flag = this instanceof EntityHuman;
 
@@ -156,8 +162,8 @@
 
         if (this.isAlive()) {
             if (this.a(Material.WATER)) {
-                if (!this.aY() && !this.hasEffect(MobEffectList.WATER_BREATHING.id) && !flag1) {
-                    this.setAirTicks(this.j(this.getAirTicks()));
+                if (!this.bB() && !this.hasEffect(MobEffects.WATER_BREATHING) && !flag1) {
+                    this.setAirTicks(this.d(this.getAirTicks()));
                     if (this.getAirTicks() == -20) {
                         this.setAirTicks(0);
 
@@ -173,19 +179,28 @@
                     }
                 }
 
-                if (!this.world.isClientSide && this.au() && this.vehicle instanceof EntityLiving) {
-                    this.mount((Entity) null);
+                if (!this.world.isClientSide && this.isPassenger() && this.by() instanceof EntityLiving) {
+                    this.stopRiding();
                 }
             } else {
                 this.setAirTicks(300);
             }
+
+            if (!this.world.isClientSide) {
+                BlockPosition blockposition = new BlockPosition(this);
+
+                if (!Objects.equal(this.bC, blockposition)) {
+                    this.bC = blockposition;
+                    this.b(blockposition);
+                }
+            }
         }
 
-        if (this.isAlive() && this.U()) {
+        if (this.isAlive() && this.ah()) {
             this.extinguish();
         }
 
-        this.aE = this.aF;
+        this.aI = this.aJ;
         if (this.hurtTicks > 0) {
             --this.hurtTicks;
         }
@@ -195,7 +210,7 @@
         }
 
         if (this.getHealth() <= 0.0F) {
-            this.aZ();
+            this.bC();
         }
 
         if (this.lastDamageByPlayerTime > 0) {
@@ -204,37 +219,46 @@
             this.killer = null;
         }
 
-        if (this.bk != null && !this.bk.isAlive()) {
-            this.bk = null;
+        if (this.bx != null && !this.bx.isAlive()) {
+            this.bx = null;
         }
 
         if (this.lastDamager != null) {
             if (!this.lastDamager.isAlive()) {
-                this.b((EntityLiving) null);
+                this.a((EntityLiving) null);
             } else if (this.ticksLived - this.hurtTimestamp > 100) {
-                this.b((EntityLiving) null);
+                this.a((EntityLiving) null);
             }
         }
 
-        this.bi();
-        this.aU = this.aT;
-        this.aJ = this.aI;
-        this.aL = this.aK;
+        this.tickPotionEffects();
+        this.aY = this.aX;
+        this.aN = this.aM;
+        this.aP = this.aO;
         this.lastYaw = this.yaw;
         this.lastPitch = this.pitch;
         this.world.methodProfiler.b();
     }
 
+    protected void b(BlockPosition blockposition) {
+        int i = EnchantmentManager.a(Enchantments.j, this);
+
+        if (i > 0) {
+            EnchantmentFrostWalker.a(this, this.world, blockposition, i);
+        }
+
+    }
+
     public boolean isBaby() {
         return false;
     }
 
-    protected void aZ() {
+    protected void bC() {
         ++this.deathTicks;
         if (this.deathTicks == 20) {
             int i;
 
-            if (!this.world.isClientSide && (this.lastDamageByPlayerTime > 0 || this.alwaysGivesExp()) && this.ba() && this.world.getGameRules().getBoolean("doMobLoot")) {
+            if (!this.world.isClientSide && (this.alwaysGivesExp() || this.lastDamageByPlayerTime > 0 && this.isDropExperience() && this.world.getGameRules().getBoolean("doMobLoot"))) {
                 i = this.getExpValue(this.killer);
 
                 while (i > 0) {
@@ -258,11 +282,11 @@
 
     }
 
-    protected boolean ba() {
+    protected boolean isDropExperience() {
         return !this.isBaby();
     }
 
-    protected int j(int i) {
+    protected int d(int i) {
         int j = EnchantmentManager.getOxygenEnchantmentLevel(this);
 
         return j > 0 && this.random.nextInt(j + 1) > 0 ? i : i - 1;
@@ -276,7 +300,7 @@
         return false;
     }
 
-    public Random bc() {
+    public Random getRandom() {
         return this.random;
     }
 
@@ -284,65 +308,82 @@
         return this.lastDamager;
     }
 
-    public int be() {
+    public int bH() {
         return this.hurtTimestamp;
     }
 
-    public void b(EntityLiving entityliving) {
+    public void a(EntityLiving entityliving) {
         this.lastDamager = entityliving;
         this.hurtTimestamp = this.ticksLived;
     }
 
-    public EntityLiving bf() {
-        return this.bk;
+    public EntityLiving bI() {
+        return this.bx;
     }
 
-    public int bg() {
-        return this.bl;
+    public int bJ() {
+        return this.by;
     }
 
-    public void p(Entity entity) {
+    public void z(Entity entity) {
         if (entity instanceof EntityLiving) {
-            this.bk = (EntityLiving) entity;
+            this.bx = (EntityLiving) entity;
         } else {
-            this.bk = null;
+            this.bx = null;
         }
 
-        this.bl = this.ticksLived;
+        this.by = this.ticksLived;
     }
 
-    public int bh() {
+    public int bK() {
         return this.ticksFarFromPlayer;
     }
 
+    protected void a_(ItemStack itemstack) {
+        if (itemstack != null) {
+            SoundEffect soundeffect = SoundEffects.p;
+            Item item = itemstack.getItem();
+
+            if (item instanceof ItemArmor) {
+                soundeffect = ((ItemArmor) item).d().b();
+            } else if (item == Items.cR) {
+                soundeffect = SoundEffects.s;
+            }
+
+            this.a(soundeffect, 1.0F, 1.0F);
+        }
+    }
+
     public void b(NBTTagCompound nbttagcompound) {
-        nbttagcompound.setFloat("HealF", this.getHealth());
-        nbttagcompound.setShort("Health", (short) ((int) Math.ceil((double) this.getHealth())));
+        nbttagcompound.setFloat("Health", this.getHealth());
         nbttagcompound.setShort("HurtTime", (short) this.hurtTicks);
         nbttagcompound.setInt("HurtByTimestamp", this.hurtTimestamp);
         nbttagcompound.setShort("DeathTime", (short) this.deathTicks);
         nbttagcompound.setFloat("AbsorptionAmount", this.getAbsorptionHearts());
-        ItemStack[] aitemstack = this.getEquipment();
-        int i = aitemstack.length;
+        EnumItemSlot[] aenumitemslot = EnumItemSlot.values();
+        int i = aenumitemslot.length;
 
         int j;
+        EnumItemSlot enumitemslot;
         ItemStack itemstack;
 
         for (j = 0; j < i; ++j) {
-            itemstack = aitemstack[j];
+            enumitemslot = aenumitemslot[j];
+            itemstack = this.getEquipment(enumitemslot);
             if (itemstack != null) {
-                this.c.a(itemstack.B());
+                this.getAttributeMap().a(itemstack.a(enumitemslot));
             }
         }
 
         nbttagcompound.set("Attributes", GenericAttributes.a(this.getAttributeMap()));
-        aitemstack = this.getEquipment();
-        i = aitemstack.length;
+        aenumitemslot = EnumItemSlot.values();
+        i = aenumitemslot.length;
 
         for (j = 0; j < i; ++j) {
-            itemstack = aitemstack[j];
+            enumitemslot = aenumitemslot[j];
+            itemstack = this.getEquipment(enumitemslot);
             if (itemstack != null) {
-                this.c.b(itemstack.B());
+                this.getAttributeMap().b(itemstack.a(enumitemslot));
             }
         }
 
@@ -375,36 +416,32 @@
                 MobEffect mobeffect = MobEffect.b(nbttagcompound1);
 
                 if (mobeffect != null) {
-                    this.effects.put(Integer.valueOf(mobeffect.getEffectId()), mobeffect);
+                    this.effects.put(mobeffect.getMobEffect(), mobeffect);
                 }
             }
         }
 
-        if (nbttagcompound.hasKeyOfType("HealF", 99)) {
-            this.setHealth(nbttagcompound.getFloat("HealF"));
-        } else {
-            NBTBase nbtbase = nbttagcompound.get("Health");
-
-            if (nbtbase == null) {
-                this.setHealth(this.getMaxHealth());
-            } else if (nbtbase.getTypeId() == 5) {
-                this.setHealth(((NBTTagFloat) nbtbase).h());
-            } else if (nbtbase.getTypeId() == 2) {
-                this.setHealth((float) ((NBTTagShort) nbtbase).e());
-            }
+        if (nbttagcompound.hasKeyOfType("Health", 99)) {
+            this.setHealth(nbttagcompound.getFloat("Health"));
         }
 
         this.hurtTicks = nbttagcompound.getShort("HurtTime");
         this.deathTicks = nbttagcompound.getShort("DeathTime");
         this.hurtTimestamp = nbttagcompound.getInt("HurtByTimestamp");
+        if (nbttagcompound.hasKeyOfType("Team", 8)) {
+            String s = nbttagcompound.getString("Team");
+
+            this.world.getScoreboard().addPlayerToTeam(this.getUniqueID().toString(), s);
+        }
+
     }
 
-    protected void bi() {
+    protected void tickPotionEffects() {
         Iterator iterator = this.effects.keySet().iterator();
 
         while (iterator.hasNext()) {
-            Integer integer = (Integer) iterator.next();
-            MobEffect mobeffect = (MobEffect) this.effects.get(integer);
+            MobEffectList mobeffectlist = (MobEffectList) iterator.next();
+            MobEffect mobeffect = (MobEffect) this.effects.get(mobeffectlist);
 
             if (!mobeffect.tick(this)) {
                 if (!this.world.isClientSide) {
@@ -418,14 +455,14 @@
 
         if (this.updateEffects) {
             if (!this.world.isClientSide) {
-                this.B();
+                this.F();
             }
 
             this.updateEffects = false;
         }
 
-        int i = this.datawatcher.getInt(7);
-        boolean flag = this.datawatcher.getByte(8) > 0;
+        int i = ((Integer) this.datawatcher.get(EntityLiving.f)).intValue();
+        boolean flag = ((Boolean) this.datawatcher.get(EntityLiving.g)).booleanValue();
 
         if (i > 0) {
             boolean flag1 = false;
@@ -451,64 +488,75 @@
 
     }
 
-    protected void B() {
+    protected void F() {
         if (this.effects.isEmpty()) {
-            this.bj();
+            this.bM();
             this.setInvisible(false);
         } else {
-            int i = PotionBrewer.a(this.effects.values());
+            Collection collection = this.effects.values();
 
-            this.datawatcher.watch(8, Byte.valueOf((byte) (PotionBrewer.b(this.effects.values()) ? 1 : 0)));
-            this.datawatcher.watch(7, Integer.valueOf(i));
-            this.setInvisible(this.hasEffect(MobEffectList.INVISIBILITY.id));
+            this.datawatcher.set(EntityLiving.g, Boolean.valueOf(a(collection)));
+            this.datawatcher.set(EntityLiving.f, Integer.valueOf(PotionUtil.a(collection)));
+            this.setInvisible(this.hasEffect(MobEffects.INVISIBILITY));
         }
 
     }
 
-    protected void bj() {
-        this.datawatcher.watch(8, Byte.valueOf((byte) 0));
-        this.datawatcher.watch(7, Integer.valueOf(0));
+    public static boolean a(Collection<MobEffect> collection) {
+        Iterator iterator = collection.iterator();
+
+        MobEffect mobeffect;
+
+        do {
+            if (!iterator.hasNext()) {
+                return true;
+            }
+
+            mobeffect = (MobEffect) iterator.next();
+        } while (mobeffect.isAmbient());
+
+        return false;
     }
 
-    public void removeAllEffects() {
-        Iterator iterator = this.effects.keySet().iterator();
+    protected void bM() {
+        this.datawatcher.set(EntityLiving.g, Boolean.valueOf(false));
+        this.datawatcher.set(EntityLiving.f, Integer.valueOf(0));
+    }
 
-        while (iterator.hasNext()) {
-            Integer integer = (Integer) iterator.next();
-            MobEffect mobeffect = (MobEffect) this.effects.get(integer);
+    public void removeAllEffects() {
+        if (!this.world.isClientSide) {
+            Iterator iterator = this.effects.values().iterator();
 
-            if (!this.world.isClientSide) {
+            while (iterator.hasNext()) {
+                this.b((MobEffect) iterator.next());
                 iterator.remove();
-                this.b(mobeffect);
             }
-        }
 
+        }
     }
 
     public Collection<MobEffect> getEffects() {
         return this.effects.values();
     }
 
-    public boolean hasEffect(int i) {
-        return this.effects.containsKey(Integer.valueOf(i));
-    }
-
     public boolean hasEffect(MobEffectList mobeffectlist) {
-        return this.effects.containsKey(Integer.valueOf(mobeffectlist.id));
+        return this.effects.containsKey(mobeffectlist);
     }
 
     public MobEffect getEffect(MobEffectList mobeffectlist) {
-        return (MobEffect) this.effects.get(Integer.valueOf(mobeffectlist.id));
+        return (MobEffect) this.effects.get(mobeffectlist);
     }
 
     public void addEffect(MobEffect mobeffect) {
         if (this.d(mobeffect)) {
-            if (this.effects.containsKey(Integer.valueOf(mobeffect.getEffectId()))) {
-                ((MobEffect) this.effects.get(Integer.valueOf(mobeffect.getEffectId()))).a(mobeffect);
-                this.a((MobEffect) this.effects.get(Integer.valueOf(mobeffect.getEffectId())), true);
-            } else {
-                this.effects.put(Integer.valueOf(mobeffect.getEffectId()), mobeffect);
+            MobEffect mobeffect1 = (MobEffect) this.effects.get(mobeffect.getMobEffect());
+
+            if (mobeffect1 == null) {
+                this.effects.put(mobeffect.getMobEffect(), mobeffect);
                 this.a(mobeffect);
+            } else {
+                mobeffect1.a(mobeffect);
+                this.a(mobeffect1, true);
             }
 
         }
@@ -516,9 +564,9 @@
 
     public boolean d(MobEffect mobeffect) {
         if (this.getMonsterType() == EnumMonsterType.UNDEAD) {
-            int i = mobeffect.getEffectId();
+            MobEffectList mobeffectlist = mobeffect.getMobEffect();
 
-            if (i == MobEffectList.REGENERATION.id || i == MobEffectList.POISON.id) {
+            if (mobeffectlist == MobEffects.REGENERATION || mobeffectlist == MobEffects.POISON) {
                 return false;
             }
         }
@@ -526,12 +574,16 @@
         return true;
     }
 
-    public boolean bm() {
+    public boolean bP() {
         return this.getMonsterType() == EnumMonsterType.UNDEAD;
     }
 
-    public void removeEffect(int i) {
-        MobEffect mobeffect = (MobEffect) this.effects.remove(Integer.valueOf(i));
+    public MobEffect c(MobEffectList mobeffectlist) {
+        return (MobEffect) this.effects.remove(mobeffectlist);
+    }
+
+    public void removeEffect(MobEffectList mobeffectlist) {
+        MobEffect mobeffect = this.c(mobeffectlist);
 
         if (mobeffect != null) {
             this.b(mobeffect);
@@ -542,7 +594,7 @@
     protected void a(MobEffect mobeffect) {
         this.updateEffects = true;
         if (!this.world.isClientSide) {
-            MobEffectList.byId[mobeffect.getEffectId()].b(this, this.getAttributeMap(), mobeffect.getAmplifier());
+            mobeffect.getMobEffect().b(this, this.getAttributeMap(), mobeffect.getAmplifier());
         }
 
     }
@@ -550,8 +602,10 @@
     protected void a(MobEffect mobeffect, boolean flag) {
         this.updateEffects = true;
         if (flag && !this.world.isClientSide) {
-            MobEffectList.byId[mobeffect.getEffectId()].a(this, this.getAttributeMap(), mobeffect.getAmplifier());
-            MobEffectList.byId[mobeffect.getEffectId()].b(this, this.getAttributeMap(), mobeffect.getAmplifier());
+            MobEffectList mobeffectlist = mobeffect.getMobEffect();
+
+            mobeffectlist.a(this, this.getAttributeMap(), mobeffect.getAmplifier());
+            mobeffectlist.b(this, this.getAttributeMap(), mobeffect.getAmplifier());
         }
 
     }
@@ -559,7 +613,7 @@
     protected void b(MobEffect mobeffect) {
         this.updateEffects = true;
         if (!this.world.isClientSide) {
-            MobEffectList.byId[mobeffect.getEffectId()].a(this, this.getAttributeMap(), mobeffect.getAmplifier());
+            mobeffect.getMobEffect().a(this, this.getAttributeMap(), mobeffect.getAmplifier());
         }
 
     }
@@ -574,11 +628,11 @@
     }
 
     public final float getHealth() {
-        return this.datawatcher.getFloat(6);
+        return ((Float) this.datawatcher.get(EntityLiving.HEALTH)).floatValue();
     }
 
     public void setHealth(float f) {
-        this.datawatcher.watch(6, Float.valueOf(MathHelper.a(f, 0.0F, this.getMaxHealth())));
+        this.datawatcher.set(EntityLiving.HEALTH, Float.valueOf(MathHelper.a(f, 0.0F, this.getMaxHealth())));
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
@@ -590,38 +644,54 @@
             this.ticksFarFromPlayer = 0;
             if (this.getHealth() <= 0.0F) {
                 return false;
-            } else if (damagesource.o() && this.hasEffect(MobEffectList.FIRE_RESISTANCE)) {
+            } else if (damagesource.o() && this.hasEffect(MobEffects.FIRE_RESISTANCE)) {
                 return false;
             } else {
-                if ((damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && this.getEquipment(4) != null) {
-                    this.getEquipment(4).damage((int) (f * 4.0F + this.random.nextFloat() * f * 2.0F), this);
+                if ((damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && this.getEquipment(EnumItemSlot.HEAD) != null) {
+                    this.getEquipment(EnumItemSlot.HEAD).damage((int) (f * 4.0F + this.random.nextFloat() * f * 2.0F), this);
                     f *= 0.75F;
                 }
 
-                this.aB = 1.5F;
-                boolean flag = true;
+                boolean flag = false;
+
+                if (f > 0.0F && this.d(damagesource)) {
+                    this.k(f);
+                    if (damagesource.a()) {
+                        f = 0.0F;
+                    } else {
+                        f *= 0.33F;
+                        if (damagesource.i() instanceof EntityLiving) {
+                            ((EntityLiving) damagesource.i()).a(this, 0.5F, this.locX - damagesource.i().locX, this.locZ - damagesource.i().locZ);
+                        }
+                    }
+
+                    flag = true;
+                }
+
+                this.aF = 1.5F;
+                boolean flag1 = true;
 
                 if ((float) this.noDamageTicks > (float) this.maxNoDamageTicks / 2.0F) {
                     if (f <= this.lastDamage) {
                         return false;
                     }
 
-                    this.d(damagesource, f - this.lastDamage);
+                    this.damageEntity0(damagesource, f - this.lastDamage);
                     this.lastDamage = f;
-                    flag = false;
+                    flag1 = false;
                 } else {
                     this.lastDamage = f;
                     this.noDamageTicks = this.maxNoDamageTicks;
-                    this.d(damagesource, f);
-                    this.hurtTicks = this.av = 10;
+                    this.damageEntity0(damagesource, f);
+                    this.hurtTicks = this.ay = 10;
                 }
 
-                this.aw = 0.0F;
+                this.az = 0.0F;
                 Entity entity = damagesource.getEntity();
 
                 if (entity != null) {
                     if (entity instanceof EntityLiving) {
-                        this.b((EntityLiving) entity);
+                        this.a((EntityLiving) entity);
                     }
 
                     if (entity instanceof EntityHuman) {
@@ -637,10 +707,17 @@
                     }
                 }
 
-                if (flag) {
-                    this.world.broadcastEntityEffect(this, (byte) 2);
-                    if (damagesource != DamageSource.DROWN) {
-                        this.ac();
+                if (flag1) {
+                    if (flag) {
+                        this.world.broadcastEntityEffect(this, (byte) 29);
+                    } else if (damagesource instanceof EntityDamageSource && ((EntityDamageSource) damagesource).x()) {
+                        this.world.broadcastEntityEffect(this, (byte) 33);
+                    } else {
+                        this.world.broadcastEntityEffect(this, (byte) 2);
+                    }
+
+                    if (damagesource != DamageSource.DROWN && (!flag || f > 0.0F)) {
+                        this.ao();
                     }
 
                     if (entity != null) {
@@ -652,126 +729,176 @@
                             d0 = (Math.random() - Math.random()) * 0.01D;
                         }
 
-                        this.aw = (float) (MathHelper.b(d1, d0) * 180.0D / 3.1415927410125732D - (double) this.yaw);
-                        this.a(entity, f, d0, d1);
+                        this.az = (float) (MathHelper.b(d1, d0) * 57.2957763671875D - (double) this.yaw);
+                        this.a(entity, 0.4F, d0, d1);
                     } else {
-                        this.aw = (float) ((int) (Math.random() * 2.0D) * 180);
+                        this.az = (float) ((int) (Math.random() * 2.0D) * 180);
                     }
                 }
 
-                String s;
-
                 if (this.getHealth() <= 0.0F) {
-                    s = this.bp();
-                    if (flag && s != null) {
-                        this.makeSound(s, this.bB(), this.bC());
+                    SoundEffect soundeffect = this.bS();
+
+                    if (flag1 && soundeffect != null) {
+                        this.a(soundeffect, this.cd(), this.ce());
                     }
 
                     this.die(damagesource);
-                } else {
-                    s = this.bo();
-                    if (flag && s != null) {
-                        this.makeSound(s, this.bB(), this.bC());
-                    }
+                } else if (flag1) {
+                    this.c(damagesource);
                 }
 
-                return true;
+                return !flag || f > 0.0F;
             }
         }
     }
 
+    protected void c(DamageSource damagesource) {
+        SoundEffect soundeffect = this.bR();
+
+        if (soundeffect != null) {
+            this.a(soundeffect, this.cd(), this.ce());
+        }
+
+    }
+
+    private boolean d(DamageSource damagesource) {
+        if (!damagesource.ignoresArmor() && this.isBlocking()) {
+            Vec3D vec3d = damagesource.v();
+
+            if (vec3d != null) {
+                Vec3D vec3d1 = this.f(1.0F);
+                Vec3D vec3d2 = vec3d.a(new Vec3D(this.locX, this.locY, this.locZ)).a();
+
+                vec3d2 = new Vec3D(vec3d2.x, 0.0D, vec3d2.z);
+                if (vec3d2.b(vec3d1) < 0.0D) {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
     public void b(ItemStack itemstack) {
-        this.makeSound("random.break", 0.8F, 0.8F + this.world.random.nextFloat() * 0.4F);
+        this.a(SoundEffects.cT, 0.8F, 0.8F + this.world.random.nextFloat() * 0.4F);
 
         for (int i = 0; i < 5; ++i) {
             Vec3D vec3d = new Vec3D(((double) this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
 
-            vec3d = vec3d.a(-this.pitch * 3.1415927F / 180.0F);
-            vec3d = vec3d.b(-this.yaw * 3.1415927F / 180.0F);
+            vec3d = vec3d.a(-this.pitch * 0.017453292F);
+            vec3d = vec3d.b(-this.yaw * 0.017453292F);
             double d0 = (double) (-this.random.nextFloat()) * 0.6D - 0.3D;
             Vec3D vec3d1 = new Vec3D(((double) this.random.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
 
-            vec3d1 = vec3d1.a(-this.pitch * 3.1415927F / 180.0F);
-            vec3d1 = vec3d1.b(-this.yaw * 3.1415927F / 180.0F);
+            vec3d1 = vec3d1.a(-this.pitch * 0.017453292F);
+            vec3d1 = vec3d1.b(-this.yaw * 0.017453292F);
             vec3d1 = vec3d1.add(this.locX, this.locY + (double) this.getHeadHeight(), this.locZ);
-            this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.a, vec3d1.b, vec3d1.c, vec3d.a, vec3d.b + 0.05D, vec3d.c, new int[] { Item.getId(itemstack.getItem())});
+            this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z, new int[] { Item.getId(itemstack.getItem())});
         }
 
     }
 
     public void die(DamageSource damagesource) {
-        Entity entity = damagesource.getEntity();
-        EntityLiving entityliving = this.bt();
+        if (!this.aT) {
+            Entity entity = damagesource.getEntity();
+            EntityLiving entityliving = this.bV();
 
-        if (this.aW >= 0 && entityliving != null) {
-            entityliving.b(this, this.aW);
-        }
+            if (this.ba >= 0 && entityliving != null) {
+                entityliving.b(this, this.ba);
+            }
 
-        if (entity != null) {
-            entity.a(this);
-        }
+            if (entity != null) {
+                entity.b(this);
+            }
 
-        this.aP = true;
-        this.bs().g();
-        if (!this.world.isClientSide) {
-            int i = 0;
+            this.aT = true;
+            this.getCombatTracker().g();
+            if (!this.world.isClientSide) {
+                int i = 0;
 
-            if (entity instanceof EntityHuman) {
-                i = EnchantmentManager.getBonusMonsterLootEnchantmentLevel((EntityLiving) entity);
-            }
+                if (entity instanceof EntityHuman) {
+                    i = EnchantmentManager.h((EntityLiving) entity);
+                }
+
+                if (this.isDropExperience() && this.world.getGameRules().getBoolean("doMobLoot")) {
+                    boolean flag = this.lastDamageByPlayerTime > 0;
 
-            if (this.ba() && this.world.getGameRules().getBoolean("doMobLoot")) {
-                this.dropDeathLoot(this.lastDamageByPlayerTime > 0, i);
-                this.dropEquipment(this.lastDamageByPlayerTime > 0, i);
-                if (this.lastDamageByPlayerTime > 0 && this.random.nextFloat() < 0.025F + (float) i * 0.01F) {
-                    this.getRareDrop();
+                    this.a(flag, i, damagesource);
                 }
             }
+
+            this.world.broadcastEntityEffect(this, (byte) 3);
         }
+    }
 
-        this.world.broadcastEntityEffect(this, (byte) 3);
+    protected void a(boolean flag, int i, DamageSource damagesource) {
+        this.dropDeathLoot(flag, i);
+        this.dropEquipment(flag, i);
     }
 
     protected void dropEquipment(boolean flag, int i) {}
 
     public void a(Entity entity, float f, double d0, double d1) {
         if (this.random.nextDouble() >= this.getAttributeInstance(GenericAttributes.c).getValue()) {
-            this.ai = true;
+            this.impulse = true;
             float f1 = MathHelper.sqrt(d0 * d0 + d1 * d1);
-            float f2 = 0.4F;
 
             this.motX /= 2.0D;
-            this.motY /= 2.0D;
             this.motZ /= 2.0D;
-            this.motX -= d0 / (double) f1 * (double) f2;
-            this.motY += (double) f2;
-            this.motZ -= d1 / (double) f1 * (double) f2;
-            if (this.motY > 0.4000000059604645D) {
-                this.motY = 0.4000000059604645D;
+            this.motX -= d0 / (double) f1 * (double) f;
+            this.motZ -= d1 / (double) f1 * (double) f;
+            if (this.onGround) {
+                this.motY /= 2.0D;
+                this.motY += (double) f;
+                if (this.motY > 0.4000000059604645D) {
+                    this.motY = 0.4000000059604645D;
+                }
             }
 
         }
     }
 
-    protected String bo() {
-        return "game.neutral.hurt";
+    protected SoundEffect bR() {
+        return SoundEffects.bF;
     }
 
-    protected String bp() {
-        return "game.neutral.die";
+    protected SoundEffect bS() {
+        return SoundEffects.bA;
     }
 
-    protected void getRareDrop() {}
+    protected SoundEffect e(int i) {
+        return i > 4 ? SoundEffects.by : SoundEffects.bG;
+    }
 
     protected void dropDeathLoot(boolean flag, int i) {}
 
-    public boolean k_() {
+    public boolean n_() {
         int i = MathHelper.floor(this.locX);
         int j = MathHelper.floor(this.getBoundingBox().b);
         int k = MathHelper.floor(this.locZ);
-        Block block = this.world.getType(new BlockPosition(i, j, k)).getBlock();
 
-        return (block == Blocks.LADDER || block == Blocks.VINE) && (!(this instanceof EntityHuman) || !((EntityHuman) this).isSpectator());
+        if (this instanceof EntityHuman && ((EntityHuman) this).isSpectator()) {
+            return false;
+        } else {
+            BlockPosition blockposition = new BlockPosition(i, j, k);
+            IBlockData iblockdata = this.world.getType(blockposition);
+            Block block = iblockdata.getBlock();
+
+            return block != Blocks.LADDER && block != Blocks.VINE ? block instanceof BlockTrapdoor && this.a(blockposition, iblockdata) : true;
+        }
+    }
+
+    private boolean a(BlockPosition blockposition, IBlockData iblockdata) {
+        if (((Boolean) iblockdata.get(BlockTrapdoor.OPEN)).booleanValue()) {
+            IBlockData iblockdata1 = this.world.getType(blockposition.down());
+
+            if (iblockdata1.getBlock() == Blocks.LADDER && iblockdata1.get(BlockLadder.FACING) == iblockdata.get(BlockTrapdoor.FACING)) {
+                return true;
+            }
+        }
+
+        return false;
     }
 
     public boolean isAlive() {
@@ -780,58 +907,41 @@
 
     public void e(float f, float f1) {
         super.e(f, f1);
-        MobEffect mobeffect = this.getEffect(MobEffectList.JUMP);
-        float f2 = mobeffect != null ? (float) (mobeffect.getAmplifier() + 1) : 0.0F;
+        MobEffect mobeffect = this.getEffect(MobEffects.JUMP);
+        float f2 = mobeffect == null ? 0.0F : (float) (mobeffect.getAmplifier() + 1);
         int i = MathHelper.f((f - 3.0F - f2) * f1);
 
         if (i > 0) {
-            this.makeSound(this.n(i), 1.0F, 1.0F);
+            this.a(this.e(i), 1.0F, 1.0F);
             this.damageEntity(DamageSource.FALL, (float) i);
             int j = MathHelper.floor(this.locX);
             int k = MathHelper.floor(this.locY - 0.20000000298023224D);
             int l = MathHelper.floor(this.locZ);
-            Block block = this.world.getType(new BlockPosition(j, k, l)).getBlock();
+            IBlockData iblockdata = this.world.getType(new BlockPosition(j, k, l));
 
-            if (block.getMaterial() != Material.AIR) {
-                Block.StepSound block_stepsound = block.stepSound;
+            if (iblockdata.getMaterial() != Material.AIR) {
+                SoundEffectType soundeffecttype = iblockdata.getBlock().w();
 
-                this.makeSound(block_stepsound.getStepSound(), block_stepsound.getVolume1() * 0.5F, block_stepsound.getVolume2() * 0.75F);
+                this.a(soundeffecttype.g(), soundeffecttype.a() * 0.5F, soundeffecttype.b() * 0.75F);
             }
         }
 
     }
 
-    protected String n(int i) {
-        return i > 4 ? "game.neutral.hurt.fall.big" : "game.neutral.hurt.fall.small";
-    }
-
-    public int br() {
-        int i = 0;
-        ItemStack[] aitemstack = this.getEquipment();
-        int j = aitemstack.length;
+    public int getArmorStrength() {
+        AttributeInstance attributeinstance = this.getAttributeInstance(GenericAttributes.g);
 
-        for (int k = 0; k < j; ++k) {
-            ItemStack itemstack = aitemstack[k];
-
-            if (itemstack != null && itemstack.getItem() instanceof ItemArmor) {
-                int l = ((ItemArmor) itemstack.getItem()).c;
-
-                i += l;
-            }
-        }
-
-        return i;
+        return MathHelper.floor(attributeinstance.getValue());
     }
 
     protected void damageArmor(float f) {}
 
+    protected void k(float f) {}
+
     protected float applyArmorModifier(DamageSource damagesource, float f) {
         if (!damagesource.ignoresArmor()) {
-            int i = 25 - this.br();
-            float f1 = f * (float) i;
-
             this.damageArmor(f);
-            f = f1 / 25.0F;
+            f = CombatMath.a(f, (float) this.getArmorStrength());
         }
 
         return f;
@@ -842,28 +952,21 @@
             return f;
         } else {
             int i;
-            int j;
-            float f1;
 
-            if (this.hasEffect(MobEffectList.RESISTANCE) && damagesource != DamageSource.OUT_OF_WORLD) {
-                i = (this.getEffect(MobEffectList.RESISTANCE).getAmplifier() + 1) * 5;
-                j = 25 - i;
-                f1 = f * (float) j;
+            if (this.hasEffect(MobEffects.RESISTANCE) && damagesource != DamageSource.OUT_OF_WORLD) {
+                i = (this.getEffect(MobEffects.RESISTANCE).getAmplifier() + 1) * 5;
+                int j = 25 - i;
+                float f1 = f * (float) j;
+
                 f = f1 / 25.0F;
             }
 
             if (f <= 0.0F) {
                 return 0.0F;
             } else {
-                i = EnchantmentManager.a(this.getEquipment(), damagesource);
-                if (i > 20) {
-                    i = 20;
-                }
-
-                if (i > 0 && i <= 20) {
-                    j = 25 - i;
-                    f1 = f * (float) j;
-                    f = f1 / 25.0F;
+                i = EnchantmentManager.a(this.getArmorItems(), damagesource);
+                if (i > 0) {
+                    f = CombatMath.b(f, (float) i);
                 }
 
                 return f;
@@ -871,7 +974,7 @@
         }
     }
 
-    protected void d(DamageSource damagesource, float f) {
+    protected void damageEntity0(DamageSource damagesource, float f) {
         if (!this.isInvulnerable(damagesource)) {
             f = this.applyArmorModifier(damagesource, f);
             f = this.applyMagicModifier(damagesource, f);
@@ -883,17 +986,17 @@
                 float f2 = this.getHealth();
 
                 this.setHealth(f2 - f);
-                this.bs().a(damagesource, f2, f);
+                this.getCombatTracker().trackDamage(damagesource, f2, f);
                 this.setAbsorptionHearts(this.getAbsorptionHearts() - f);
             }
         }
     }
 
-    public CombatTracker bs() {
+    public CombatTracker getCombatTracker() {
         return this.combatTracker;
     }
 
-    public EntityLiving bt() {
+    public EntityLiving bV() {
         return (EntityLiving) (this.combatTracker.c() != null ? this.combatTracker.c() : (this.killer != null ? this.killer : (this.lastDamager != null ? this.lastDamager : null)));
     }
 
@@ -901,47 +1004,48 @@
         return (float) this.getAttributeInstance(GenericAttributes.maxHealth).getValue();
     }
 
-    public final int bv() {
-        return this.datawatcher.getByte(9);
+    public final int bX() {
+        return ((Integer) this.datawatcher.get(EntityLiving.h)).intValue();
     }
 
-    public final void o(int i) {
-        this.datawatcher.watch(9, Byte.valueOf((byte) i));
+    public final void k(int i) {
+        this.datawatcher.set(EntityLiving.h, Integer.valueOf(i));
     }
 
-    private int n() {
-        return this.hasEffect(MobEffectList.FASTER_DIG) ? 6 - (1 + this.getEffect(MobEffectList.FASTER_DIG).getAmplifier()) * 1 : (this.hasEffect(MobEffectList.SLOWER_DIG) ? 6 + (1 + this.getEffect(MobEffectList.SLOWER_DIG).getAmplifier()) * 2 : 6);
+    private int o() {
+        return this.hasEffect(MobEffects.FASTER_DIG) ? 6 - (1 + this.getEffect(MobEffects.FASTER_DIG).getAmplifier()) : (this.hasEffect(MobEffects.SLOWER_DIG) ? 6 + (1 + this.getEffect(MobEffects.SLOWER_DIG).getAmplifier()) * 2 : 6);
     }
 
-    public void bw() {
-        if (!this.ar || this.as >= this.n() / 2 || this.as < 0) {
-            this.as = -1;
-            this.ar = true;
+    public void a(EnumHand enumhand) {
+        if (!this.at || this.av >= this.o() / 2 || this.av < 0) {
+            this.av = -1;
+            this.at = true;
+            this.au = enumhand;
             if (this.world instanceof WorldServer) {
-                ((WorldServer) this.world).getTracker().a((Entity) this, (Packet) (new PacketPlayOutAnimation(this, 0)));
+                ((WorldServer) this.world).getTracker().a((Entity) this, (Packet) (new PacketPlayOutAnimation(this, enumhand == EnumHand.MAIN_HAND ? 0 : 3)));
             }
         }
 
     }
 
-    protected void O() {
+    protected void Y() {
         this.damageEntity(DamageSource.OUT_OF_WORLD, 4.0F);
     }
 
-    protected void bx() {
-        int i = this.n();
+    protected void bY() {
+        int i = this.o();
 
-        if (this.ar) {
-            ++this.as;
-            if (this.as >= i) {
-                this.as = 0;
-                this.ar = false;
+        if (this.at) {
+            ++this.av;
+            if (this.av >= i) {
+                this.av = 0;
+                this.at = false;
             }
         } else {
-            this.as = 0;
+            this.av = 0;
         }
 
-        this.az = (float) this.as / (float) i;
+        this.aC = (float) this.av / (float) i;
     }
 
     public AttributeInstance getAttributeInstance(IAttribute iattribute) {
@@ -949,22 +1053,53 @@
     }
 
     public AttributeMapBase getAttributeMap() {
-        if (this.c == null) {
-            this.c = new AttributeMapServer();
+        if (this.bp == null) {
+            this.bp = new AttributeMapServer();
         }
 
-        return this.c;
+        return this.bp;
     }
 
     public EnumMonsterType getMonsterType() {
         return EnumMonsterType.UNDEFINED;
     }
 
-    public abstract ItemStack bA();
+    public ItemStack getItemInMainHand() {
+        return this.getEquipment(EnumItemSlot.MAINHAND);
+    }
 
-    public abstract ItemStack getEquipment(int i);
+    public ItemStack getItemInOffHand() {
+        return this.getEquipment(EnumItemSlot.OFFHAND);
+    }
 
-    public abstract void setEquipment(int i, ItemStack itemstack);
+    public ItemStack b(EnumHand enumhand) {
+        if (enumhand == EnumHand.MAIN_HAND) {
+            return this.getEquipment(EnumItemSlot.MAINHAND);
+        } else if (enumhand == EnumHand.OFF_HAND) {
+            return this.getEquipment(EnumItemSlot.OFFHAND);
+        } else {
+            throw new IllegalArgumentException("Invalid hand " + enumhand);
+        }
+    }
+
+    public void a(EnumHand enumhand, ItemStack itemstack) {
+        if (enumhand == EnumHand.MAIN_HAND) {
+            this.setSlot(EnumItemSlot.MAINHAND, itemstack);
+        } else {
+            if (enumhand != EnumHand.OFF_HAND) {
+                throw new IllegalArgumentException("Invalid hand " + enumhand);
+            }
+
+            this.setSlot(EnumItemSlot.OFFHAND, itemstack);
+        }
+
+    }
+
+    public abstract Iterable<ItemStack> getArmorItems();
+
+    public abstract ItemStack getEquipment(EnumItemSlot enumitemslot);
+
+    public abstract void setSlot(EnumItemSlot enumitemslot, ItemStack itemstack);
 
     public void setSprinting(boolean flag) {
         super.setSprinting(flag);
@@ -980,60 +1115,101 @@
 
     }
 
-    public abstract ItemStack[] getEquipment();
-
-    protected float bB() {
+    protected float cd() {
         return 1.0F;
     }
 
-    protected float bC() {
+    protected float ce() {
         return this.isBaby() ? (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.5F : (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F;
     }
 
-    protected boolean bD() {
+    protected boolean cf() {
         return this.getHealth() <= 0.0F;
     }
 
-    public void q(Entity entity) {
-        double d0 = entity.locX;
-        double d1 = entity.getBoundingBox().b + (double) entity.length;
-        double d2 = entity.locZ;
-        byte b0 = 1;
-
-        for (int i = -b0; i <= b0; ++i) {
-            for (int j = -b0; j < b0; ++j) {
-                if (i != 0 || j != 0) {
-                    int k = (int) (this.locX + (double) i);
-                    int l = (int) (this.locZ + (double) j);
-                    AxisAlignedBB axisalignedbb = this.getBoundingBox().c((double) i, 1.0D, (double) j);
-
-                    if (this.world.a(axisalignedbb).isEmpty()) {
-                        if (World.a((IBlockAccess) this.world, new BlockPosition(k, (int) this.locY, l))) {
-                            this.enderTeleportTo(this.locX + (double) i, this.locY + 1.0D, this.locZ + (double) j);
-                            return;
-                        }
+    public void A(Entity entity) {
+        double d0;
 
-                        if (World.a((IBlockAccess) this.world, new BlockPosition(k, (int) this.locY - 1, l)) || this.world.getType(new BlockPosition(k, (int) this.locY - 1, l)).getBlock().getMaterial() == Material.WATER) {
-                            d0 = this.locX + (double) i;
-                            d1 = this.locY + 1.0D;
-                            d2 = this.locZ + (double) j;
-                        }
+        if (!(entity instanceof EntityBoat) && !(entity instanceof EntityHorse)) {
+            double d1 = entity.locX;
+            double d2 = entity.getBoundingBox().b + (double) entity.length;
+
+            d0 = entity.locZ;
+            EnumDirection enumdirection = entity.bj();
+            EnumDirection enumdirection1 = enumdirection.e();
+            int[][] aint = new int[][] { { 0, 1}, { 0, -1}, { -1, 1}, { -1, -1}, { 1, 1}, { 1, -1}, { -1, 0}, { 1, 0}, { 0, 1}};
+            double d3 = Math.floor(this.locX) + 0.5D;
+            double d4 = Math.floor(this.locZ) + 0.5D;
+            double d5 = this.getBoundingBox().d - this.getBoundingBox().a;
+            double d6 = this.getBoundingBox().f - this.getBoundingBox().c;
+            AxisAlignedBB axisalignedbb = new AxisAlignedBB(d3 - d5 / 2.0D, this.getBoundingBox().b, d4 - d6 / 2.0D, d3 + d5 / 2.0D, this.getBoundingBox().e, d4 + d6 / 2.0D);
+            int[][] aint1 = aint;
+            int i = aint.length;
+
+            for (int j = 0; j < i; ++j) {
+                int[] aint2 = aint1[j];
+                double d7 = (double) (enumdirection.getAdjacentX() * aint2[0] + enumdirection1.getAdjacentX() * aint2[1]);
+                double d8 = (double) (enumdirection.getAdjacentZ() * aint2[0] + enumdirection1.getAdjacentZ() * aint2[1]);
+                double d9 = d3 + d7;
+                double d10 = d4 + d8;
+                AxisAlignedBB axisalignedbb1 = axisalignedbb.c(d7, 1.0D, d8);
+
+                if (!this.world.b(axisalignedbb1)) {
+                    if (this.world.getType(new BlockPosition(d9, this.locY, d10)).q()) {
+                        this.enderTeleportTo(d9, this.locY + 1.0D, d10);
+                        return;
                     }
+
+                    BlockPosition blockposition = new BlockPosition(d9, this.locY - 1.0D, d10);
+
+                    if (this.world.getType(blockposition).q() || this.world.getType(blockposition).getMaterial() == Material.WATER) {
+                        d1 = d9;
+                        d2 = this.locY + 1.0D;
+                        d0 = d10;
+                    }
+                } else if (!this.world.b(axisalignedbb1.c(0.0D, 1.0D, 0.0D)) && this.world.getType(new BlockPosition(d9, this.locY + 1.0D, d10)).q()) {
+                    d1 = d9;
+                    d2 = this.locY + 2.0D;
+                    d0 = d10;
                 }
             }
-        }
 
-        this.enderTeleportTo(d0, d1, d2);
+            this.enderTeleportTo(d1, d2, d0);
+        } else {
+            double d11 = (double) (this.width / 2.0F + entity.width / 2.0F) + 0.4D;
+            float f;
+
+            if (entity instanceof EntityBoat) {
+                f = 0.0F;
+            } else {
+                f = 1.5707964F * (float) (this.cr() == EnumMainHand.RIGHT ? -1 : 1);
+            }
+
+            float f1 = -MathHelper.sin(-this.yaw * 0.017453292F - 3.1415927F + f);
+            float f2 = -MathHelper.cos(-this.yaw * 0.017453292F - 3.1415927F + f);
+
+            d0 = Math.abs(f1) > Math.abs(f2) ? d11 / (double) Math.abs(f1) : d11 / (double) Math.abs(f2);
+            double d12 = this.locX + (double) f1 * d0;
+            double d13 = this.locZ + (double) f2 * d0;
+
+            this.setPosition(d12, entity.locY + (double) entity.length + 0.001D, d13);
+            if (this.world.b(this.getBoundingBox())) {
+                this.setPosition(d12, entity.locY + (double) entity.length + 1.001D, d13);
+                if (this.world.b(this.getBoundingBox())) {
+                    this.setPosition(entity.locX, entity.locY + (double) this.length + 0.001D, entity.locZ);
+                }
+            }
+        }
     }
 
-    protected float bE() {
+    protected float cg() {
         return 0.42F;
     }
 
-    protected void bF() {
-        this.motY = (double) this.bE();
-        if (this.hasEffect(MobEffectList.JUMP)) {
-            this.motY += (double) ((float) (this.getEffect(MobEffectList.JUMP).getAmplifier() + 1) * 0.1F);
+    protected void ch() {
+        this.motY = (double) this.cg();
+        if (this.hasEffect(MobEffects.JUMP)) {
+            this.motY += (double) ((float) (this.getEffect(MobEffects.JUMP).getAmplifier() + 1) * 0.1F);
         }
 
         if (this.isSprinting()) {
@@ -1043,30 +1219,31 @@
             this.motZ += (double) (MathHelper.cos(f) * 0.2F);
         }
 
-        this.ai = true;
+        this.impulse = true;
     }
 
-    protected void bG() {
+    protected void ci() {
         this.motY += 0.03999999910593033D;
     }
 
-    protected void bH() {
+    protected void cj() {
         this.motY += 0.03999999910593033D;
     }
 
     public void g(float f, float f1) {
         double d0;
+        double d1;
         float f2;
 
-        if (this.bM()) {
+        if (this.co() || this.bx()) {
             float f3;
             float f4;
 
-            if (this.V() && (!(this instanceof EntityHuman) || !((EntityHuman) this).abilities.isFlying)) {
-                d0 = this.locY;
-                f3 = 0.8F;
-                f4 = 0.02F;
-                f2 = (float) EnchantmentManager.b(this);
+            if (this.isInWater() && (!(this instanceof EntityHuman) || !((EntityHuman) this).abilities.isFlying)) {
+                d1 = this.locY;
+                f4 = 0.8F;
+                f3 = 0.02F;
+                f2 = (float) EnchantmentManager.d(this);
                 if (f2 > 3.0F) {
                     f2 = 3.0F;
                 }
@@ -1076,55 +1253,109 @@
                 }
 
                 if (f2 > 0.0F) {
-                    f3 += (0.54600006F - f3) * f2 / 3.0F;
-                    f4 += (this.bI() * 1.0F - f4) * f2 / 3.0F;
+                    f4 += (0.54600006F - f4) * f2 / 3.0F;
+                    f3 += (this.ck() - f3) * f2 / 3.0F;
                 }
 
-                this.a(f, f1, f4);
+                this.a(f, f1, f3);
                 this.move(this.motX, this.motY, this.motZ);
-                this.motX *= (double) f3;
+                this.motX *= (double) f4;
                 this.motY *= 0.800000011920929D;
-                this.motZ *= (double) f3;
+                this.motZ *= (double) f4;
                 this.motY -= 0.02D;
-                if (this.positionChanged && this.c(this.motX, this.motY + 0.6000000238418579D - this.locY + d0, this.motZ)) {
+                if (this.positionChanged && this.c(this.motX, this.motY + 0.6000000238418579D - this.locY + d1, this.motZ)) {
                     this.motY = 0.30000001192092896D;
                 }
-            } else if (this.ab() && (!(this instanceof EntityHuman) || !((EntityHuman) this).abilities.isFlying)) {
-                d0 = this.locY;
+            } else if (this.an() && (!(this instanceof EntityHuman) || !((EntityHuman) this).abilities.isFlying)) {
+                d1 = this.locY;
                 this.a(f, f1, 0.02F);
                 this.move(this.motX, this.motY, this.motZ);
                 this.motX *= 0.5D;
                 this.motY *= 0.5D;
                 this.motZ *= 0.5D;
                 this.motY -= 0.02D;
-                if (this.positionChanged && this.c(this.motX, this.motY + 0.6000000238418579D - this.locY + d0, this.motZ)) {
+                if (this.positionChanged && this.c(this.motX, this.motY + 0.6000000238418579D - this.locY + d1, this.motZ)) {
                     this.motY = 0.30000001192092896D;
                 }
+            } else if (this.cB()) {
+                if (this.motY > -0.5D) {
+                    this.fallDistance = 1.0F;
+                }
+
+                Vec3D vec3d = this.aB();
+                float f5 = this.pitch * 0.017453292F;
+
+                d0 = Math.sqrt(vec3d.x * vec3d.x + vec3d.z * vec3d.z);
+                double d2 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ);
+                double d3 = vec3d.b();
+                float f6 = MathHelper.cos(f5);
+
+                f6 = (float) ((double) f6 * (double) f6 * Math.min(1.0D, d3 / 0.4D));
+                this.motY += -0.08D + (double) f6 * 0.06D;
+                double d4;
+
+                if (this.motY < 0.0D && d0 > 0.0D) {
+                    d4 = this.motY * -0.1D * (double) f6;
+                    this.motY += d4;
+                    this.motX += vec3d.x * d4 / d0;
+                    this.motZ += vec3d.z * d4 / d0;
+                }
+
+                if (f5 < 0.0F) {
+                    d4 = d2 * (double) (-MathHelper.sin(f5)) * 0.04D;
+                    this.motY += d4 * 3.2D;
+                    this.motX -= vec3d.x * d4 / d0;
+                    this.motZ -= vec3d.z * d4 / d0;
+                }
+
+                if (d0 > 0.0D) {
+                    this.motX += (vec3d.x / d0 * d2 - this.motX) * 0.1D;
+                    this.motZ += (vec3d.z / d0 * d2 - this.motZ) * 0.1D;
+                }
+
+                this.motX *= 0.9900000095367432D;
+                this.motY *= 0.9800000190734863D;
+                this.motZ *= 0.9900000095367432D;
+                this.move(this.motX, this.motY, this.motZ);
+                if (this.positionChanged && !this.world.isClientSide) {
+                    d4 = Math.sqrt(this.motX * this.motX + this.motZ * this.motZ);
+                    double d5 = d2 - d4;
+                    float f7 = (float) (d5 * 10.0D - 3.0D);
+
+                    if (f7 > 0.0F) {
+                        this.a(this.e((int) f7), 1.0F, 1.0F);
+                        this.damageEntity(DamageSource.j, f7);
+                    }
+                }
+
+                if (this.onGround && !this.world.isClientSide) {
+                    this.setFlag(7, false);
+                }
             } else {
-                float f5 = 0.91F;
+                float f8 = 0.91F;
+                BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.c(this.locX, this.getBoundingBox().b - 1.0D, this.locZ);
 
                 if (this.onGround) {
-                    f5 = this.world.getType(new BlockPosition(MathHelper.floor(this.locX), MathHelper.floor(this.getBoundingBox().b) - 1, MathHelper.floor(this.locZ))).getBlock().frictionFactor * 0.91F;
+                    f8 = this.world.getType(blockposition_pooledblockposition).getBlock().frictionFactor * 0.91F;
                 }
 
-                float f6 = 0.16277136F / (f5 * f5 * f5);
-
+                f4 = 0.16277136F / (f8 * f8 * f8);
                 if (this.onGround) {
-                    f3 = this.bI() * f6;
+                    f3 = this.ck() * f4;
                 } else {
-                    f3 = this.aM;
+                    f3 = this.aQ;
                 }
 
                 this.a(f, f1, f3);
-                f5 = 0.91F;
+                f8 = 0.91F;
                 if (this.onGround) {
-                    f5 = this.world.getType(new BlockPosition(MathHelper.floor(this.locX), MathHelper.floor(this.getBoundingBox().b) - 1, MathHelper.floor(this.locZ))).getBlock().frictionFactor * 0.91F;
+                    f8 = this.world.getType(blockposition_pooledblockposition.d(this.locX, this.getBoundingBox().b - 1.0D, this.locZ)).getBlock().frictionFactor * 0.91F;
                 }
 
-                if (this.k_()) {
-                    f4 = 0.15F;
-                    this.motX = MathHelper.a(this.motX, (double) (-f4), (double) f4);
-                    this.motZ = MathHelper.a(this.motZ, (double) (-f4), (double) f4);
+                if (this.n_()) {
+                    f2 = 0.15F;
+                    this.motX = MathHelper.a(this.motX, (double) (-f2), (double) f2);
+                    this.motZ = MathHelper.a(this.motZ, (double) (-f2), (double) f2);
                     this.fallDistance = 0.0F;
                     if (this.motY < -0.15D) {
                         this.motY = -0.15D;
@@ -1138,49 +1369,54 @@
                 }
 
                 this.move(this.motX, this.motY, this.motZ);
-                if (this.positionChanged && this.k_()) {
+                if (this.positionChanged && this.n_()) {
                     this.motY = 0.2D;
                 }
 
-                if (this.world.isClientSide && (!this.world.isLoaded(new BlockPosition((int) this.locX, 0, (int) this.locZ)) || !this.world.getChunkAtWorldCoords(new BlockPosition((int) this.locX, 0, (int) this.locZ)).o())) {
-                    if (this.locY > 0.0D) {
-                        this.motY = -0.1D;
+                if (this.hasEffect(MobEffects.LEVITATION)) {
+                    this.motY += (0.05D * (double) (this.getEffect(MobEffects.LEVITATION).getAmplifier() + 1) - this.motY) * 0.2D;
+                } else {
+                    blockposition_pooledblockposition.d(this.locX, 0.0D, this.locZ);
+                    if (this.world.isClientSide && (!this.world.isLoaded(blockposition_pooledblockposition) || !this.world.getChunkAtWorldCoords(blockposition_pooledblockposition).p())) {
+                        if (this.locY > 0.0D) {
+                            this.motY = -0.1D;
+                        } else {
+                            this.motY = 0.0D;
+                        }
                     } else {
-                        this.motY = 0.0D;
+                        this.motY -= 0.08D;
                     }
-                } else {
-                    this.motY -= 0.08D;
                 }
 
                 this.motY *= 0.9800000190734863D;
-                this.motX *= (double) f5;
-                this.motZ *= (double) f5;
+                this.motX *= (double) f8;
+                this.motZ *= (double) f8;
+                blockposition_pooledblockposition.t();
             }
         }
 
-        this.aA = this.aB;
-        d0 = this.locX - this.lastX;
-        double d1 = this.locZ - this.lastZ;
-
-        f2 = MathHelper.sqrt(d0 * d0 + d1 * d1) * 4.0F;
+        this.aE = this.aF;
+        d1 = this.locX - this.lastX;
+        d0 = this.locZ - this.lastZ;
+        f2 = MathHelper.sqrt(d1 * d1 + d0 * d0) * 4.0F;
         if (f2 > 1.0F) {
             f2 = 1.0F;
         }
 
-        this.aB += (f2 - this.aB) * 0.4F;
-        this.aC += this.aB;
+        this.aF += (f2 - this.aF) * 0.4F;
+        this.aG += this.aF;
     }
 
-    public float bI() {
-        return this.bm;
+    public float ck() {
+        return this.bz;
     }
 
-    public void k(float f) {
-        this.bm = f;
+    public void l(float f) {
+        this.bz = f;
     }
 
-    public boolean r(Entity entity) {
-        this.p(entity);
+    public boolean B(Entity entity) {
+        this.z(entity);
         return false;
     }
 
@@ -1188,62 +1424,96 @@
         return false;
     }
 
-    public void t_() {
-        super.t_();
+    public void m() {
+        super.m();
+        this.cu();
         if (!this.world.isClientSide) {
-            int i = this.bv();
+            int i = this.bX();
 
             if (i > 0) {
-                if (this.at <= 0) {
-                    this.at = 20 * (30 - i);
+                if (this.aw <= 0) {
+                    this.aw = 20 * (30 - i);
                 }
 
-                --this.at;
-                if (this.at <= 0) {
-                    this.o(i - 1);
+                --this.aw;
+                if (this.aw <= 0) {
+                    this.k(i - 1);
                 }
             }
 
-            for (int j = 0; j < 5; ++j) {
-                ItemStack itemstack = this.h[j];
-                ItemStack itemstack1 = this.getEquipment(j);
+            EnumItemSlot[] aenumitemslot = EnumItemSlot.values();
+            int j = aenumitemslot.length;
+
+            for (int k = 0; k < j; ++k) {
+                EnumItemSlot enumitemslot = aenumitemslot[k];
+                ItemStack itemstack;
+
+                switch (EntityLiving.SyntheticClass_1.a[enumitemslot.a().ordinal()]) {
+                case 1:
+                    itemstack = this.bs[enumitemslot.b()];
+                    break;
+
+                case 2:
+                    itemstack = this.bt[enumitemslot.b()];
+                    break;
+
+                default:
+                    continue;
+                }
+
+                ItemStack itemstack1 = this.getEquipment(enumitemslot);
 
                 if (!ItemStack.matches(itemstack1, itemstack)) {
-                    ((WorldServer) this.world).getTracker().a((Entity) this, (Packet) (new PacketPlayOutEntityEquipment(this.getId(), j, itemstack1)));
+                    ((WorldServer) this.world).getTracker().a((Entity) this, (Packet) (new PacketPlayOutEntityEquipment(this.getId(), enumitemslot, itemstack1)));
                     if (itemstack != null) {
-                        this.c.a(itemstack.B());
+                        this.getAttributeMap().a(itemstack.a(enumitemslot));
                     }
 
                     if (itemstack1 != null) {
-                        this.c.b(itemstack1.B());
+                        this.getAttributeMap().b(itemstack1.a(enumitemslot));
                     }
 
-                    this.h[j] = itemstack1 == null ? null : itemstack1.cloneItemStack();
+                    switch (EntityLiving.SyntheticClass_1.a[enumitemslot.a().ordinal()]) {
+                    case 1:
+                        this.bs[enumitemslot.b()] = itemstack1 == null ? null : itemstack1.cloneItemStack();
+                        break;
+
+                    case 2:
+                        this.bt[enumitemslot.b()] = itemstack1 == null ? null : itemstack1.cloneItemStack();
+                    }
                 }
             }
 
             if (this.ticksLived % 20 == 0) {
-                this.bs().g();
+                this.getCombatTracker().g();
+            }
+
+            if (!this.glowing) {
+                boolean flag = this.hasEffect(MobEffects.GLOWING);
+
+                if (this.getFlag(6) != flag) {
+                    this.setFlag(6, flag);
+                }
             }
         }
 
-        this.m();
+        this.n();
         double d0 = this.locX - this.lastX;
         double d1 = this.locZ - this.lastZ;
         float f = (float) (d0 * d0 + d1 * d1);
-        float f1 = this.aI;
+        float f1 = this.aM;
         float f2 = 0.0F;
 
-        this.aR = this.aS;
+        this.aV = this.aW;
         float f3 = 0.0F;
 
         if (f > 0.0025000002F) {
             f3 = 1.0F;
             f2 = (float) Math.sqrt((double) f) * 3.0F;
-            f1 = (float) MathHelper.b(d1, d0) * 180.0F / 3.1415927F - 90.0F;
+            f1 = (float) MathHelper.b(d1, d0) * 57.295776F - 90.0F;
         }
 
-        if (this.az > 0.0F) {
+        if (this.aC > 0.0F) {
             f1 = this.yaw;
         }
 
@@ -1251,7 +1521,7 @@
             f3 = 0.0F;
         }
 
-        this.aS += (f3 - this.aS) * 0.3F;
+        this.aW += (f3 - this.aW) * 0.3F;
         this.world.methodProfiler.a("headTurn");
         f2 = this.h(f1, f2);
         this.world.methodProfiler.b();
@@ -1265,12 +1535,12 @@
             this.lastYaw += 360.0F;
         }
 
-        while (this.aI - this.aJ < -180.0F) {
-            this.aJ -= 360.0F;
+        while (this.aM - this.aN < -180.0F) {
+            this.aN -= 360.0F;
         }
 
-        while (this.aI - this.aJ >= 180.0F) {
-            this.aJ += 360.0F;
+        while (this.aM - this.aN >= 180.0F) {
+            this.aN += 360.0F;
         }
 
         while (this.pitch - this.lastPitch < -180.0F) {
@@ -1281,23 +1551,29 @@
             this.lastPitch += 360.0F;
         }
 
-        while (this.aK - this.aL < -180.0F) {
-            this.aL -= 360.0F;
+        while (this.aO - this.aP < -180.0F) {
+            this.aP -= 360.0F;
         }
 
-        while (this.aK - this.aL >= 180.0F) {
-            this.aL += 360.0F;
+        while (this.aO - this.aP >= 180.0F) {
+            this.aP += 360.0F;
         }
 
         this.world.methodProfiler.b();
-        this.aT += f2;
+        this.aX += f2;
+        if (this.cB()) {
+            ++this.bo;
+        } else {
+            this.bo = 0;
+        }
+
     }
 
     protected float h(float f, float f1) {
-        float f2 = MathHelper.g(f - this.aI);
+        float f2 = MathHelper.g(f - this.aM);
 
-        this.aI += f2 * 0.3F;
-        float f3 = MathHelper.g(this.yaw - this.aI);
+        this.aM += f2 * 0.3F;
+        float f3 = MathHelper.g(this.yaw - this.aM);
         boolean flag = f3 < -90.0F || f3 >= 90.0F;
 
         if (f3 < -75.0F) {
@@ -1308,9 +1584,9 @@
             f3 = 75.0F;
         }
 
-        this.aI = this.yaw - f3;
+        this.aM = this.yaw - f3;
         if (f3 * f3 > 2500.0F) {
-            this.aI += f3 * 0.2F;
+            this.aM += f3 * 0.2F;
         }
 
         if (flag) {
@@ -1320,47 +1596,47 @@
         return f1;
     }
 
-    public void m() {
-        if (this.bn > 0) {
-            --this.bn;
+    public void n() {
+        if (this.bA > 0) {
+            --this.bA;
         }
 
-        if (this.bc > 0) {
-            double d0 = this.locX + (this.bd - this.locX) / (double) this.bc;
-            double d1 = this.locY + (this.be - this.locY) / (double) this.bc;
-            double d2 = this.locZ + (this.bf - this.locZ) / (double) this.bc;
-            double d3 = MathHelper.g(this.bg - (double) this.yaw);
-
-            this.yaw = (float) ((double) this.yaw + d3 / (double) this.bc);
-            this.pitch = (float) ((double) this.pitch + (this.bh - (double) this.pitch) / (double) this.bc);
-            --this.bc;
+        if (this.bg > 0 && !this.bx()) {
+            double d0 = this.locX + (this.bh - this.locX) / (double) this.bg;
+            double d1 = this.locY + (this.bi - this.locY) / (double) this.bg;
+            double d2 = this.locZ + (this.bj - this.locZ) / (double) this.bg;
+            double d3 = MathHelper.g(this.bk - (double) this.yaw);
+
+            this.yaw = (float) ((double) this.yaw + d3 / (double) this.bg);
+            this.pitch = (float) ((double) this.pitch + (this.bl - (double) this.pitch) / (double) this.bg);
+            --this.bg;
             this.setPosition(d0, d1, d2);
             this.setYawPitch(this.yaw, this.pitch);
-        } else if (!this.bM()) {
+        } else if (!this.co()) {
             this.motX *= 0.98D;
             this.motY *= 0.98D;
             this.motZ *= 0.98D;
         }
 
-        if (Math.abs(this.motX) < 0.005D) {
+        if (Math.abs(this.motX) < 0.003D) {
             this.motX = 0.0D;
         }
 
-        if (Math.abs(this.motY) < 0.005D) {
+        if (Math.abs(this.motY) < 0.003D) {
             this.motY = 0.0D;
         }
 
-        if (Math.abs(this.motZ) < 0.005D) {
+        if (Math.abs(this.motZ) < 0.003D) {
             this.motZ = 0.0D;
         }
 
         this.world.methodProfiler.a("ai");
-        if (this.bD()) {
-            this.aY = false;
-            this.aZ = 0.0F;
-            this.ba = 0.0F;
-            this.bb = 0.0F;
-        } else if (this.bM()) {
+        if (this.cf()) {
+            this.bc = false;
+            this.bd = 0.0F;
+            this.be = 0.0F;
+            this.bf = 0.0F;
+        } else if (this.co()) {
             this.world.methodProfiler.a("newAi");
             this.doTick();
             this.world.methodProfiler.b();
@@ -1368,86 +1644,94 @@
 
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("jump");
-        if (this.aY) {
-            if (this.V()) {
-                this.bG();
-            } else if (this.ab()) {
-                this.bH();
-            } else if (this.onGround && this.bn == 0) {
-                this.bF();
-                this.bn = 10;
+        if (this.bc) {
+            if (this.isInWater()) {
+                this.ci();
+            } else if (this.an()) {
+                this.cj();
+            } else if (this.onGround && this.bA == 0) {
+                this.ch();
+                this.bA = 10;
             }
         } else {
-            this.bn = 0;
+            this.bA = 0;
         }
 
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("travel");
-        this.aZ *= 0.98F;
-        this.ba *= 0.98F;
-        this.bb *= 0.9F;
-        this.g(this.aZ, this.ba);
+        this.bd *= 0.98F;
+        this.be *= 0.98F;
+        this.bf *= 0.9F;
+        this.r();
+        this.g(this.bd, this.be);
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("push");
+        this.cn();
+        this.world.methodProfiler.b();
+    }
+
+    private void r() {
+        boolean flag = this.getFlag(7);
+
+        if (flag && !this.onGround && !this.isPassenger()) {
+            ItemStack itemstack = this.getEquipment(EnumItemSlot.CHEST);
+
+            if (itemstack != null && itemstack.getItem() == Items.cR && ItemElytra.d(itemstack)) {
+                flag = true;
+                if (!this.world.isClientSide && (this.bo + 1) % 20 == 0) {
+                    itemstack.damage(1, this);
+                }
+            } else {
+                flag = false;
+            }
+        } else {
+            flag = false;
+        }
+
         if (!this.world.isClientSide) {
-            this.bL();
+            this.setFlag(7, flag);
         }
 
-        this.world.methodProfiler.b();
     }
 
     protected void doTick() {}
 
-    protected void bL() {
-        List list = this.world.a((Entity) this, this.getBoundingBox().grow(0.20000000298023224D, 0.0D, 0.20000000298023224D), Predicates.and(IEntitySelector.d, new Predicate() {
-            public boolean a(Entity entity) {
-                return entity.ae();
-            }
-
-            public boolean apply(Object object) {
-                return this.a((Entity) object);
-            }
-        }));
+    protected void cn() {
+        List list = this.world.a((Entity) this, this.getBoundingBox(), IEntitySelector.a(this));
 
         if (!list.isEmpty()) {
             for (int i = 0; i < list.size(); ++i) {
                 Entity entity = (Entity) list.get(i);
 
-                this.s(entity);
+                this.C(entity);
             }
         }
 
     }
 
-    protected void s(Entity entity) {
+    protected void C(Entity entity) {
         entity.collide(this);
     }
 
-    public void mount(Entity entity) {
-        if (this.vehicle != null && entity == null) {
-            if (!this.world.isClientSide) {
-                this.q(this.vehicle);
-            }
+    public void stopRiding() {
+        Entity entity = this.by();
 
-            if (this.vehicle != null) {
-                this.vehicle.passenger = null;
-            }
-
-            this.vehicle = null;
-        } else {
-            super.mount(entity);
+        super.stopRiding();
+        if (entity != null && entity != this.by() && !this.world.isClientSide) {
+            this.A(entity);
         }
+
     }
 
-    public void ak() {
-        super.ak();
-        this.aR = this.aS;
-        this.aS = 0.0F;
+    public void aw() {
+        super.aw();
+        this.aV = this.aW;
+        this.aW = 0.0F;
         this.fallDistance = 0.0F;
     }
 
-    public void i(boolean flag) {
-        this.aY = flag;
+    public void k(boolean flag) {
+        this.bc = flag;
     }
 
     public void receive(Entity entity, int i) {
@@ -1470,54 +1754,54 @@
     }
 
     public boolean hasLineOfSight(Entity entity) {
-        return this.world.rayTrace(new Vec3D(this.locX, this.locY + (double) this.getHeadHeight(), this.locZ), new Vec3D(entity.locX, entity.locY + (double) entity.getHeadHeight(), entity.locZ)) == null;
+        return this.world.rayTrace(new Vec3D(this.locX, this.locY + (double) this.getHeadHeight(), this.locZ), new Vec3D(entity.locX, entity.locY + (double) entity.getHeadHeight(), entity.locZ), false, true, false) == null;
     }
 
-    public Vec3D ap() {
-        return this.d(1.0F);
+    public Vec3D aB() {
+        return this.f(1.0F);
     }
 
-    public Vec3D d(float f) {
+    public Vec3D f(float f) {
         if (f == 1.0F) {
-            return this.f(this.pitch, this.aK);
+            return this.f(this.pitch, this.aO);
         } else {
             float f1 = this.lastPitch + (this.pitch - this.lastPitch) * f;
-            float f2 = this.aL + (this.aK - this.aL) * f;
+            float f2 = this.aP + (this.aO - this.aP) * f;
 
             return this.f(f1, f2);
         }
     }
 
-    public boolean bM() {
+    public boolean co() {
         return !this.world.isClientSide;
     }
 
-    public boolean ad() {
+    public boolean isInteractable() {
         return !this.dead;
     }
 
-    public boolean ae() {
+    public boolean isCollidable() {
         return !this.dead;
     }
 
-    protected void ac() {
+    protected void ao() {
         this.velocityChanged = this.random.nextDouble() >= this.getAttributeInstance(GenericAttributes.c).getValue();
     }
 
     public float getHeadRotation() {
-        return this.aK;
+        return this.aO;
     }
 
-    public void f(float f) {
-        this.aK = f;
+    public void h(float f) {
+        this.aO = f;
     }
 
-    public void g(float f) {
-        this.aI = f;
+    public void i(float f) {
+        this.aM = f;
     }
 
     public float getAbsorptionHearts() {
-        return this.bo;
+        return this.bB;
     }
 
     public void setAbsorptionHearts(float f) {
@@ -1525,26 +1809,253 @@
             f = 0.0F;
         }
 
-        this.bo = f;
+        this.bB = f;
+    }
+
+    public void enterCombat() {}
+
+    public void exitCombat() {}
+
+    protected void cq() {
+        this.updateEffects = true;
     }
 
-    public ScoreboardTeamBase getScoreboardTeam() {
-        return this.world.getScoreboard().getPlayerTeam(this.getUniqueID().toString());
+    public abstract EnumMainHand cr();
+
+    public boolean cs() {
+        return (((Byte) this.datawatcher.get(EntityLiving.as)).byteValue() & 1) > 0;
     }
 
-    public boolean c(EntityLiving entityliving) {
-        return this.a(entityliving.getScoreboardTeam());
+    public EnumHand ct() {
+        return (((Byte) this.datawatcher.get(EntityLiving.as)).byteValue() & 2) > 0 ? EnumHand.OFF_HAND : EnumHand.MAIN_HAND;
     }
 
-    public boolean a(ScoreboardTeamBase scoreboardteambase) {
-        return this.getScoreboardTeam() != null ? this.getScoreboardTeam().isAlly(scoreboardteambase) : false;
+    protected void cu() {
+        if (this.cs()) {
+            ItemStack itemstack = this.b(this.ct());
+
+            if (itemstack == this.bm) {
+                if (this.cw() <= 25 && this.cw() % 4 == 0) {
+                    this.a(this.bm, 5);
+                }
+
+                if (--this.bn == 0 && !this.world.isClientSide) {
+                    this.v();
+                }
+            } else {
+                this.cz();
+            }
+        }
+
     }
 
-    public void enterCombat() {}
+    public void c(EnumHand enumhand) {
+        ItemStack itemstack = this.b(enumhand);
 
-    public void exitCombat() {}
+        if (itemstack != null && !this.cs()) {
+            this.bm = itemstack;
+            this.bn = itemstack.l();
+            if (!this.world.isClientSide) {
+                int i = 1;
 
-    protected void bP() {
-        this.updateEffects = true;
+                if (enumhand == EnumHand.OFF_HAND) {
+                    i |= 2;
+                }
+
+                this.datawatcher.set(EntityLiving.as, Byte.valueOf((byte) i));
+            }
+
+        }
+    }
+
+    public void a(DataWatcherObject<?> datawatcherobject) {
+        super.a(datawatcherobject);
+        if (EntityLiving.as.equals(datawatcherobject) && this.world.isClientSide) {
+            if (this.cs() && this.bm == null) {
+                this.bm = this.b(this.ct());
+                if (this.bm != null) {
+                    this.bn = this.bm.l();
+                }
+            } else if (!this.cs() && this.bm != null) {
+                this.bm = null;
+                this.bn = 0;
+            }
+        }
+
+    }
+
+    protected void a(ItemStack itemstack, int i) {
+        if (itemstack != null && this.cs()) {
+            if (itemstack.m() == EnumAnimation.DRINK) {
+                this.a(SoundEffects.bB, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
+            }
+
+            if (itemstack.m() == EnumAnimation.EAT) {
+                for (int j = 0; j < i; ++j) {
+                    Vec3D vec3d = new Vec3D(((double) this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+
+                    vec3d = vec3d.a(-this.pitch * 0.017453292F);
+                    vec3d = vec3d.b(-this.yaw * 0.017453292F);
+                    double d0 = (double) (-this.random.nextFloat()) * 0.6D - 0.3D;
+                    Vec3D vec3d1 = new Vec3D(((double) this.random.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
+
+                    vec3d1 = vec3d1.a(-this.pitch * 0.017453292F);
+                    vec3d1 = vec3d1.b(-this.yaw * 0.017453292F);
+                    vec3d1 = vec3d1.add(this.locX, this.locY + (double) this.getHeadHeight(), this.locZ);
+                    if (itemstack.usesData()) {
+                        this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z, new int[] { Item.getId(itemstack.getItem()), itemstack.getData()});
+                    } else {
+                        this.world.addParticle(EnumParticle.ITEM_CRACK, vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z, new int[] { Item.getId(itemstack.getItem())});
+                    }
+                }
+
+                this.a(SoundEffects.bC, 0.5F + 0.5F * (float) this.random.nextInt(2), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+            }
+
+        }
+    }
+
+    protected void v() {
+        if (this.bm != null && this.cs()) {
+            this.a(this.bm, 16);
+            ItemStack itemstack = this.bm.a(this.world, this);
+
+            if (itemstack != null && itemstack.count == 0) {
+                itemstack = null;
+            }
+
+            this.a(this.ct(), itemstack);
+            this.cz();
+        }
+
+    }
+
+    public ItemStack cv() {
+        return this.bm;
+    }
+
+    public int cw() {
+        return this.bn;
+    }
+
+    public int cx() {
+        return this.cs() ? this.bm.l() - this.cw() : 0;
+    }
+
+    public void clearActiveItem() {
+        if (this.bm != null) {
+            this.bm.a(this.world, this, this.cw());
+        }
+
+        this.cz();
+    }
+
+    public void cz() {
+        if (!this.world.isClientSide) {
+            this.datawatcher.set(EntityLiving.as, Byte.valueOf((byte) 0));
+        }
+
+        this.bm = null;
+        this.bn = 0;
+    }
+
+    public boolean isBlocking() {
+        if (this.cs() && this.bm != null) {
+            Item item = this.bm.getItem();
+
+            return item.f(this.bm) != EnumAnimation.BLOCK ? false : item.e(this.bm) - this.bn >= 5;
+        } else {
+            return false;
+        }
+    }
+
+    public boolean cB() {
+        return this.getFlag(7);
+    }
+
+    public boolean k(double d0, double d1, double d2) {
+        double d3 = this.locX;
+        double d4 = this.locY;
+        double d5 = this.locZ;
+
+        this.locX = d0;
+        this.locY = d1;
+        this.locZ = d2;
+        boolean flag = false;
+        BlockPosition blockposition = new BlockPosition(this);
+        World world = this.world;
+        Random random = this.getRandom();
+
+        if (world.isLoaded(blockposition)) {
+            boolean flag1 = false;
+
+            while (!flag1 && blockposition.getY() > 0) {
+                BlockPosition blockposition1 = blockposition.down();
+                IBlockData iblockdata = world.getType(blockposition1);
+
+                if (iblockdata.getMaterial().isSolid()) {
+                    flag1 = true;
+                } else {
+                    --this.locY;
+                    blockposition = blockposition1;
+                }
+            }
+
+            if (flag1) {
+                this.enderTeleportTo(this.locX, this.locY, this.locZ);
+                if (world.getCubes(this, this.getBoundingBox()).isEmpty() && !world.containsLiquid(this.getBoundingBox())) {
+                    flag = true;
+                }
+            }
+        }
+
+        if (!flag) {
+            this.enderTeleportTo(d3, d4, d5);
+            return false;
+        } else {
+            short short0 = 128;
+
+            for (int i = 0; i < short0; ++i) {
+                double d6 = (double) i / ((double) short0 - 1.0D);
+                float f = (random.nextFloat() - 0.5F) * 0.2F;
+                float f1 = (random.nextFloat() - 0.5F) * 0.2F;
+                float f2 = (random.nextFloat() - 0.5F) * 0.2F;
+                double d7 = d3 + (this.locX - d3) * d6 + (random.nextDouble() - 0.5D) * (double) this.width * 2.0D;
+                double d8 = d4 + (this.locY - d4) * d6 + random.nextDouble() * (double) this.length;
+                double d9 = d5 + (this.locZ - d5) * d6 + (random.nextDouble() - 0.5D) * (double) this.width * 2.0D;
+
+                world.addParticle(EnumParticle.PORTAL, d7, d8, d9, (double) f, (double) f1, (double) f2, new int[0]);
+            }
+
+            if (this instanceof EntityCreature) {
+                ((EntityCreature) this).getNavigation().o();
+            }
+
+            return true;
+        }
+    }
+
+    public boolean cD() {
+        return true;
+    }
+
+    static class SyntheticClass_1 {
+
+        static final int[] a = new int[EnumItemSlot.Function.values().length];
+
+        static {
+            try {
+                EntityLiving.SyntheticClass_1.a[EnumItemSlot.Function.HAND.ordinal()] = 1;
+            } catch (NoSuchFieldError nosuchfielderror) {
+                ;
+            }
+
+            try {
+                EntityLiving.SyntheticClass_1.a[EnumItemSlot.Function.ARMOR.ordinal()] = 2;
+            } catch (NoSuchFieldError nosuchfielderror1) {
+                ;
+            }
+
+        }
     }
 }
