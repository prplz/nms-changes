--- a/net/minecraft/server/PlayerChunkMap.java
+++ b/net/minecraft/server/PlayerChunkMap.java
@@ -5,17 +5,20 @@
 import com.google.common.collect.ComparisonChain;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
+import javax.annotation.Nullable;
 
 public class PlayerChunkMap {
 
     private static final Predicate<EntityPlayer> a = new Predicate() {
-        public boolean a(EntityPlayer entityplayer) {
+        public boolean a(@Nullable EntityPlayer entityplayer) {
             return entityplayer != null && !entityplayer.isSpectator();
         }
 
@@ -24,7 +27,7 @@
         }
     };
     private static final Predicate<EntityPlayer> b = new Predicate() {
-        public boolean a(EntityPlayer entityplayer) {
+        public boolean a(@Nullable EntityPlayer entityplayer) {
             return entityplayer != null && (!entityplayer.isSpectator() || entityplayer.x().getGameRules().getBoolean("spectatorsGenerateChunks"));
         }
 
@@ -34,7 +37,7 @@
     };
     private final WorldServer world;
     private final List<EntityPlayer> managedPlayers = Lists.newArrayList();
-    private final LongHashMap<PlayerChunk> e = new LongHashMap();
+    private final Long2ObjectMap<PlayerChunk> e = new Long2ObjectOpenHashMap(4096);
     private final Set<PlayerChunk> f = Sets.newHashSet();
     private final List<PlayerChunk> g = Lists.newLinkedList();
     private final List<PlayerChunk> h = Lists.newLinkedList();
@@ -200,16 +203,17 @@
     public boolean a(int i, int j) {
         long k = d(i, j);
 
-        return this.e.getEntry(k) != null;
+        return this.e.get(k) != null;
     }
 
-    public PlayerChunk b(int i, int j) {
-        return (PlayerChunk) this.e.getEntry(d(i, j));
+    @Nullable
+    public PlayerChunk getChunk(int i, int j) {
+        return (PlayerChunk) this.e.get(d(i, j));
     }
 
     private PlayerChunk c(int i, int j) {
         long k = d(i, j);
-        PlayerChunk playerchunk = (PlayerChunk) this.e.getEntry(k);
+        PlayerChunk playerchunk = (PlayerChunk) this.e.get(k);
 
         if (playerchunk == null) {
             playerchunk = new PlayerChunk(this, i, j);
@@ -230,7 +234,7 @@
     public void flagDirty(BlockPosition blockposition) {
         int i = blockposition.getX() >> 4;
         int j = blockposition.getZ() >> 4;
-        PlayerChunk playerchunk = this.b(i, j);
+        PlayerChunk playerchunk = this.getChunk(i, j);
 
         if (playerchunk != null) {
             playerchunk.a(blockposition.getX() & 15, blockposition.getY(), blockposition.getZ() & 15);
@@ -261,7 +265,7 @@
 
         for (int k = i - this.j; k <= i + this.j; ++k) {
             for (int l = j - this.j; l <= j + this.j; ++l) {
-                PlayerChunk playerchunk = this.b(k, l);
+                PlayerChunk playerchunk = this.getChunk(k, l);
 
                 if (playerchunk != null) {
                     playerchunk.b(entityplayer);
@@ -302,7 +306,7 @@
                         }
 
                         if (!this.a(l1 - j1, i2 - k1, i, j, i1)) {
-                            PlayerChunk playerchunk = this.b(l1 - j1, i2 - k1);
+                            PlayerChunk playerchunk = this.getChunk(l1 - j1, i2 - k1);
 
                             if (playerchunk != null) {
                                 playerchunk.b(entityplayer);
@@ -319,7 +323,7 @@
     }
 
     public boolean a(EntityPlayer entityplayer, int i, int j) {
-        PlayerChunk playerchunk = this.b(i, j);
+        PlayerChunk playerchunk = this.getChunk(i, j);
 
         return playerchunk != null && playerchunk.d(entityplayer) && playerchunk.e();
     }
@@ -391,6 +395,11 @@
         this.f.remove(playerchunk);
         this.g.remove(playerchunk);
         this.h.remove(playerchunk);
-        this.getWorld().getChunkProviderServer().queueUnload(chunkcoordintpair.x, chunkcoordintpair.z);
+        Chunk chunk = playerchunk.f();
+
+        if (chunk != null) {
+            this.getWorld().getChunkProviderServer().unload(chunk);
+        }
+
     }
 }
