--- a/net/minecraft/server/EntityTameableAnimal.java
+++ b/net/minecraft/server/EntityTameableAnimal.java
@@ -2,22 +2,23 @@
 
 import com.google.common.base.Optional;
 import java.util.UUID;
+import javax.annotation.Nullable;
 
 public abstract class EntityTameableAnimal extends EntityAnimal implements EntityOwnable {
 
-    protected static final DataWatcherObject<Byte> bv = DataWatcher.a(EntityTameableAnimal.class, DataWatcherRegistry.a);
-    protected static final DataWatcherObject<Optional<UUID>> bw = DataWatcher.a(EntityTameableAnimal.class, DataWatcherRegistry.m);
+    protected static final DataWatcherObject<Byte> bw = DataWatcher.a(EntityTameableAnimal.class, DataWatcherRegistry.a);
+    protected static final DataWatcherObject<Optional<UUID>> bx = DataWatcher.a(EntityTameableAnimal.class, DataWatcherRegistry.m);
     protected PathfinderGoalSit goalSit;
 
     public EntityTameableAnimal(World world) {
         super(world);
-        this.da();
+        this.db();
     }
 
     protected void i() {
         super.i();
-        this.datawatcher.register(EntityTameableAnimal.bv, Byte.valueOf((byte) 0));
-        this.datawatcher.register(EntityTameableAnimal.bw, Optional.absent());
+        this.datawatcher.register(EntityTameableAnimal.bw, Byte.valueOf((byte) 0));
+        this.datawatcher.register(EntityTameableAnimal.bx, Optional.absent());
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -81,46 +82,48 @@
     }
 
     public boolean isTamed() {
-        return (((Byte) this.datawatcher.get(EntityTameableAnimal.bv)).byteValue() & 4) != 0;
+        return (((Byte) this.datawatcher.get(EntityTameableAnimal.bw)).byteValue() & 4) != 0;
     }
 
     public void setTamed(boolean flag) {
-        byte b0 = ((Byte) this.datawatcher.get(EntityTameableAnimal.bv)).byteValue();
+        byte b0 = ((Byte) this.datawatcher.get(EntityTameableAnimal.bw)).byteValue();
 
         if (flag) {
-            this.datawatcher.set(EntityTameableAnimal.bv, Byte.valueOf((byte) (b0 | 4)));
+            this.datawatcher.set(EntityTameableAnimal.bw, Byte.valueOf((byte) (b0 | 4)));
         } else {
-            this.datawatcher.set(EntityTameableAnimal.bv, Byte.valueOf((byte) (b0 & -5)));
+            this.datawatcher.set(EntityTameableAnimal.bw, Byte.valueOf((byte) (b0 & -5)));
         }
 
-        this.da();
+        this.db();
     }
 
-    protected void da() {}
+    protected void db() {}
 
     public boolean isSitting() {
-        return (((Byte) this.datawatcher.get(EntityTameableAnimal.bv)).byteValue() & 1) != 0;
+        return (((Byte) this.datawatcher.get(EntityTameableAnimal.bw)).byteValue() & 1) != 0;
     }
 
     public void setSitting(boolean flag) {
-        byte b0 = ((Byte) this.datawatcher.get(EntityTameableAnimal.bv)).byteValue();
+        byte b0 = ((Byte) this.datawatcher.get(EntityTameableAnimal.bw)).byteValue();
 
         if (flag) {
-            this.datawatcher.set(EntityTameableAnimal.bv, Byte.valueOf((byte) (b0 | 1)));
+            this.datawatcher.set(EntityTameableAnimal.bw, Byte.valueOf((byte) (b0 | 1)));
         } else {
-            this.datawatcher.set(EntityTameableAnimal.bv, Byte.valueOf((byte) (b0 & -2)));
+            this.datawatcher.set(EntityTameableAnimal.bw, Byte.valueOf((byte) (b0 & -2)));
         }
 
     }
 
+    @Nullable
     public UUID getOwnerUUID() {
-        return (UUID) ((Optional) this.datawatcher.get(EntityTameableAnimal.bw)).orNull();
+        return (UUID) ((Optional) this.datawatcher.get(EntityTameableAnimal.bx)).orNull();
     }
 
-    public void setOwnerUUID(UUID uuid) {
-        this.datawatcher.set(EntityTameableAnimal.bw, Optional.fromNullable(uuid));
+    public void setOwnerUUID(@Nullable UUID uuid) {
+        this.datawatcher.set(EntityTameableAnimal.bx, Optional.fromNullable(uuid));
     }
 
+    @Nullable
     public EntityLiving getOwner() {
         try {
             UUID uuid = this.getOwnerUUID();
