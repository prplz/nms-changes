--- a/net/minecraft/server/EntityAreaEffectCloud.java
+++ b/net/minecraft/server/EntityAreaEffectCloud.java
@@ -17,25 +17,27 @@
     private static final DataWatcherObject<Integer> b = DataWatcher.a(EntityAreaEffectCloud.class, DataWatcherRegistry.b);
     private static final DataWatcherObject<Boolean> c = DataWatcher.a(EntityAreaEffectCloud.class, DataWatcherRegistry.h);
     private static final DataWatcherObject<Integer> d = DataWatcher.a(EntityAreaEffectCloud.class, DataWatcherRegistry.b);
-    private PotionRegistry e;
+    private static final DataWatcherObject<Integer> e = DataWatcher.a(EntityAreaEffectCloud.class, DataWatcherRegistry.b);
+    private static final DataWatcherObject<Integer> f = DataWatcher.a(EntityAreaEffectCloud.class, DataWatcherRegistry.b);
+    private PotionRegistry potionRegistry;
     public List<MobEffect> effects;
-    private final Map<Entity, Integer> g;
-    private int h;
+    private final Map<Entity, Integer> au;
+    private int av;
     public int waitTime;
     public int reapplicationDelay;
     private boolean hasColor;
     public int durationOnUse;
     public float radiusOnUse;
     public float radiusPerTick;
-    private EntityLiving az;
-    private UUID aA;
+    private EntityLiving aC;
+    private UUID aD;
 
     public EntityAreaEffectCloud(World world) {
         super(world);
-        this.e = Potions.a;
+        this.potionRegistry = Potions.a;
         this.effects = Lists.newArrayList();
-        this.g = Maps.newHashMap();
-        this.h = 600;
+        this.au = Maps.newHashMap();
+        this.av = 600;
         this.waitTime = 20;
         this.reapplicationDelay = 20;
         this.noclip = true;
@@ -53,6 +55,8 @@
         this.getDataWatcher().register(EntityAreaEffectCloud.a, Float.valueOf(0.5F));
         this.getDataWatcher().register(EntityAreaEffectCloud.c, Boolean.valueOf(false));
         this.getDataWatcher().register(EntityAreaEffectCloud.d, Integer.valueOf(EnumParticle.SPELL_MOB.c()));
+        this.getDataWatcher().register(EntityAreaEffectCloud.e, Integer.valueOf(0));
+        this.getDataWatcher().register(EntityAreaEffectCloud.f, Integer.valueOf(0));
     }
 
     public void setRadius(float f) {
@@ -73,7 +77,7 @@
     }
 
     public void a(PotionRegistry potionregistry) {
-        this.e = potionregistry;
+        this.potionRegistry = potionregistry;
         if (!this.hasColor) {
             if (potionregistry == Potions.a && this.effects.isEmpty()) {
                 this.getDataWatcher().set(EntityAreaEffectCloud.b, Integer.valueOf(0));
@@ -87,7 +91,7 @@
     public void a(MobEffect mobeffect) {
         this.effects.add(mobeffect);
         if (!this.hasColor) {
-            this.getDataWatcher().set(EntityAreaEffectCloud.b, Integer.valueOf(PotionUtil.a((Collection) PotionUtil.a(this.e, (Collection) this.effects))));
+            this.getDataWatcher().set(EntityAreaEffectCloud.b, Integer.valueOf(PotionUtil.a((Collection) PotionUtil.a(this.potionRegistry, (Collection) this.effects))));
         }
 
     }
@@ -109,29 +113,55 @@
         this.getDataWatcher().set(EntityAreaEffectCloud.d, Integer.valueOf(enumparticle.c()));
     }
 
+    public int n() {
+        return ((Integer) this.getDataWatcher().get(EntityAreaEffectCloud.e)).intValue();
+    }
+
+    public void b(int i) {
+        this.getDataWatcher().set(EntityAreaEffectCloud.e, Integer.valueOf(i));
+    }
+
+    public int o() {
+        return ((Integer) this.getDataWatcher().get(EntityAreaEffectCloud.f)).intValue();
+    }
+
+    public void d(int i) {
+        this.getDataWatcher().set(EntityAreaEffectCloud.f, Integer.valueOf(i));
+    }
+
     protected void a(boolean flag) {
         this.getDataWatcher().set(EntityAreaEffectCloud.c, Boolean.valueOf(flag));
     }
 
-    public boolean n() {
+    public boolean q() {
         return ((Boolean) this.getDataWatcher().get(EntityAreaEffectCloud.c)).booleanValue();
     }
 
     public int getDuration() {
-        return this.h;
+        return this.av;
     }
 
     public void setDuration(int i) {
-        this.h = i;
+        this.av = i;
     }
 
     public void m() {
         super.m();
-        boolean flag = this.n();
+        boolean flag = this.q();
         float f = this.getRadius();
 
         if (this.world.isClientSide) {
             EnumParticle enumparticle = this.getParticle();
+            int[] aint = new int[enumparticle.d()];
+
+            if (aint.length > 0) {
+                aint[0] = this.n();
+            }
+
+            if (aint.length > 1) {
+                aint[1] = this.o();
+            }
+
             float f1;
             float f2;
             float f3;
@@ -141,8 +171,6 @@
 
             if (flag) {
                 if (this.random.nextBoolean()) {
-                    int[] aint = new int[enumparticle.d()];
-
                     for (int l = 0; l < 2; ++l) {
                         float f4 = this.random.nextFloat() * 6.2831855F;
 
@@ -163,7 +191,6 @@
                 }
             } else {
                 float f5 = 3.1415927F * f * f;
-                int[] aint1 = new int[enumparticle.d()];
 
                 for (int j1 = 0; (float) j1 < f5; ++j1) {
                     f1 = this.random.nextFloat() * 6.2831855F;
@@ -179,12 +206,12 @@
 
                         this.world.addParticle(EnumParticle.SPELL_MOB, this.locX + (double) f3, this.locY, this.locZ + (double) f6, (double) ((float) j / 255.0F), (double) ((float) k / 255.0F), (double) ((float) k1 / 255.0F), new int[0]);
                     } else {
-                        this.world.addParticle(enumparticle, this.locX + (double) f3, this.locY, this.locZ + (double) f6, (0.5D - this.random.nextDouble()) * 0.15D, 0.009999999776482582D, (0.5D - this.random.nextDouble()) * 0.15D, aint1);
+                        this.world.addParticle(enumparticle, this.locX + (double) f3, this.locY, this.locZ + (double) f6, (0.5D - this.random.nextDouble()) * 0.15D, 0.009999999776482582D, (0.5D - this.random.nextDouble()) * 0.15D, aint);
                     }
                 }
             }
         } else {
-            if (this.ticksLived >= this.waitTime + this.h) {
+            if (this.ticksLived >= this.waitTime + this.av) {
                 this.die();
                 return;
             }
@@ -210,7 +237,7 @@
             }
 
             if (this.ticksLived % 5 == 0) {
-                Iterator iterator = this.g.entrySet().iterator();
+                Iterator iterator = this.au.entrySet().iterator();
 
                 while (iterator.hasNext()) {
                     Entry entry = (Entry) iterator.next();
@@ -221,7 +248,7 @@
                 }
 
                 ArrayList arraylist = Lists.newArrayList();
-                Iterator iterator1 = this.e.a().iterator();
+                Iterator iterator1 = this.potionRegistry.a().iterator();
 
                 while (iterator1.hasNext()) {
                     MobEffect mobeffect = (MobEffect) iterator1.next();
@@ -231,7 +258,7 @@
 
                 arraylist.addAll(this.effects);
                 if (arraylist.isEmpty()) {
-                    this.g.clear();
+                    this.au.clear();
                 } else {
                     List list = this.world.a(EntityLiving.class, this.getBoundingBox());
 
@@ -241,20 +268,20 @@
                         while (iterator2.hasNext()) {
                             EntityLiving entityliving = (EntityLiving) iterator2.next();
 
-                            if (!this.g.containsKey(entityliving) && entityliving.cE()) {
+                            if (!this.au.containsKey(entityliving) && entityliving.cI()) {
                                 double d0 = entityliving.locX - this.locX;
                                 double d1 = entityliving.locZ - this.locZ;
                                 double d2 = d0 * d0 + d1 * d1;
 
                                 if (d2 <= (double) (f * f)) {
-                                    this.g.put(entityliving, Integer.valueOf(this.ticksLived + this.reapplicationDelay));
+                                    this.au.put(entityliving, Integer.valueOf(this.ticksLived + this.reapplicationDelay));
                                     Iterator iterator3 = arraylist.iterator();
 
                                     while (iterator3.hasNext()) {
                                         MobEffect mobeffect1 = (MobEffect) iterator3.next();
 
                                         if (mobeffect1.getMobEffect().isInstant()) {
-                                            mobeffect1.getMobEffect().applyInstantEffect(this, this.w(), entityliving, mobeffect1.getAmplifier(), 0.5D);
+                                            mobeffect1.getMobEffect().applyInstantEffect(this, this.y(), entityliving, mobeffect1.getAmplifier(), 0.5D);
                                         } else {
                                             entityliving.addEffect(new MobEffect(mobeffect1));
                                         }
@@ -271,8 +298,8 @@
                                     }
 
                                     if (this.durationOnUse != 0) {
-                                        this.h += this.durationOnUse;
-                                        if (this.h <= 0) {
+                                        this.av += this.durationOnUse;
+                                        if (this.av <= 0) {
                                             this.die();
                                             return;
                                         }
@@ -300,38 +327,40 @@
     }
 
     public void setSource(@Nullable EntityLiving entityliving) {
-        this.az = entityliving;
-        this.aA = entityliving == null ? null : entityliving.getUniqueID();
+        this.aC = entityliving;
+        this.aD = entityliving == null ? null : entityliving.getUniqueID();
     }
 
     @Nullable
-    public EntityLiving w() {
-        if (this.az == null && this.aA != null && this.world instanceof WorldServer) {
-            Entity entity = ((WorldServer) this.world).getEntity(this.aA);
+    public EntityLiving y() {
+        if (this.aC == null && this.aD != null && this.world instanceof WorldServer) {
+            Entity entity = ((WorldServer) this.world).getEntity(this.aD);
 
             if (entity instanceof EntityLiving) {
-                this.az = (EntityLiving) entity;
+                this.aC = (EntityLiving) entity;
             }
         }
 
-        return this.az;
+        return this.aC;
     }
 
     protected void a(NBTTagCompound nbttagcompound) {
         this.ticksLived = nbttagcompound.getInt("Age");
-        this.h = nbttagcompound.getInt("Duration");
+        this.av = nbttagcompound.getInt("Duration");
         this.waitTime = nbttagcompound.getInt("WaitTime");
         this.reapplicationDelay = nbttagcompound.getInt("ReapplicationDelay");
         this.durationOnUse = nbttagcompound.getInt("DurationOnUse");
         this.radiusOnUse = nbttagcompound.getFloat("RadiusOnUse");
         this.radiusPerTick = nbttagcompound.getFloat("RadiusPerTick");
         this.setRadius(nbttagcompound.getFloat("Radius"));
-        this.aA = nbttagcompound.a("OwnerUUID");
+        this.aD = nbttagcompound.a("OwnerUUID");
         if (nbttagcompound.hasKeyOfType("Particle", 8)) {
             EnumParticle enumparticle = EnumParticle.a(nbttagcompound.getString("Particle"));
 
             if (enumparticle != null) {
                 this.setParticle(enumparticle);
+                this.b(nbttagcompound.getInt("ParticleParam1"));
+                this.d(nbttagcompound.getInt("ParticleParam2"));
             }
         }
 
@@ -361,7 +390,7 @@
 
     protected void b(NBTTagCompound nbttagcompound) {
         nbttagcompound.setInt("Age", this.ticksLived);
-        nbttagcompound.setInt("Duration", this.h);
+        nbttagcompound.setInt("Duration", this.av);
         nbttagcompound.setInt("WaitTime", this.waitTime);
         nbttagcompound.setInt("ReapplicationDelay", this.reapplicationDelay);
         nbttagcompound.setInt("DurationOnUse", this.durationOnUse);
@@ -369,16 +398,18 @@
         nbttagcompound.setFloat("RadiusPerTick", this.radiusPerTick);
         nbttagcompound.setFloat("Radius", this.getRadius());
         nbttagcompound.setString("Particle", this.getParticle().b());
-        if (this.aA != null) {
-            nbttagcompound.a("OwnerUUID", this.aA);
+        nbttagcompound.setInt("ParticleParam1", this.n());
+        nbttagcompound.setInt("ParticleParam2", this.o());
+        if (this.aD != null) {
+            nbttagcompound.a("OwnerUUID", this.aD);
         }
 
         if (this.hasColor) {
             nbttagcompound.setInt("Color", this.getColor());
         }
 
-        if (this.e != Potions.a && this.e != null) {
-            nbttagcompound.setString("Potion", ((MinecraftKey) PotionRegistry.a.b(this.e)).toString());
+        if (this.potionRegistry != Potions.a && this.potionRegistry != null) {
+            nbttagcompound.setString("Potion", ((MinecraftKey) PotionRegistry.a.b(this.potionRegistry)).toString());
         }
 
         if (!this.effects.isEmpty()) {
@@ -404,7 +435,7 @@
         super.a(datawatcherobject);
     }
 
-    public EnumPistonReaction z() {
+    public EnumPistonReaction o_() {
         return EnumPistonReaction.IGNORE;
     }
 }
