--- a/net/minecraft/server/MathHelper.java
+++ b/net/minecraft/server/MathHelper.java
@@ -8,6 +8,9 @@
     public static final float a = c(2.0F);
     private static final float[] b = new float[65536];
     private static final int[] c;
+    private static final double d;
+    private static final double[] e;
+    private static final double[] f;
 
     public static float sin(float f) {
         return MathHelper.b[(int) (f * 10430.378F) & '\uffff'];
@@ -214,11 +217,94 @@
         return new UUID(i, j);
     }
 
+    public static double c(double d0, double d1, double d2) {
+        return (d0 - d1) / (d2 - d1);
+    }
+
+    public static double b(double d0, double d1) {
+        double d2 = d1 * d1 + d0 * d0;
+
+        if (Double.isNaN(d2)) {
+            return Double.NaN;
+        } else {
+            boolean flag = d0 < 0.0D;
+
+            if (flag) {
+                d0 = -d0;
+            }
+
+            boolean flag1 = d1 < 0.0D;
+
+            if (flag1) {
+                d1 = -d1;
+            }
+
+            boolean flag2 = d0 > d1;
+            double d3;
+
+            if (flag2) {
+                d3 = d1;
+                d1 = d0;
+                d0 = d3;
+            }
+
+            d3 = i(d2);
+            d1 *= d3;
+            d0 *= d3;
+            double d4 = MathHelper.d + d0;
+            int i = (int) Double.doubleToRawLongBits(d4);
+            double d5 = MathHelper.e[i];
+            double d6 = MathHelper.f[i];
+            double d7 = d4 - MathHelper.d;
+            double d8 = d0 * d6 - d1 * d7;
+            double d9 = (6.0D + d8 * d8) * d8 * 0.16666666666666666D;
+            double d10 = d5 + d9;
+
+            if (flag2) {
+                d10 = 1.5707963267948966D - d10;
+            }
+
+            if (flag1) {
+                d10 = 3.141592653589793D - d10;
+            }
+
+            if (flag) {
+                d10 = -d10;
+            }
+
+            return d10;
+        }
+    }
+
+    public static double i(double d0) {
+        double d1 = 0.5D * d0;
+        long i = Double.doubleToRawLongBits(d0);
+
+        i = 6910469410427058090L - (i >> 1);
+        d0 = Double.longBitsToDouble(i);
+        d0 *= 1.5D - d1 * d0 * d0;
+        return d0;
+    }
+
     static {
-        for (int i = 0; i < 65536; ++i) {
+        int i;
+
+        for (i = 0; i < 65536; ++i) {
             MathHelper.b[i] = (float) Math.sin((double) i * 3.141592653589793D * 2.0D / 65536.0D);
         }
 
         c = new int[] { 0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9};
+        d = Double.longBitsToDouble(4805340802404319232L);
+        e = new double[257];
+        f = new double[257];
+
+        for (i = 0; i < 257; ++i) {
+            double d0 = (double) i / 256.0D;
+            double d1 = Math.asin(d0);
+
+            MathHelper.f[i] = Math.cos(d1);
+            MathHelper.e[i] = d1;
+        }
+
     }
 }
