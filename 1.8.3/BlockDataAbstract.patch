--- a/net/minecraft/server/BlockDataAbstract.java
+++ b/net/minecraft/server/BlockDataAbstract.java
@@ -5,26 +5,41 @@
 import com.google.common.collect.Iterables;
 import java.util.Collection;
 import java.util.Iterator;
+import java.util.Map.Entry;
 
 public abstract class BlockDataAbstract implements IBlockData {
 
     private static final Joiner a = Joiner.on(',');
-    private static final Function b = new BlockDataAbstractInnerClass1();
+    private static final Function<Entry<IBlockState, Comparable>, String> b = new Function() {
+        public String a(Entry<IBlockState, Comparable> entry) {
+            if (entry == null) {
+                return "<NULL>";
+            } else {
+                IBlockState iblockstate = (IBlockState) entry.getKey();
+
+                return iblockstate.a() + "=" + iblockstate.a((Comparable) entry.getValue());
+            }
+        }
+
+        public Object apply(Object object) {
+            return this.a((Entry) object);
+        }
+    };
 
     public BlockDataAbstract() {}
 
-    public IBlockData a(IBlockState iblockstate) {
+    public <T extends Comparable<T>> IBlockData a(IBlockState<T> iblockstate) {
         return this.set(iblockstate, (Comparable) a(iblockstate.c(), this.get(iblockstate)));
     }
 
-    protected static Object a(Collection collection, Object object) {
+    protected static <T> T a(Collection<T> collection, T t0) {
         Iterator iterator = collection.iterator();
 
         do {
             if (!iterator.hasNext()) {
                 return iterator.next();
             }
-        } while (!iterator.next().equals(object));
+        } while (!iterator.next().equals(t0));
 
         if (iterator.hasNext()) {
             return iterator.next();
