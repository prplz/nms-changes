--- a/net/minecraft/server/NetworkManager.java
+++ b/net/minecraft/server/NetworkManager.java
@@ -1,17 +1,24 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Queues;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
+import io.netty.channel.epoll.EpollEventLoopGroup;
 import io.netty.channel.local.LocalChannel;
+import io.netty.channel.local.LocalEventLoopGroup;
 import io.netty.channel.local.LocalServerChannel;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.handler.timeout.TimeoutException;
 import io.netty.util.AttributeKey;
+import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import java.net.SocketAddress;
 import java.util.Queue;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
 import javax.crypto.SecretKey;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.Validate;
@@ -20,59 +27,92 @@
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
 
-public class NetworkManager extends SimpleChannelInboundHandler {
+public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
 
-    private static final Logger f = LogManager.getLogger();
+    private static final Logger g = LogManager.getLogger();
     public static final Marker a = MarkerManager.getMarker("NETWORK");
     public static final Marker b = MarkerManager.getMarker("NETWORK_PACKETS", NetworkManager.a);
-    public static final AttributeKey c = AttributeKey.valueOf("protocol");
-    public static final LazyInitVar d = new LazyInitNioEventLoopGroup2();
-    public static final LazyInitVar e = new LocalEventLoopGroup2();
-    private final EnumProtocolDirection g;
-    private final Queue h = Queues.newConcurrentLinkedQueue();
-    private Channel i;
-    private SocketAddress j;
-    private PacketListener k;
-    private IChatBaseComponent l;
-    private boolean m;
-    private boolean n;
+    public static final AttributeKey<EnumProtocol> c = AttributeKey.valueOf("protocol");
+    public static final LazyInitVar<NioEventLoopGroup> d = new LazyInitVar() {
+        protected NioEventLoopGroup a() {
+            return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Client IO #%d").setDaemon(true).build());
+        }
+
+        protected Object init() {
+            return this.a();
+        }
+    };
+    public static final LazyInitVar<EpollEventLoopGroup> e = new LazyInitVar() {
+        protected EpollEventLoopGroup a() {
+            return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Client IO #%d").setDaemon(true).build());
+        }
+
+        protected Object init() {
+            return this.a();
+        }
+    };
+    public static final LazyInitVar<LocalEventLoopGroup> f = new LazyInitVar() {
+        protected LocalEventLoopGroup a() {
+            return new LocalEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Client IO #%d").setDaemon(true).build());
+        }
+
+        protected Object init() {
+            return this.a();
+        }
+    };
+    private final EnumProtocolDirection h;
+    private final Queue<NetworkManager.QueuedPacket> i = Queues.newConcurrentLinkedQueue();
+    private final ReentrantReadWriteLock j = new ReentrantReadWriteLock();
+    private Channel k;
+    private SocketAddress l;
+    private PacketListener m;
+    private IChatBaseComponent n;
+    private boolean o;
+    private boolean p;
 
     public NetworkManager(EnumProtocolDirection enumprotocoldirection) {
-        this.g = enumprotocoldirection;
+        this.h = enumprotocoldirection;
     }
 
-    public void channelActive(ChannelHandlerContext channelhandlercontext) {
+    public void channelActive(ChannelHandlerContext channelhandlercontext) throws Exception {
         super.channelActive(channelhandlercontext);
-        this.i = channelhandlercontext.channel();
-        this.j = this.i.remoteAddress();
+        this.k = channelhandlercontext.channel();
+        this.l = this.k.remoteAddress();
 
         try {
             this.a(EnumProtocol.HANDSHAKING);
         } catch (Throwable throwable) {
-            NetworkManager.f.fatal(throwable);
+            NetworkManager.g.fatal(throwable);
         }
 
     }
 
     public void a(EnumProtocol enumprotocol) {
-        this.i.attr(NetworkManager.c).set(enumprotocol);
-        this.i.config().setAutoRead(true);
-        NetworkManager.f.debug("Enabled auto read");
+        this.k.attr(NetworkManager.c).set(enumprotocol);
+        this.k.config().setAutoRead(true);
+        NetworkManager.g.debug("Enabled auto read");
     }
 
-    public void channelInactive(ChannelHandlerContext channelhandlercontext) {
+    public void channelInactive(ChannelHandlerContext channelhandlercontext) throws Exception {
         this.close(new ChatMessage("disconnect.endOfStream", new Object[0]));
     }
 
-    public void exceptionCaught(ChannelHandlerContext channelhandlercontext, Throwable throwable) {
-        NetworkManager.f.debug("Disconnecting " + this.getSocketAddress(), throwable);
-        this.close(new ChatMessage("disconnect.genericReason", new Object[] { "Internal Exception: " + throwable}));
+    public void exceptionCaught(ChannelHandlerContext channelhandlercontext, Throwable throwable) throws Exception {
+        ChatMessage chatmessage;
+
+        if (throwable instanceof TimeoutException) {
+            chatmessage = new ChatMessage("disconnect.timeout", new Object[0]);
+        } else {
+            chatmessage = new ChatMessage("disconnect.genericReason", new Object[] { "Internal Exception: " + throwable});
+        }
+
+        this.close(chatmessage);
     }
 
-    protected void a(ChannelHandlerContext channelhandlercontext, Packet packet) {
-        if (this.i.isOpen()) {
+    protected void a(ChannelHandlerContext channelhandlercontext, Packet packet) throws Exception {
+        if (this.k.isOpen()) {
             try {
-                packet.a(this.k);
+                packet.a(this.m);
             } catch (CancelledPacketHandleException cancelledpackethandleexception) {
                 ;
             }
@@ -82,45 +122,57 @@
 
     public void a(PacketListener packetlistener) {
         Validate.notNull(packetlistener, "packetListener", new Object[0]);
-        NetworkManager.f.debug("Set listener of {} to {}", new Object[] { this, packetlistener});
-        this.k = packetlistener;
+        NetworkManager.g.debug("Set listener of {} to {}", new Object[] { this, packetlistener});
+        this.m = packetlistener;
     }
 
     public void handle(Packet packet) {
-        if (this.i != null && this.i.isOpen()) {
+        if (this.g()) {
             this.m();
             this.a(packet, (GenericFutureListener[]) null);
         } else {
-            this.h.add(new QueuedPacket(packet, (GenericFutureListener[]) null));
+            this.j.writeLock().lock();
+
+            try {
+                this.i.add(new NetworkManager.QueuedPacket(packet, (GenericFutureListener[]) null));
+            } finally {
+                this.j.writeLock().unlock();
+            }
         }
 
     }
 
-    public void a(Packet packet, GenericFutureListener genericfuturelistener, GenericFutureListener... agenericfuturelistener) {
-        if (this.i != null && this.i.isOpen()) {
+    public void a(Packet packet, GenericFutureListener<? extends Future<? super Void>> genericfuturelistener, GenericFutureListener<? extends Future<? super Void>>... agenericfuturelistener) {
+        if (this.g()) {
             this.m();
             this.a(packet, (GenericFutureListener[]) ArrayUtils.add(agenericfuturelistener, 0, genericfuturelistener));
         } else {
-            this.h.add(new QueuedPacket(packet, (GenericFutureListener[]) ArrayUtils.add(agenericfuturelistener, 0, genericfuturelistener)));
+            this.j.writeLock().lock();
+
+            try {
+                this.i.add(new NetworkManager.QueuedPacket(packet, (GenericFutureListener[]) ArrayUtils.add(agenericfuturelistener, 0, genericfuturelistener)));
+            } finally {
+                this.j.writeLock().unlock();
+            }
         }
 
     }
 
-    private void a(Packet packet, GenericFutureListener[] agenericfuturelistener) {
-        EnumProtocol enumprotocol = EnumProtocol.a(packet);
-        EnumProtocol enumprotocol1 = (EnumProtocol) this.i.attr(NetworkManager.c).get();
+    private void a(final Packet packet, final GenericFutureListener<? extends Future<? super Void>>[] agenericfuturelistener) {
+        final EnumProtocol enumprotocol = EnumProtocol.a(packet);
+        final EnumProtocol enumprotocol1 = (EnumProtocol) this.k.attr(NetworkManager.c).get();
 
         if (enumprotocol1 != enumprotocol) {
-            NetworkManager.f.debug("Disabled auto read");
-            this.i.config().setAutoRead(false);
+            NetworkManager.g.debug("Disabled auto read");
+            this.k.config().setAutoRead(false);
         }
 
-        if (this.i.eventLoop().inEventLoop()) {
+        if (this.k.eventLoop().inEventLoop()) {
             if (enumprotocol != enumprotocol1) {
                 this.a(enumprotocol);
             }
 
-            ChannelFuture channelfuture = this.i.writeAndFlush(packet);
+            ChannelFuture channelfuture = this.k.writeAndFlush(packet);
 
             if (agenericfuturelistener != null) {
                 channelfuture.addListeners(agenericfuturelistener);
@@ -128,17 +180,37 @@
 
             channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
         } else {
-            this.i.eventLoop().execute(new QueuedProtocolSwitch(this, enumprotocol, enumprotocol1, packet, agenericfuturelistener));
+            this.k.eventLoop().execute(new Runnable() {
+                public void run() {
+                    if (enumprotocol != enumprotocol1) {
+                        NetworkManager.this.a(enumprotocol);
+                    }
+
+                    ChannelFuture channelfuture = NetworkManager.this.k.writeAndFlush(packet);
+
+                    if (agenericfuturelistener != null) {
+                        channelfuture.addListeners(agenericfuturelistener);
+                    }
+
+                    channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
+                }
+            });
         }
 
     }
 
     private void m() {
-        if (this.i != null && this.i.isOpen()) {
-            while (!this.h.isEmpty()) {
-                QueuedPacket queuedpacket = (QueuedPacket) this.h.poll();
+        if (this.k != null && this.k.isOpen()) {
+            this.j.readLock().lock();
 
-                this.a(QueuedPacket.a(queuedpacket), QueuedPacket.b(queuedpacket));
+            try {
+                while (!this.i.isEmpty()) {
+                    NetworkManager.QueuedPacket networkmanager_queuedpacket = (NetworkManager.QueuedPacket) this.i.poll();
+
+                    this.a(networkmanager_queuedpacket.a, networkmanager_queuedpacket.b);
+                }
+            } finally {
+                this.j.readLock().unlock();
             }
 
         }
@@ -146,97 +218,108 @@
 
     public void a() {
         this.m();
-        if (this.k instanceof IUpdatePlayerListBox) {
-            ((IUpdatePlayerListBox) this.k).c();
+        if (this.m instanceof IUpdatePlayerListBox) {
+            ((IUpdatePlayerListBox) this.m).c();
         }
 
-        this.i.flush();
+        this.k.flush();
     }
 
     public SocketAddress getSocketAddress() {
-        return this.j;
+        return this.l;
     }
 
     public void close(IChatBaseComponent ichatbasecomponent) {
-        if (this.i.isOpen()) {
-            this.i.close().awaitUninterruptibly();
-            this.l = ichatbasecomponent;
+        if (this.k.isOpen()) {
+            this.k.close().awaitUninterruptibly();
+            this.n = ichatbasecomponent;
         }
 
     }
 
     public boolean c() {
-        return this.i instanceof LocalChannel || this.i instanceof LocalServerChannel;
+        return this.k instanceof LocalChannel || this.k instanceof LocalServerChannel;
     }
 
     public void a(SecretKey secretkey) {
-        this.m = true;
-        this.i.pipeline().addBefore("splitter", "decrypt", new PacketDecrypter(MinecraftEncryption.a(2, secretkey)));
-        this.i.pipeline().addBefore("prepender", "encrypt", new PacketEncrypter(MinecraftEncryption.a(1, secretkey)));
+        this.o = true;
+        this.k.pipeline().addBefore("splitter", "decrypt", new PacketDecrypter(MinecraftEncryption.a(2, secretkey)));
+        this.k.pipeline().addBefore("prepender", "encrypt", new PacketEncrypter(MinecraftEncryption.a(1, secretkey)));
     }
 
     public boolean g() {
-        return this.i != null && this.i.isOpen();
+        return this.k != null && this.k.isOpen();
     }
 
     public boolean h() {
-        return this.i == null;
+        return this.k == null;
     }
 
     public PacketListener getPacketListener() {
-        return this.k;
+        return this.m;
     }
 
     public IChatBaseComponent j() {
-        return this.l;
+        return this.n;
     }
 
     public void k() {
-        this.i.config().setAutoRead(false);
+        this.k.config().setAutoRead(false);
     }
 
     public void a(int i) {
         if (i >= 0) {
-            if (this.i.pipeline().get("decompress") instanceof PacketDecompressor) {
-                ((PacketDecompressor) this.i.pipeline().get("decompress")).a(i);
+            if (this.k.pipeline().get("decompress") instanceof PacketDecompressor) {
+                ((PacketDecompressor) this.k.pipeline().get("decompress")).a(i);
             } else {
-                this.i.pipeline().addBefore("decoder", "decompress", new PacketDecompressor(i));
+                this.k.pipeline().addBefore("decoder", "decompress", new PacketDecompressor(i));
             }
 
-            if (this.i.pipeline().get("compress") instanceof PacketCompressor) {
-                ((PacketCompressor) this.i.pipeline().get("decompress")).a(i);
+            if (this.k.pipeline().get("compress") instanceof PacketCompressor) {
+                ((PacketCompressor) this.k.pipeline().get("decompress")).a(i);
             } else {
-                this.i.pipeline().addBefore("encoder", "compress", new PacketCompressor(i));
+                this.k.pipeline().addBefore("encoder", "compress", new PacketCompressor(i));
             }
         } else {
-            if (this.i.pipeline().get("decompress") instanceof PacketDecompressor) {
-                this.i.pipeline().remove("decompress");
+            if (this.k.pipeline().get("decompress") instanceof PacketDecompressor) {
+                this.k.pipeline().remove("decompress");
             }
 
-            if (this.i.pipeline().get("compress") instanceof PacketCompressor) {
-                this.i.pipeline().remove("compress");
+            if (this.k.pipeline().get("compress") instanceof PacketCompressor) {
+                this.k.pipeline().remove("compress");
             }
         }
 
     }
 
     public void l() {
-        if (!this.h() && !this.g() && !this.n) {
-            this.n = true;
-            if (this.j() != null) {
-                this.getPacketListener().a(this.j());
-            } else if (this.getPacketListener() != null) {
-                this.getPacketListener().a(new ChatComponentText("Disconnected"));
+        if (this.k != null && !this.k.isOpen()) {
+            if (!this.p) {
+                this.p = true;
+                if (this.j() != null) {
+                    this.getPacketListener().a(this.j());
+                } else if (this.getPacketListener() != null) {
+                    this.getPacketListener().a(new ChatComponentText("Disconnected"));
+                }
+            } else {
+                NetworkManager.g.warn("handleDisconnection() called twice");
             }
-        }
 
+        }
     }
 
-    protected void channelRead0(ChannelHandlerContext channelhandlercontext, Object object) {
+    protected void channelRead0(ChannelHandlerContext channelhandlercontext, Object object) throws Exception {
         this.a(channelhandlercontext, (Packet) object);
     }
 
-    static Channel a(NetworkManager networkmanager) {
-        return networkmanager.i;
+    static class QueuedPacket {
+
+        private final Packet a;
+        private final GenericFutureListener<? extends Future<? super Void>>[] b;
+
+        public QueuedPacket(Packet packet, GenericFutureListener<? extends Future<? super Void>>... agenericfuturelistener) {
+            this.a = packet;
+            this.b = agenericfuturelistener;
+        }
     }
 }
