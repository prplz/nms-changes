--- a/net/minecraft/server/BlockBed.java
+++ b/net/minecraft/server/BlockBed.java
@@ -5,20 +5,20 @@
 
 public class BlockBed extends BlockDirectional {
 
-    public static final BlockStateEnum PART = BlockStateEnum.of("part", EnumBedPart.class);
+    public static final BlockStateEnum<BlockBed.EnumBedPart> PART = BlockStateEnum.of("part", BlockBed.EnumBedPart.class);
     public static final BlockStateBoolean OCCUPIED = BlockStateBoolean.of("occupied");
 
     public BlockBed() {
         super(Material.CLOTH);
-        this.j(this.blockStateList.getBlockData().set(BlockBed.PART, EnumBedPart.FOOT).set(BlockBed.OCCUPIED, Boolean.valueOf(false)));
-        this.j();
+        this.j(this.blockStateList.getBlockData().set(BlockBed.PART, BlockBed.EnumBedPart.FOOT).set(BlockBed.OCCUPIED, Boolean.valueOf(false)));
+        this.l();
     }
 
     public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumDirection enumdirection, float f, float f1, float f2) {
-        if (world.isStatic) {
+        if (world.isClientSide) {
             return true;
         } else {
-            if (iblockdata.get(BlockBed.PART) != EnumBedPart.HEAD) {
+            if (iblockdata.get(BlockBed.PART) != BlockBed.EnumBedPart.HEAD) {
                 blockposition = blockposition.shift((EnumDirection) iblockdata.get(BlockBed.FACING));
                 iblockdata = world.getType(blockposition);
                 if (iblockdata.getBlock() != this) {
@@ -28,7 +28,7 @@
 
             if (world.worldProvider.e() && world.getBiome(blockposition) != BiomeBase.HELL) {
                 if (((Boolean) iblockdata.get(BlockBed.OCCUPIED)).booleanValue()) {
-                    EntityHuman entityhuman1 = this.e(world, blockposition);
+                    EntityHuman entityhuman1 = this.f(world, blockposition);
 
                     if (entityhuman1 != null) {
                         entityhuman.b((IChatBaseComponent) (new ChatMessage("tile.bed.occupied", new Object[0])));
@@ -39,16 +39,16 @@
                     world.setTypeAndData(blockposition, iblockdata, 4);
                 }
 
-                EnumBedResult enumbedresult = entityhuman.a(blockposition);
+                EntityHuman.EnumBedResult entityhuman_enumbedresult = entityhuman.a(blockposition);
 
-                if (enumbedresult == EnumBedResult.OK) {
+                if (entityhuman_enumbedresult == EntityHuman.EnumBedResult.OK) {
                     iblockdata = iblockdata.set(BlockBed.OCCUPIED, Boolean.valueOf(true));
                     world.setTypeAndData(blockposition, iblockdata, 4);
                     return true;
                 } else {
-                    if (enumbedresult == EnumBedResult.NOT_POSSIBLE_NOW) {
+                    if (entityhuman_enumbedresult == EntityHuman.EnumBedResult.NOT_POSSIBLE_NOW) {
                         entityhuman.b((IChatBaseComponent) (new ChatMessage("tile.bed.noSleep", new Object[0])));
-                    } else if (enumbedresult == EnumBedResult.NOT_SAFE) {
+                    } else if (entityhuman_enumbedresult == EntityHuman.EnumBedResult.NOT_SAFE) {
                         entityhuman.b((IChatBaseComponent) (new ChatMessage("tile.bed.notSafe", new Object[0])));
                     }
 
@@ -68,7 +68,7 @@
         }
     }
 
-    private EntityHuman e(World world, BlockPosition blockposition) {
+    private EntityHuman f(World world, BlockPosition blockposition) {
         Iterator iterator = world.players.iterator();
 
         EntityHuman entityhuman;
@@ -79,7 +79,7 @@
             }
 
             entityhuman = (EntityHuman) iterator.next();
-        } while (!entityhuman.isSleeping() || !entityhuman.bv.equals(blockposition));
+        } while (!entityhuman.isSleeping() || !entityhuman.bx.equals(blockposition));
 
         return entityhuman;
     }
@@ -93,19 +93,19 @@
     }
 
     public void updateShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        this.j();
+        this.l();
     }
 
     public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
         EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockBed.FACING);
 
-        if (iblockdata.get(BlockBed.PART) == EnumBedPart.HEAD) {
+        if (iblockdata.get(BlockBed.PART) == BlockBed.EnumBedPart.HEAD) {
             if (world.getType(blockposition.shift(enumdirection.opposite())).getBlock() != this) {
                 world.setAir(blockposition);
             }
         } else if (world.getType(blockposition.shift(enumdirection)).getBlock() != this) {
             world.setAir(blockposition);
-            if (!world.isStatic) {
+            if (!world.isClientSide) {
                 this.b(world, blockposition, iblockdata, 0);
             }
         }
@@ -113,10 +113,10 @@
     }
 
     public Item getDropType(IBlockData iblockdata, Random random, int i) {
-        return iblockdata.get(BlockBed.PART) == EnumBedPart.HEAD ? null : Items.BED;
+        return iblockdata.get(BlockBed.PART) == BlockBed.EnumBedPart.HEAD ? null : Items.BED;
     }
 
-    private void j() {
+    private void l() {
         this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.5625F, 1.0F);
     }
 
@@ -136,7 +136,7 @@
                 for (int k2 = k1; k2 <= i2; ++k2) {
                     BlockPosition blockposition1 = new BlockPosition(j2, k, k2);
 
-                    if (d(world, blockposition1)) {
+                    if (e(world, blockposition1)) {
                         if (i <= 0) {
                             return blockposition1;
                         }
@@ -150,23 +150,23 @@
         return null;
     }
 
-    protected static boolean d(World world, BlockPosition blockposition) {
+    protected static boolean e(World world, BlockPosition blockposition) {
         return World.a((IBlockAccess) world, blockposition.down()) && !world.getType(blockposition).getBlock().getMaterial().isBuildable() && !world.getType(blockposition.up()).getBlock().getMaterial().isBuildable();
     }
 
     public void dropNaturally(World world, BlockPosition blockposition, IBlockData iblockdata, float f, int i) {
-        if (iblockdata.get(BlockBed.PART) == EnumBedPart.FOOT) {
+        if (iblockdata.get(BlockBed.PART) == BlockBed.EnumBedPart.FOOT) {
             super.dropNaturally(world, blockposition, iblockdata, f, 0);
         }
 
     }
 
-    public int i() {
+    public int k() {
         return 1;
     }
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman) {
-        if (entityhuman.abilities.canInstantlyBuild && iblockdata.get(BlockBed.PART) == EnumBedPart.HEAD) {
+        if (entityhuman.abilities.canInstantlyBuild && iblockdata.get(BlockBed.PART) == BlockBed.EnumBedPart.HEAD) {
             BlockPosition blockposition1 = blockposition.shift(((EnumDirection) iblockdata.get(BlockBed.FACING)).opposite());
 
             if (world.getType(blockposition1).getBlock() == this) {
@@ -179,11 +179,11 @@
     public IBlockData fromLegacyData(int i) {
         EnumDirection enumdirection = EnumDirection.fromType2(i);
 
-        return (i & 8) > 0 ? this.getBlockData().set(BlockBed.PART, EnumBedPart.HEAD).set(BlockBed.FACING, enumdirection).set(BlockBed.OCCUPIED, Boolean.valueOf((i & 4) > 0)) : this.getBlockData().set(BlockBed.PART, EnumBedPart.FOOT).set(BlockBed.FACING, enumdirection);
+        return (i & 8) > 0 ? this.getBlockData().set(BlockBed.PART, BlockBed.EnumBedPart.HEAD).set(BlockBed.FACING, enumdirection).set(BlockBed.OCCUPIED, Boolean.valueOf((i & 4) > 0)) : this.getBlockData().set(BlockBed.PART, BlockBed.EnumBedPart.FOOT).set(BlockBed.FACING, enumdirection);
     }
 
     public IBlockData updateState(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        if (iblockdata.get(BlockBed.PART) == EnumBedPart.FOOT) {
+        if (iblockdata.get(BlockBed.PART) == BlockBed.EnumBedPart.FOOT) {
             IBlockData iblockdata1 = iblockaccess.getType(blockposition.shift((EnumDirection) iblockdata.get(BlockBed.FACING)));
 
             if (iblockdata1.getBlock() == this) {
@@ -198,7 +198,7 @@
         byte b0 = 0;
         int i = b0 | ((EnumDirection) iblockdata.get(BlockBed.FACING)).b();
 
-        if (iblockdata.get(BlockBed.PART) == EnumBedPart.HEAD) {
+        if (iblockdata.get(BlockBed.PART) == BlockBed.EnumBedPart.HEAD) {
             i |= 8;
             if (((Boolean) iblockdata.get(BlockBed.OCCUPIED)).booleanValue()) {
                 i |= 4;
@@ -211,4 +211,23 @@
     protected BlockStateList getStateList() {
         return new BlockStateList(this, new IBlockState[] { BlockBed.FACING, BlockBed.PART, BlockBed.OCCUPIED});
     }
+
+    public static enum EnumBedPart implements INamable {
+
+        HEAD("head"), FOOT("foot");
+
+        private final String c;
+
+        private EnumBedPart(String s) {
+            this.c = s;
+        }
+
+        public String toString() {
+            return this.c;
+        }
+
+        public String getName() {
+            return this.c;
+        }
+    }
 }
