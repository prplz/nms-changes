--- a/net/minecraft/server/PlayerSelector.java
+++ b/net/minecraft/server/PlayerSelector.java
@@ -2,16 +2,19 @@
 
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
+import com.google.common.collect.ComparisonChain;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.Map.Entry;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -20,13 +23,13 @@
     private static final Pattern a = Pattern.compile("^@([pare])(?:\\[([\\w=,!-]*)\\])?$");
     private static final Pattern b = Pattern.compile("\\G([-!]?[\\w-]*)(?:$|,)");
     private static final Pattern c = Pattern.compile("\\G(\\w+)=([-!]?[\\w-]*)(?:$|,)");
-    private static final Set d = Sets.newHashSet(new String[] { "x", "y", "z", "dx", "dy", "dz", "rm", "r"});
+    private static final Set<String> d = Sets.newHashSet(new String[] { "x", "y", "z", "dx", "dy", "dz", "rm", "r"});
 
     public static EntityPlayer getPlayer(ICommandListener icommandlistener, String s) {
         return (EntityPlayer) getEntity(icommandlistener, s, EntityPlayer.class);
     }
 
-    public static Entity getEntity(ICommandListener icommandlistener, String s, Class oclass) {
+    public static <T extends Entity> T getEntity(ICommandListener icommandlistener, String s, Class<? extends T> oclass) {
         List list = getPlayers(icommandlistener, s, oclass);
 
         return list.size() == 1 ? (Entity) list.get(0) : null;
@@ -51,7 +54,7 @@
         }
     }
 
-    public static List getPlayers(ICommandListener icommandlistener, String s, Class oclass) {
+    public static <T extends Entity> List<T> getPlayers(ICommandListener icommandlistener, String s, Class<? extends T> oclass) {
         Matcher matcher = PlayerSelector.a.matcher(s);
 
         if (matcher.matches() && icommandlistener.a(1, "@")) {
@@ -91,7 +94,7 @@
         }
     }
 
-    private static List a(ICommandListener icommandlistener, Map map) {
+    private static List<World> a(ICommandListener icommandlistener, Map<String, String> map) {
         ArrayList arraylist = Lists.newArrayList();
 
         if (h(map)) {
@@ -103,7 +106,7 @@
         return arraylist;
     }
 
-    private static boolean b(ICommandListener icommandlistener, Map map) {
+    private static <T extends Entity> boolean b(ICommandListener icommandlistener, Map<String, String> map) {
         String s = b(map, "type");
 
         s = s != null && s.startsWith("!") ? s.substring(1) : s;
@@ -118,10 +121,10 @@
         }
     }
 
-    private static List a(Map map, String s) {
+    private static List<Predicate<Entity>> a(Map<String, String> map, String s) {
         ArrayList arraylist = Lists.newArrayList();
-        String s1 = b(map, "type");
-        boolean flag = s1 != null && s1.startsWith("!");
+        final String s1 = b(map, "type");
+        final boolean flag = s1 != null && s1.startsWith("!");
 
         if (flag) {
             s1 = s1.substring(1);
@@ -132,117 +135,264 @@
 
         if ((s1 == null || !s.equals("e")) && !flag2) {
             if (flag1) {
-                arraylist.add(new EntitySelectorHuman());
+                arraylist.add(new Predicate() {
+                    public boolean a(Entity entity) {
+                        return entity instanceof EntityHuman;
+                    }
+
+                    public boolean apply(Object object) {
+                        return this.a((Entity) object);
+                    }
+                });
             }
         } else {
-            arraylist.add(new PlayerSelectorInnerClass1(s1, flag));
+            arraylist.add(new Predicate() {
+                public boolean a(Entity entity) {
+                    return EntityTypes.a(entity, s) != flag;
+                }
+
+                public boolean apply(Object object) {
+                    return this.a((Entity) object);
+                }
+            });
         }
 
         return arraylist;
     }
 
-    private static List b(Map map) {
+    private static List<Predicate<Entity>> b(Map<String, String> map) {
         ArrayList arraylist = Lists.newArrayList();
-        int i = a(map, "lm", -1);
-        int j = a(map, "l", -1);
+        final int i = a(map, "lm", -1);
+        final int j = a(map, "l", -1);
 
         if (i > -1 || j > -1) {
-            arraylist.add(new PlayerSelectorInnerClass2(i, j));
+            arraylist.add(new Predicate() {
+                public boolean a(Entity entity) {
+                    if (!(entity instanceof EntityPlayer)) {
+                        return false;
+                    } else {
+                        EntityPlayer entityplayer = (EntityPlayer) entity;
+
+                        return (i <= -1 || entityplayer.expLevel >= i) && (j <= -1 || entityplayer.expLevel <= j);
+                    }
+                }
+
+                public boolean apply(Object object) {
+                    return this.a((Entity) object);
+                }
+            });
         }
 
         return arraylist;
     }
 
-    private static List c(Map map) {
+    private static List<Predicate<Entity>> c(Map<String, String> map) {
         ArrayList arraylist = Lists.newArrayList();
-        int i = a(map, "m", EnumGamemode.NOT_SET.getId());
+        final int i = a(map, "m", WorldSettings.EnumGamemode.NOT_SET.getId());
+
+        if (i != WorldSettings.EnumGamemode.NOT_SET.getId()) {
+            arraylist.add(new Predicate() {
+                public boolean a(Entity entity) {
+                    if (!(entity instanceof EntityPlayer)) {
+                        return false;
+                    } else {
+                        EntityPlayer entityplayer = (EntityPlayer) entity;
+
+                        return entityplayer.playerInteractManager.getGameMode().getId() == i;
+                    }
+                }
 
-        if (i != EnumGamemode.NOT_SET.getId()) {
-            arraylist.add(new PlayerSelectorInnerClass3(i));
+                public boolean apply(Object object) {
+                    return this.a((Entity) object);
+                }
+            });
         }
 
         return arraylist;
     }
 
-    private static List d(Map map) {
+    private static List<Predicate<Entity>> d(Map<String, String> map) {
         ArrayList arraylist = Lists.newArrayList();
-        String s = b(map, "team");
-        boolean flag = s != null && s.startsWith("!");
+        final String s = b(map, "team");
+        final boolean flag = s != null && s.startsWith("!");
 
         if (flag) {
             s = s.substring(1);
         }
 
         if (s != null) {
-            arraylist.add(new PlayerSelectorInnerClass4(s, flag));
+            arraylist.add(new Predicate() {
+                public boolean a(Entity entity) {
+                    if (!(entity instanceof EntityLiving)) {
+                        return false;
+                    } else {
+                        EntityLiving entityliving = (EntityLiving) entity;
+                        ScoreboardTeamBase scoreboardteambase = entityliving.getScoreboardTeam();
+                        String s = scoreboardteambase == null ? "" : scoreboardteambase.getName();
+
+                        return s.equals(s1) != flag;
+                    }
+                }
+
+                public boolean apply(Object object) {
+                    return this.a((Entity) object);
+                }
+            });
         }
 
         return arraylist;
     }
 
-    private static List e(Map map) {
+    private static List<Predicate<Entity>> e(Map<String, String> map) {
         ArrayList arraylist = Lists.newArrayList();
-        Map map1 = a(map);
+        final Map map1 = a(map);
 
         if (map1 != null && map1.size() > 0) {
-            arraylist.add(new PlayerSelectorInnerClass5(map1));
+            arraylist.add(new Predicate() {
+                public boolean a(Entity entity) {
+                    Scoreboard scoreboard = MinecraftServer.getServer().getWorldServer(0).getScoreboard();
+                    Iterator iterator = map.entrySet().iterator();
+
+                    Entry entry;
+                    boolean flag;
+                    int i;
+
+                    do {
+                        if (!iterator.hasNext()) {
+                            return true;
+                        }
+
+                        entry = (Entry) iterator.next();
+                        String s = (String) entry.getKey();
+
+                        flag = false;
+                        if (s.endsWith("_min") && s.length() > 4) {
+                            flag = true;
+                            s = s.substring(0, s.length() - 4);
+                        }
+
+                        ScoreboardObjective scoreboardobjective = scoreboard.getObjective(s);
+
+                        if (scoreboardobjective == null) {
+                            return false;
+                        }
+
+                        String s1 = entity instanceof EntityPlayer ? entity.getName() : entity.getUniqueID().toString();
+
+                        if (!scoreboard.b(s1, scoreboardobjective)) {
+                            return false;
+                        }
+
+                        ScoreboardScore scoreboardscore = scoreboard.getPlayerScoreForObjective(s1, scoreboardobjective);
+
+                        i = scoreboardscore.getScore();
+                        if (i < ((Integer) entry.getValue()).intValue() && flag) {
+                            return false;
+                        }
+                    } while (i <= ((Integer) entry.getValue()).intValue() || flag);
+
+                    return false;
+                }
+
+                public boolean apply(Object object) {
+                    return this.a((Entity) object);
+                }
+            });
         }
 
         return arraylist;
     }
 
-    private static List f(Map map) {
+    private static List<Predicate<Entity>> f(Map<String, String> map) {
         ArrayList arraylist = Lists.newArrayList();
-        String s = b(map, "name");
-        boolean flag = s != null && s.startsWith("!");
+        final String s = b(map, "name");
+        final boolean flag = s != null && s.startsWith("!");
 
         if (flag) {
             s = s.substring(1);
         }
 
         if (s != null) {
-            arraylist.add(new PlayerSelectorInnerClass6(s, flag));
+            arraylist.add(new Predicate() {
+                public boolean a(Entity entity) {
+                    return entity.getName().equals(s) != flag;
+                }
+
+                public boolean apply(Object object) {
+                    return this.a((Entity) object);
+                }
+            });
         }
 
         return arraylist;
     }
 
-    private static List a(Map map, BlockPosition blockposition) {
+    private static List<Predicate<Entity>> a(Map<String, String> map, final BlockPosition blockposition) {
         ArrayList arraylist = Lists.newArrayList();
-        int i = a(map, "rm", -1);
-        int j = a(map, "r", -1);
+        final int i = a(map, "rm", -1);
+        final int j = a(map, "r", -1);
 
         if (blockposition != null && (i >= 0 || j >= 0)) {
-            int k = i * i;
-            int l = j * j;
+            final int k = i * i;
+            final int l = j * j;
+
+            arraylist.add(new Predicate() {
+                public boolean a(Entity entity) {
+                    int i = (int) entity.c(blockposition);
 
-            arraylist.add(new PlayerSelectorInnerClass7(blockposition, i, k, j, l));
+                    return (j < 0 || i >= k) && (l < 0 || i <= i1);
+                }
+
+                public boolean apply(Object object) {
+                    return this.a((Entity) object);
+                }
+            });
         }
 
         return arraylist;
     }
 
-    private static List g(Map map) {
+    private static List<Predicate<Entity>> g(Map<String, String> map) {
         ArrayList arraylist = Lists.newArrayList();
-        int i;
-        int j;
+        final int i;
+        final int j;
 
         if (map.containsKey("rym") || map.containsKey("ry")) {
             i = a(a(map, "rym", 0));
             j = a(a(map, "ry", 359));
-            arraylist.add(new PlayerSelectorInnerClass8(i, j));
+            arraylist.add(new Predicate() {
+                public boolean a(Entity entity) {
+                    int i = PlayerSelector.a((int) Math.floor((double) entity.yaw));
+
+                    return j > k ? i >= j || i <= k : i >= j && i <= k;
+                }
+
+                public boolean apply(Object object) {
+                    return this.a((Entity) object);
+                }
+            });
         }
 
         if (map.containsKey("rxm") || map.containsKey("rx")) {
             i = a(a(map, "rxm", 0));
             j = a(a(map, "rx", 359));
-            arraylist.add(new PlayerSelectorInnerClass9(i, j));
+            arraylist.add(new Predicate() {
+                public boolean a(Entity entity) {
+                    int i = PlayerSelector.a((int) Math.floor((double) entity.pitch));
+
+                    return j > k ? i >= j || i <= k : i >= j && i <= k;
+                }
+
+                public boolean apply(Object object) {
+                    return this.a((Entity) object);
+                }
+            });
         }
 
         return arraylist;
     }
 
-    private static List a(Map map, Class oclass, List list, String s, World world, BlockPosition blockposition) {
+    private static <T extends Entity> List<T> a(Map<String, String> map, Class<? extends T> oclass, List<Predicate<Entity>> list, String s, World world, BlockPosition blockposition) {
         ArrayList arraylist = Lists.newArrayList();
         String s1 = b(map, "type");
 
@@ -260,7 +410,7 @@
             int i1 = world.players.size();
             int j1 = world.entityList.size();
             boolean flag2 = i1 < j1 / 16;
-            AxisAlignedBB axisalignedbb;
+            final AxisAlignedBB axisalignedbb;
 
             if (!map.containsKey("dx") && !map.containsKey("dy") && !map.containsKey("dz")) {
                 if (l >= 0) {
@@ -280,9 +430,17 @@
             } else {
                 axisalignedbb = a(blockposition, i, j, k);
                 if (flag && flag2 && !flag1) {
-                    PlayerSelectorInnerClassBoundsChecker playerselectorinnerclassboundschecker = new PlayerSelectorInnerClassBoundsChecker(axisalignedbb);
+                    Predicate predicate2 = new Predicate() {
+                        public boolean a(Entity entity) {
+                            return entity.locX >= axisalignedbb.a && entity.locY >= axisalignedbb.b && entity.locZ >= axisalignedbb.c ? entity.locX < axisalignedbb.d && entity.locY < axisalignedbb.e && entity.locZ < axisalignedbb.f : false;
+                        }
+
+                        public boolean apply(Object object) {
+                            return this.a((Entity) object);
+                        }
+                    };
 
-                    arraylist.addAll(world.b(oclass, Predicates.and(predicate1, playerselectorinnerclassboundschecker)));
+                    arraylist.addAll(world.b(oclass, Predicates.and(predicate1, predicate2)));
                 } else {
                     arraylist.addAll(world.a(oclass, axisalignedbb, predicate1));
                 }
@@ -298,7 +456,7 @@
         return arraylist;
     }
 
-    private static List a(List list, Map map, ICommandListener icommandlistener, Class oclass, String s, BlockPosition blockposition) {
+    private static <T extends Entity> List<T> a(List<T> list, Map<String, String> map, ICommandListener icommandlistener, Class<? extends T> oclass, String s, final BlockPosition blockposition) {
         int i = a(map, "c", !s.equals("a") && !s.equals("e") ? 1 : 0);
 
         if (!s.equals("p") && !s.equals("a") && !s.equals("e")) {
@@ -306,7 +464,15 @@
                 Collections.shuffle((List) list);
             }
         } else if (blockposition != null) {
-            Collections.sort((List) list, new PlayerSelectorInnerClass10(blockposition));
+            Collections.sort((List) list, new Comparator() {
+                public int a(Entity entity, Entity entity1) {
+                    return ComparisonChain.start().compare(entity.b(blockposition), entity1.b(blockposition)).result();
+                }
+
+                public int compare(Object object, Object object1) {
+                    return this.a((Entity) object, (Entity) object1);
+                }
+            });
         }
 
         Entity entity = icommandlistener.f();
@@ -353,11 +519,11 @@
         return i;
     }
 
-    private static BlockPosition b(Map map, BlockPosition blockposition) {
+    private static BlockPosition b(Map<String, String> map, BlockPosition blockposition) {
         return new BlockPosition(a(map, "x", blockposition.getX()), a(map, "y", blockposition.getY()), a(map, "z", blockposition.getZ()));
     }
 
-    private static boolean h(Map map) {
+    private static boolean h(Map<String, String> map) {
         Iterator iterator = PlayerSelector.d.iterator();
 
         String s;
@@ -373,15 +539,15 @@
         return true;
     }
 
-    private static int a(Map map, String s, int i) {
+    private static int a(Map<String, String> map, String s, int i) {
         return map.containsKey(s) ? MathHelper.a((String) map.get(s), i) : i;
     }
 
-    private static String b(Map map, String s) {
+    private static String b(Map<String, String> map, String s) {
         return (String) map.get(s);
     }
 
-    public static Map a(Map map) {
+    public static Map<String, Integer> a(Map<String, String> map) {
         HashMap hashmap = Maps.newHashMap();
         Iterator iterator = map.keySet().iterator();
 
@@ -414,7 +580,7 @@
         return PlayerSelector.a.matcher(s).matches();
     }
 
-    private static Map c(String s) {
+    private static Map<String, String> c(String s) {
         HashMap hashmap = Maps.newHashMap();
 
         if (s == null) {
