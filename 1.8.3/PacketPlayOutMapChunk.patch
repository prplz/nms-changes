--- a/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -1,14 +1,15 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Iterator;
 
-public class PacketPlayOutMapChunk implements Packet {
+public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
 
     private int a;
     private int b;
-    private ChunkMap c;
+    private PacketPlayOutMapChunk.ChunkMap c;
     private boolean d;
 
     public PacketPlayOutMapChunk() {}
@@ -20,16 +21,16 @@
         this.c = a(chunk, flag, !chunk.getWorld().worldProvider.o(), i);
     }
 
-    public void a(PacketDataSerializer packetdataserializer) {
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
         this.a = packetdataserializer.readInt();
         this.b = packetdataserializer.readInt();
         this.d = packetdataserializer.readBoolean();
-        this.c = new ChunkMap();
+        this.c = new PacketPlayOutMapChunk.ChunkMap();
         this.c.b = packetdataserializer.readShort();
         this.c.a = packetdataserializer.a();
     }
 
-    public void b(PacketDataSerializer packetdataserializer) {
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
         packetdataserializer.writeInt(this.a);
         packetdataserializer.writeInt(this.b);
         packetdataserializer.writeBoolean(this.d);
@@ -50,9 +51,9 @@
         return j + k + l + i1;
     }
 
-    public static ChunkMap a(Chunk chunk, boolean flag, boolean flag1, int i) {
+    public static PacketPlayOutMapChunk.ChunkMap a(Chunk chunk, boolean flag, boolean flag1, int i) {
         ChunkSection[] achunksection = chunk.getSections();
-        ChunkMap chunkmap = new ChunkMap();
+        PacketPlayOutMapChunk.ChunkMap packetplayoutmapchunk_chunkmap = new PacketPlayOutMapChunk.ChunkMap();
         ArrayList arraylist = Lists.newArrayList();
 
         int j;
@@ -61,12 +62,12 @@
             ChunkSection chunksection = achunksection[j];
 
             if (chunksection != null && (!flag || !chunksection.a()) && (i & 1 << j) != 0) {
-                chunkmap.b |= 1 << j;
+                packetplayoutmapchunk_chunkmap.b |= 1 << j;
                 arraylist.add(chunksection);
             }
         }
 
-        chunkmap.a = new byte[a(Integer.bitCount(chunkmap.b), flag1, flag)];
+        packetplayoutmapchunk_chunkmap.a = new byte[a(Integer.bitCount(packetplayoutmapchunk_chunkmap.b), flag1, flag)];
         j = 0;
         Iterator iterator = arraylist.iterator();
 
@@ -81,26 +82,26 @@
             for (int l = 0; l < k; ++l) {
                 char c0 = achar1[l];
 
-                chunkmap.a[j++] = (byte) (c0 & 255);
-                chunkmap.a[j++] = (byte) (c0 >> 8 & 255);
+                packetplayoutmapchunk_chunkmap.a[j++] = (byte) (c0 & 255);
+                packetplayoutmapchunk_chunkmap.a[j++] = (byte) (c0 >> 8 & 255);
             }
         }
 
-        for (iterator = arraylist.iterator(); iterator.hasNext(); j = a(chunksection1.getEmittedLightArray().a(), chunkmap.a, j)) {
+        for (iterator = arraylist.iterator(); iterator.hasNext(); j = a(chunksection1.getEmittedLightArray().a(), packetplayoutmapchunk_chunkmap.a, j)) {
             chunksection1 = (ChunkSection) iterator.next();
         }
 
         if (flag1) {
-            for (iterator = arraylist.iterator(); iterator.hasNext(); j = a(chunksection1.getSkyLightArray().a(), chunkmap.a, j)) {
+            for (iterator = arraylist.iterator(); iterator.hasNext(); j = a(chunksection1.getSkyLightArray().a(), packetplayoutmapchunk_chunkmap.a, j)) {
                 chunksection1 = (ChunkSection) iterator.next();
             }
         }
 
         if (flag) {
-            a(chunk.getBiomeIndex(), chunkmap.a, j);
+            a(chunk.getBiomeIndex(), packetplayoutmapchunk_chunkmap.a, j);
         }
 
-        return chunkmap;
+        return packetplayoutmapchunk_chunkmap;
     }
 
     private static int a(byte[] abyte, byte[] abyte1, int i) {
@@ -111,4 +112,12 @@
     public void a(PacketListener packetlistener) {
         this.a((PacketListenerPlayOut) packetlistener);
     }
+
+    public static class ChunkMap {
+
+        public byte[] a;
+        public int b;
+
+        public ChunkMap() {}
+    }
 }
