--- a/net/minecraft/server/EntitySpider.java
+++ b/net/minecraft/server/EntitySpider.java
@@ -1,21 +1,26 @@
 package net.minecraft.server;
 
+import java.util.Random;
+
 public class EntitySpider extends EntityMonster {
 
     public EntitySpider(World world) {
         super(world);
-        this.a(1.4F, 0.9F);
+        this.setSize(1.4F, 0.9F);
         this.goalSelector.a(1, new PathfinderGoalFloat(this));
-        this.goalSelector.a(2, this.a);
         this.goalSelector.a(3, new PathfinderGoalLeapAtTarget(this, 0.4F));
-        this.goalSelector.a(4, new PathfinderGoalSpiderMeleeAttack(this, EntityHuman.class));
-        this.goalSelector.a(4, new PathfinderGoalSpiderMeleeAttack(this, EntityIronGolem.class));
+        this.goalSelector.a(4, new EntitySpider.PathfinderGoalSpiderMeleeAttack(this, EntityHuman.class));
+        this.goalSelector.a(4, new EntitySpider.PathfinderGoalSpiderMeleeAttack(this, EntityIronGolem.class));
         this.goalSelector.a(5, new PathfinderGoalRandomStroll(this, 0.8D));
         this.goalSelector.a(6, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 8.0F));
         this.goalSelector.a(6, new PathfinderGoalRandomLookaround(this));
         this.targetSelector.a(1, new PathfinderGoalHurtByTarget(this, false, new Class[0]));
-        this.targetSelector.a(2, new PathfinderGoalSpiderNearestAttackableTarget(this, EntityHuman.class));
-        this.targetSelector.a(3, new PathfinderGoalSpiderNearestAttackableTarget(this, EntityIronGolem.class));
+        this.targetSelector.a(2, new EntitySpider.PathfinderGoalSpiderNearestAttackableTarget(this, EntityHuman.class));
+        this.targetSelector.a(3, new EntitySpider.PathfinderGoalSpiderNearestAttackableTarget(this, EntityIronGolem.class));
+    }
+
+    public double an() {
+        return (double) (this.length * 0.5F);
     }
 
     protected NavigationAbstract b(World world) {
@@ -27,16 +32,16 @@
         this.datawatcher.a(16, new Byte((byte) 0));
     }
 
-    public void s_() {
-        super.s_();
-        if (!this.world.isStatic) {
+    public void t_() {
+        super.t_();
+        if (!this.world.isClientSide) {
             this.a(this.positionChanged);
         }
 
     }
 
-    protected void aW() {
-        super.aW();
+    protected void initAttributes() {
+        super.initAttributes();
         this.getAttributeInstance(GenericAttributes.maxHealth).setValue(16.0D);
         this.getAttributeInstance(GenericAttributes.d).setValue(0.30000001192092896D);
     }
@@ -45,11 +50,11 @@
         return "mob.spider.say";
     }
 
-    protected String bn() {
+    protected String bo() {
         return "mob.spider.say";
     }
 
-    protected String bo() {
+    protected String bp() {
         return "mob.spider.death";
     }
 
@@ -69,11 +74,11 @@
 
     }
 
-    public boolean j_() {
+    public boolean k_() {
         return this.n();
     }
 
-    public void aB() {}
+    public void aA() {}
 
     public EnumMonsterType getMonsterType() {
         return EnumMonsterType.ARTHROPOD;
@@ -112,14 +117,14 @@
         }
 
         if (object == null) {
-            object = new GroupDataSpider();
+            object = new EntitySpider.GroupDataSpider();
             if (this.world.getDifficulty() == EnumDifficulty.HARD && this.world.random.nextFloat() < 0.1F * difficultydamagescaler.c()) {
-                ((GroupDataSpider) object).a(this.world.random);
+                ((EntitySpider.GroupDataSpider) object).a(this.world.random);
             }
         }
 
-        if (object instanceof GroupDataSpider) {
-            int i = ((GroupDataSpider) object).a;
+        if (object instanceof EntitySpider.GroupDataSpider) {
+            int i = ((EntitySpider.GroupDataSpider) object).a;
 
             if (i > 0 && MobEffectList.byId[i] != null) {
                 this.addEffect(new MobEffect(i, Integer.MAX_VALUE));
@@ -132,4 +137,61 @@
     public float getHeadHeight() {
         return 0.65F;
     }
+
+    static class PathfinderGoalSpiderNearestAttackableTarget<T extends EntityLiving> extends PathfinderGoalNearestAttackableTarget {
+
+        public PathfinderGoalSpiderNearestAttackableTarget(EntitySpider entityspider, Class<T> oclass) {
+            super(entityspider, oclass, true);
+        }
+
+        public boolean a() {
+            float f = this.e.c(1.0F);
+
+            return f >= 0.5F ? false : super.a();
+        }
+    }
+
+    static class PathfinderGoalSpiderMeleeAttack extends PathfinderGoalMeleeAttack {
+
+        public PathfinderGoalSpiderMeleeAttack(EntitySpider entityspider, Class<? extends Entity> oclass) {
+            super(entityspider, oclass, 1.0D, true);
+        }
+
+        public boolean b() {
+            float f = this.b.c(1.0F);
+
+            if (f >= 0.5F && this.b.bc().nextInt(100) == 0) {
+                this.b.setGoalTarget((EntityLiving) null);
+                return false;
+            } else {
+                return super.b();
+            }
+        }
+
+        protected double a(EntityLiving entityliving) {
+            return (double) (4.0F + entityliving.width);
+        }
+    }
+
+    public static class GroupDataSpider implements GroupDataEntity {
+
+        public int a;
+
+        public GroupDataSpider() {}
+
+        public void a(Random random) {
+            int i = random.nextInt(5);
+
+            if (i <= 1) {
+                this.a = MobEffectList.FASTER_MOVEMENT.id;
+            } else if (i <= 2) {
+                this.a = MobEffectList.INCREASE_DAMAGE.id;
+            } else if (i <= 3) {
+                this.a = MobEffectList.REGENERATION.id;
+            } else if (i <= 4) {
+                this.a = MobEffectList.INVISIBILITY.id;
+            }
+
+        }
+    }
 }
