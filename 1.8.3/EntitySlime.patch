--- a/net/minecraft/server/EntitySlime.java
+++ b/net/minecraft/server/EntitySlime.java
@@ -5,15 +5,15 @@
     public float a;
     public float b;
     public float c;
-    private boolean bi;
+    private boolean bk;
 
     public EntitySlime(World world) {
         super(world);
-        this.moveController = new ControllerMoveSlime(this);
-        this.goalSelector.a(1, new PathfinderGoalSlimeRandomJump(this));
-        this.goalSelector.a(2, new PathfinderGoalSlimeNearestPlayer(this));
-        this.goalSelector.a(3, new PathfinderGoalSlimeRandomDirection(this));
-        this.goalSelector.a(5, new PathfinderGoalSlimeIdle(this));
+        this.moveController = new EntitySlime.ControllerMoveSlime(this);
+        this.goalSelector.a(1, new EntitySlime.PathfinderGoalSlimeRandomJump(this));
+        this.goalSelector.a(2, new EntitySlime.PathfinderGoalSlimeNearestPlayer(this));
+        this.goalSelector.a(3, new EntitySlime.PathfinderGoalSlimeRandomDirection(this));
+        this.goalSelector.a(5, new EntitySlime.PathfinderGoalSlimeIdle(this));
         this.targetSelector.a(1, new PathfinderGoalTargetNearestPlayer(this));
         this.targetSelector.a(3, new PathfinderGoalNearestAttackableTargetInsentient(this, EntityIronGolem.class));
     }
@@ -23,9 +23,9 @@
         this.datawatcher.a(16, Byte.valueOf((byte) 1));
     }
 
-    public void setSize(int i) {
+    protected void setSize(int i) {
         this.datawatcher.watch(16, Byte.valueOf((byte) i));
-        this.a(0.51000005F * (float) i, 0.51000005F * (float) i);
+        this.setSize(0.51000005F * (float) i, 0.51000005F * (float) i);
         this.setPosition(this.locX, this.locY, this.locZ);
         this.getAttributeInstance(GenericAttributes.maxHealth).setValue((double) (i * i));
         this.getAttributeInstance(GenericAttributes.d).setValue((double) (0.2F + 0.1F * (float) i));
@@ -40,7 +40,7 @@
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
         nbttagcompound.setInt("Size", this.getSize() - 1);
-        nbttagcompound.setBoolean("wasOnGround", this.bi);
+        nbttagcompound.setBoolean("wasOnGround", this.bk);
     }
 
     public void a(NBTTagCompound nbttagcompound) {
@@ -52,26 +52,26 @@
         }
 
         this.setSize(i + 1);
-        this.bi = nbttagcompound.getBoolean("wasOnGround");
+        this.bk = nbttagcompound.getBoolean("wasOnGround");
     }
 
     protected EnumParticle n() {
         return EnumParticle.SLIME;
     }
 
-    protected String ci() {
+    protected String ck() {
         return "mob.slime." + (this.getSize() > 1 ? "big" : "small");
     }
 
-    public void s_() {
-        if (!this.world.isStatic && this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.getSize() > 0) {
+    public void t_() {
+        if (!this.world.isClientSide && this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.getSize() > 0) {
             this.dead = true;
         }
 
         this.b += (this.a - this.b) * 0.5F;
         this.c = this.b;
-        super.s_();
-        if (this.onGround && !this.bi) {
+        super.t_();
+        if (this.onGround && !this.bk) {
             int i = this.getSize();
 
             for (int j = 0; j < i * 8; ++j) {
@@ -87,28 +87,28 @@
                 world.addParticle(enumparticle, d0, this.getBoundingBox().b, d1, 0.0D, 0.0D, 0.0D, new int[0]);
             }
 
-            if (this.cj()) {
-                this.makeSound(this.ci(), this.bA(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) / 0.8F);
+            if (this.cl()) {
+                this.makeSound(this.ck(), this.bB(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) / 0.8F);
             }
 
             this.a = -0.5F;
-        } else if (!this.onGround && this.bi) {
+        } else if (!this.onGround && this.bk) {
             this.a = 1.0F;
         }
 
-        this.bi = this.onGround;
-        this.cf();
+        this.bk = this.onGround;
+        this.ch();
     }
 
-    protected void cf() {
+    protected void ch() {
         this.a *= 0.6F;
     }
 
-    protected int ce() {
+    protected int cg() {
         return this.random.nextInt(20) + 10;
     }
 
-    protected EntitySlime cd() {
+    protected EntitySlime cf() {
         return new EntitySlime(this.world);
     }
 
@@ -116,9 +116,9 @@
         if (i == 16) {
             int j = this.getSize();
 
-            this.a(0.51000005F * (float) j, 0.51000005F * (float) j);
-            this.yaw = this.aI;
-            this.aG = this.aI;
+            this.setSize(0.51000005F * (float) j, 0.51000005F * (float) j);
+            this.yaw = this.aK;
+            this.aI = this.aK;
             if (this.V() && this.random.nextInt(20) == 0) {
                 this.X();
             }
@@ -130,20 +130,20 @@
     public void die() {
         int i = this.getSize();
 
-        if (!this.world.isStatic && i > 1 && this.getHealth() <= 0.0F) {
+        if (!this.world.isClientSide && i > 1 && this.getHealth() <= 0.0F) {
             int j = 2 + this.random.nextInt(3);
 
             for (int k = 0; k < j; ++k) {
                 float f = ((float) (k % 2) - 0.5F) * (float) i / 4.0F;
                 float f1 = ((float) (k / 2) - 0.5F) * (float) i / 4.0F;
-                EntitySlime entityslime = this.cd();
+                EntitySlime entityslime = this.cf();
 
                 if (this.hasCustomName()) {
                     entityslime.setCustomName(this.getCustomName());
                 }
 
                 if (this.isPersistent()) {
-                    entityslime.bW();
+                    entityslime.bX();
                 }
 
                 entityslime.setSize(i / 2);
@@ -157,14 +157,14 @@
 
     public void collide(Entity entity) {
         super.collide(entity);
-        if (entity instanceof EntityIronGolem && this.cg()) {
+        if (entity instanceof EntityIronGolem && this.ci()) {
             this.e((EntityLiving) entity);
         }
 
     }
 
     public void d(EntityHuman entityhuman) {
-        if (this.cg()) {
+        if (this.ci()) {
             this.e((EntityLiving) entityhuman);
         }
 
@@ -173,7 +173,7 @@
     protected void e(EntityLiving entityliving) {
         int i = this.getSize();
 
-        if (this.hasLineOfSight(entityliving) && this.h(entityliving) < 0.6D * (double) i * 0.6D * (double) i && entityliving.damageEntity(DamageSource.mobAttack(this), (float) this.ch())) {
+        if (this.hasLineOfSight(entityliving) && this.h(entityliving) < 0.6D * (double) i * 0.6D * (double) i && entityliving.damageEntity(DamageSource.mobAttack(this), (float) this.cj())) {
             this.makeSound("mob.attack", 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
             this.a((EntityLiving) this, (Entity) entityliving);
         }
@@ -184,19 +184,19 @@
         return 0.625F * this.length;
     }
 
-    protected boolean cg() {
+    protected boolean ci() {
         return this.getSize() > 1;
     }
 
-    protected int ch() {
+    protected int cj() {
         return this.getSize();
     }
 
-    protected String bn() {
+    protected String bo() {
         return "mob.slime." + (this.getSize() > 1 ? "big" : "small");
     }
 
-    protected String bo() {
+    protected String bp() {
         return "mob.slime." + (this.getSize() > 1 ? "big" : "small");
     }
 
@@ -204,21 +204,22 @@
         return this.getSize() == 1 ? Items.SLIME : null;
     }
 
-    public boolean bQ() {
-        Chunk chunk = this.world.getChunkAtWorldCoords(new BlockPosition(MathHelper.floor(this.locX), 0, MathHelper.floor(this.locZ)));
+    public boolean bR() {
+        BlockPosition blockposition = new BlockPosition(MathHelper.floor(this.locX), 0, MathHelper.floor(this.locZ));
+        Chunk chunk = this.world.getChunkAtWorldCoords(blockposition);
 
         if (this.world.getWorldData().getType() == WorldType.FLAT && this.random.nextInt(4) != 1) {
             return false;
         } else {
             if (this.world.getDifficulty() != EnumDifficulty.PEACEFUL) {
-                BiomeBase biomebase = this.world.getBiome(new BlockPosition(MathHelper.floor(this.locX), 0, MathHelper.floor(this.locZ)));
+                BiomeBase biomebase = this.world.getBiome(blockposition);
 
                 if (biomebase == BiomeBase.SWAMPLAND && this.locY > 50.0D && this.locY < 70.0D && this.random.nextFloat() < 0.5F && this.random.nextFloat() < this.world.y() && this.world.getLightLevel(new BlockPosition(this)) <= this.random.nextInt(8)) {
-                    return super.bQ();
+                    return super.bR();
                 }
 
                 if (this.random.nextInt(10) == 0 && chunk.a(987234911L).nextInt(10) == 0 && this.locY < 40.0D) {
-                    return super.bQ();
+                    return super.bR();
                 }
             }
 
@@ -226,23 +227,23 @@
         }
     }
 
-    protected float bA() {
+    protected float bB() {
         return 0.4F * (float) this.getSize();
     }
 
-    public int bP() {
+    public int bQ() {
         return 0;
     }
 
-    protected boolean cl() {
+    protected boolean cn() {
         return this.getSize() > 0;
     }
 
-    protected boolean cj() {
+    protected boolean cl() {
         return this.getSize() > 2;
     }
 
-    protected void bE() {
+    protected void bF() {
         this.motY = 0.41999998688697815D;
         this.ai = true;
     }
@@ -259,4 +260,157 @@
         this.setSize(j);
         return super.prepare(difficultydamagescaler, groupdataentity);
     }
+
+    static class PathfinderGoalSlimeIdle extends PathfinderGoal {
+
+        private EntitySlime a;
+
+        public PathfinderGoalSlimeIdle(EntitySlime entityslime) {
+            this.a = entityslime;
+            this.a(5);
+        }
+
+        public boolean a() {
+            return true;
+        }
+
+        public void e() {
+            ((EntitySlime.ControllerMoveSlime) this.a.getControllerMove()).a(1.0D);
+        }
+    }
+
+    static class PathfinderGoalSlimeRandomJump extends PathfinderGoal {
+
+        private EntitySlime a;
+
+        public PathfinderGoalSlimeRandomJump(EntitySlime entityslime) {
+            this.a = entityslime;
+            this.a(5);
+            ((Navigation) entityslime.getNavigation()).d(true);
+        }
+
+        public boolean a() {
+            return this.a.V() || this.a.ab();
+        }
+
+        public void e() {
+            if (this.a.bc().nextFloat() < 0.8F) {
+                this.a.getControllerJump().a();
+            }
+
+            ((EntitySlime.ControllerMoveSlime) this.a.getControllerMove()).a(1.2D);
+        }
+    }
+
+    static class PathfinderGoalSlimeRandomDirection extends PathfinderGoal {
+
+        private EntitySlime a;
+        private float b;
+        private int c;
+
+        public PathfinderGoalSlimeRandomDirection(EntitySlime entityslime) {
+            this.a = entityslime;
+            this.a(2);
+        }
+
+        public boolean a() {
+            return this.a.getGoalTarget() == null && (this.a.onGround || this.a.V() || this.a.ab());
+        }
+
+        public void e() {
+            if (--this.c <= 0) {
+                this.c = 40 + this.a.bc().nextInt(60);
+                this.b = (float) this.a.bc().nextInt(360);
+            }
+
+            ((EntitySlime.ControllerMoveSlime) this.a.getControllerMove()).a(this.b, false);
+        }
+    }
+
+    static class PathfinderGoalSlimeNearestPlayer extends PathfinderGoal {
+
+        private EntitySlime a;
+        private int b;
+
+        public PathfinderGoalSlimeNearestPlayer(EntitySlime entityslime) {
+            this.a = entityslime;
+            this.a(2);
+        }
+
+        public boolean a() {
+            EntityLiving entityliving = this.a.getGoalTarget();
+
+            return entityliving == null ? false : (!entityliving.isAlive() ? false : !(entityliving instanceof EntityHuman) || !((EntityHuman) entityliving).abilities.isInvulnerable);
+        }
+
+        public void c() {
+            this.b = 300;
+            super.c();
+        }
+
+        public boolean b() {
+            EntityLiving entityliving = this.a.getGoalTarget();
+
+            return entityliving == null ? false : (!entityliving.isAlive() ? false : (entityliving instanceof EntityHuman && ((EntityHuman) entityliving).abilities.isInvulnerable ? false : --this.b > 0));
+        }
+
+        public void e() {
+            this.a.a(this.a.getGoalTarget(), 10.0F, 10.0F);
+            ((EntitySlime.ControllerMoveSlime) this.a.getControllerMove()).a(this.a.yaw, this.a.ci());
+        }
+    }
+
+    static class ControllerMoveSlime extends ControllerMove {
+
+        private float g;
+        private int h;
+        private EntitySlime i;
+        private boolean j;
+
+        public ControllerMoveSlime(EntitySlime entityslime) {
+            super(entityslime);
+            this.i = entityslime;
+        }
+
+        public void a(float f, boolean flag) {
+            this.g = f;
+            this.j = flag;
+        }
+
+        public void a(double d0) {
+            this.e = d0;
+            this.f = true;
+        }
+
+        public void c() {
+            this.a.yaw = this.a(this.a.yaw, this.g, 30.0F);
+            this.a.aK = this.a.yaw;
+            this.a.aI = this.a.yaw;
+            if (!this.f) {
+                this.a.n(0.0F);
+            } else {
+                this.f = false;
+                if (this.a.onGround) {
+                    this.a.k((float) (this.e * this.a.getAttributeInstance(GenericAttributes.d).getValue()));
+                    if (this.h-- <= 0) {
+                        this.h = this.i.cg();
+                        if (this.j) {
+                            this.h /= 3;
+                        }
+
+                        this.i.getControllerJump().a();
+                        if (this.i.cn()) {
+                            this.i.makeSound(this.i.ck(), this.i.bB(), ((this.i.bc().nextFloat() - this.i.bc().nextFloat()) * 0.2F + 1.0F) * 0.8F);
+                        }
+                    } else {
+                        this.i.aZ = this.i.ba = 0.0F;
+                        this.a.k(0.0F);
+                    }
+                } else {
+                    this.a.k((float) (this.e * this.a.getAttributeInstance(GenericAttributes.d).getValue()));
+                }
+
+            }
+        }
+    }
 }
