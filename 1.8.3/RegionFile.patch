--- a/net/minecraft/server/RegionFile.java
+++ b/net/minecraft/server/RegionFile.java
@@ -3,6 +3,7 @@
 import com.google.common.collect.Lists;
 import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
@@ -20,7 +21,7 @@
     private RandomAccessFile c;
     private final int[] d = new int[1024];
     private final int[] e = new int[1024];
-    private List f;
+    private List<Boolean> f;
     private int g;
     private long h;
 
@@ -137,7 +138,7 @@
     }
 
     public DataOutputStream b(int i, int j) {
-        return this.d(i, j) ? null : new DataOutputStream(new DeflaterOutputStream(new ChunkBuffer(this, i, j)));
+        return this.d(i, j) ? null : new DataOutputStream(new DeflaterOutputStream(new RegionFile.ChunkBuffer(i, j)));
     }
 
     protected synchronized void a(int i, int j, byte[] abyte, int k) {
@@ -207,14 +208,14 @@
                 }
             }
 
-            this.b(i, j, (int) (MinecraftServer.ax() / 1000L));
+            this.b(i, j, (int) (MinecraftServer.ay() / 1000L));
         } catch (IOException ioexception) {
             ioexception.printStackTrace();
         }
 
     }
 
-    private void a(int i, byte[] abyte, int j) {
+    private void a(int i, byte[] abyte, int j) throws IOException {
         this.c.seek((long) (i * 4096));
         this.c.writeInt(j + 1);
         this.c.writeByte(2);
@@ -233,22 +234,38 @@
         return this.e(i, j) != 0;
     }
 
-    private void a(int i, int j, int k) {
+    private void a(int i, int j, int k) throws IOException {
         this.d[i + j * 32] = k;
         this.c.seek((long) ((i + j * 32) * 4));
         this.c.writeInt(k);
     }
 
-    private void b(int i, int j, int k) {
+    private void b(int i, int j, int k) throws IOException {
         this.e[i + j * 32] = k;
         this.c.seek((long) (4096 + (i + j * 32) * 4));
         this.c.writeInt(k);
     }
 
-    public void c() {
+    public void c() throws IOException {
         if (this.c != null) {
             this.c.close();
         }
 
     }
+
+    class ChunkBuffer extends ByteArrayOutputStream {
+
+        private int b;
+        private int c;
+
+        public ChunkBuffer(int i, int j) {
+            super(8096);
+            this.b = i;
+            this.c = j;
+        }
+
+        public void close() {
+            RegionFile.this.a(this.b, this.c, this.buf, this.count);
+        }
+    }
 }
