--- a/net/minecraft/server/CrashReport.java
+++ b/net/minecraft/server/CrashReport.java
@@ -5,6 +5,8 @@
 import java.io.FileWriter;
 import java.io.PrintWriter;
 import java.io.StringWriter;
+import java.lang.management.ManagementFactory;
+import java.lang.management.RuntimeMXBean;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Iterator;
@@ -21,7 +23,7 @@
     private final String b;
     private final Throwable c;
     private final CrashReportSystemDetails d = new CrashReportSystemDetails(this, "System Details");
-    private final List e = Lists.newArrayList();
+    private final List<CrashReportSystemDetails> e = Lists.newArrayList();
     private File f;
     private boolean g = true;
     private StackTraceElement[] h = new StackTraceElement[0];
@@ -33,13 +35,104 @@
     }
 
     private void h() {
-        this.d.a("Minecraft Version", (Callable) (new CrashReportVersion(this)));
-        this.d.a("Operating System", (Callable) (new CrashReportOperatingSystem(this)));
-        this.d.a("Java Version", (Callable) (new CrashReportJavaVersion(this)));
-        this.d.a("Java VM Version", (Callable) (new CrashReportJavaVMVersion(this)));
-        this.d.a("Memory", (Callable) (new CrashReportMemory(this)));
-        this.d.a("JVM Flags", (Callable) (new CrashReportJVMFlags(this)));
-        this.d.a("IntCache", (Callable) (new CrashReportIntCacheSize(this)));
+        this.d.a("Minecraft Version", new Callable() {
+            public String a() {
+                return "1.8.3";
+            }
+
+            public Object call() throws Exception {
+                return this.a();
+            }
+        });
+        this.d.a("Operating System", new Callable() {
+            public String a() {
+                return System.getProperty("os.name") + " (" + System.getProperty("os.arch") + ") version " + System.getProperty("os.version");
+            }
+
+            public Object call() throws Exception {
+                return this.a();
+            }
+        });
+        this.d.a("CPU", new Callable() {
+            public String a() {
+                return SystemUtils.a();
+            }
+
+            public Object call() throws Exception {
+                return this.a();
+            }
+        });
+        this.d.a("Java Version", new Callable() {
+            public String a() {
+                return System.getProperty("java.version") + ", " + System.getProperty("java.vendor");
+            }
+
+            public Object call() throws Exception {
+                return this.a();
+            }
+        });
+        this.d.a("Java VM Version", new Callable() {
+            public String a() {
+                return System.getProperty("java.vm.name") + " (" + System.getProperty("java.vm.info") + "), " + System.getProperty("java.vm.vendor");
+            }
+
+            public Object call() throws Exception {
+                return this.a();
+            }
+        });
+        this.d.a("Memory", new Callable() {
+            public String a() {
+                Runtime runtime = Runtime.getRuntime();
+                long i = runtime.maxMemory();
+                long j = runtime.totalMemory();
+                long k = runtime.freeMemory();
+                long l = i / 1024L / 1024L;
+                long i1 = j / 1024L / 1024L;
+                long j1 = k / 1024L / 1024L;
+
+                return k + " bytes (" + j1 + " MB) / " + j + " bytes (" + i1 + " MB) up to " + i + " bytes (" + l + " MB)";
+            }
+
+            public Object call() throws Exception {
+                return this.a();
+            }
+        });
+        this.d.a("JVM Flags", new Callable() {
+            public String a() {
+                RuntimeMXBean runtimemxbean = ManagementFactory.getRuntimeMXBean();
+                List list = runtimemxbean.getInputArguments();
+                int i = 0;
+                StringBuilder stringbuilder = new StringBuilder();
+                Iterator iterator = list.iterator();
+
+                while (iterator.hasNext()) {
+                    String s = (String) iterator.next();
+
+                    if (s.startsWith("-X")) {
+                        if (i++ > 0) {
+                            stringbuilder.append(" ");
+                        }
+
+                        stringbuilder.append(s);
+                    }
+                }
+
+                return String.format("%d total; %s", new Object[] { Integer.valueOf(i), stringbuilder.toString()});
+            }
+
+            public Object call() throws Exception {
+                return this.a();
+            }
+        });
+        this.d.a("IntCache", new Callable() {
+            public String a() throws Exception {
+                return IntCache.b();
+            }
+
+            public Object call() throws Exception {
+                return this.a();
+            }
+        });
     }
 
     public String a() {
