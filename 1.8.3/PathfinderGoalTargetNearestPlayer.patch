--- a/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java
+++ b/net/minecraft/server/PathfinderGoalTargetNearestPlayer.java
@@ -10,8 +10,8 @@
 
     private static final Logger a = LogManager.getLogger();
     private EntityInsentient b;
-    private final Predicate c;
-    private final DistanceComparator d;
+    private final Predicate<Entity> c;
+    private final PathfinderGoalNearestAttackableTarget.DistanceComparator d;
     private EntityLiving e;
 
     public PathfinderGoalTargetNearestPlayer(EntityInsentient entityinsentient) {
@@ -20,8 +20,38 @@
             PathfinderGoalTargetNearestPlayer.a.warn("Use NearestAttackableTargetGoal.class for PathfinerMob mobs!");
         }
 
-        this.c = new PathfinderGoalTargetNearestPlayerPlayerDetector(this);
-        this.d = new DistanceComparator(entityinsentient);
+        this.c = new Predicate() {
+            public boolean a(Entity entity) {
+                if (!(entity instanceof EntityHuman)) {
+                    return false;
+                } else if (((EntityHuman) entity).abilities.isInvulnerable) {
+                    return false;
+                } else {
+                    double d0 = PathfinderGoalTargetNearestPlayer.this.f();
+
+                    if (entity.isSneaking()) {
+                        d0 *= 0.800000011920929D;
+                    }
+
+                    if (entity.isInvisible()) {
+                        float f = ((EntityHuman) entity).bY();
+
+                        if (f < 0.1F) {
+                            f = 0.1F;
+                        }
+
+                        d0 *= (double) (0.7F * f);
+                    }
+
+                    return (double) entity.g(PathfinderGoalTargetNearestPlayer.this.b) > d0 ? false : PathfinderGoalTarget.a(PathfinderGoalTargetNearestPlayer.this.b, (EntityLiving) entity, false, true);
+                }
+            }
+
+            public boolean apply(Object object) {
+                return this.a((Entity) object);
+            }
+        };
+        this.d = new PathfinderGoalNearestAttackableTarget.DistanceComparator(entityinsentient);
     }
 
     public boolean a() {
@@ -44,6 +74,8 @@
             return false;
         } else if (!entityliving.isAlive()) {
             return false;
+        } else if (entityliving instanceof EntityHuman && ((EntityHuman) entityliving).abilities.isInvulnerable) {
+            return false;
         } else {
             ScoreboardTeamBase scoreboardteambase = this.b.getScoreboardTeam();
             ScoreboardTeamBase scoreboardteambase1 = entityliving.getScoreboardTeam();
@@ -73,8 +105,4 @@
 
         return attributeinstance == null ? 16.0D : attributeinstance.getValue();
     }
-
-    static EntityInsentient a(PathfinderGoalTargetNearestPlayer pathfindergoaltargetnearestplayer) {
-        return pathfindergoaltargetnearestplayer.b;
-    }
 }
