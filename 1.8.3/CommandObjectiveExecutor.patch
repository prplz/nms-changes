--- a/net/minecraft/server/CommandObjectiveExecutor.java
+++ b/net/minecraft/server/CommandObjectiveExecutor.java
@@ -2,7 +2,7 @@
 
 public class CommandObjectiveExecutor {
 
-    private static final int a = EnumCommandResult.values().length;
+    private static final int a = CommandObjectiveExecutor.EnumCommandResult.values().length;
     private static final String[] b = new String[CommandObjectiveExecutor.a];
     private String[] c;
     private String[] d;
@@ -12,19 +12,61 @@
         this.d = CommandObjectiveExecutor.b;
     }
 
-    public void a(ICommandListener icommandlistener, EnumCommandResult enumcommandresult, int i) {
-        String s = this.c[enumcommandresult.a()];
+    public void a(final ICommandListener icommandlistener, CommandObjectiveExecutor.EnumCommandResult commandobjectiveexecutor_enumcommandresult, int i) {
+        String s = this.c[commandobjectiveexecutor_enumcommandresult.a()];
 
         if (s != null) {
+            ICommandListener icommandlistener1 = new ICommandListener() {
+                public String getName() {
+                    return icommandlistener.getName();
+                }
+
+                public IChatBaseComponent getScoreboardDisplayName() {
+                    return icommandlistener.getScoreboardDisplayName();
+                }
+
+                public void sendMessage(IChatBaseComponent ichatbasecomponent) {
+                    icommandlistener.sendMessage(ichatbasecomponent);
+                }
+
+                public boolean a(int i, String s) {
+                    return true;
+                }
+
+                public BlockPosition getChunkCoordinates() {
+                    return icommandlistener.getChunkCoordinates();
+                }
+
+                public Vec3D d() {
+                    return icommandlistener.d();
+                }
+
+                public World getWorld() {
+                    return icommandlistener.getWorld();
+                }
+
+                public Entity f() {
+                    return icommandlistener.f();
+                }
+
+                public boolean getSendCommandFeedback() {
+                    return icommandlistener.getSendCommandFeedback();
+                }
+
+                public void a(CommandObjectiveExecutor.EnumCommandResult commandobjectiveexecutor_enumcommandresult, int i) {
+                    icommandlistener.a(commandobjectiveexecutor_enumcommandresult, i);
+                }
+            };
+
             String s1;
 
             try {
-                s1 = CommandAbstract.e(icommandlistener, s);
+                s1 = CommandAbstract.e(icommandlistener1, s);
             } catch (ExceptionEntityNotFound exceptionentitynotfound) {
                 return;
             }
 
-            String s2 = this.d[enumcommandresult.a()];
+            String s2 = this.d[commandobjectiveexecutor_enumcommandresult.a()];
 
             if (s2 != null) {
                 Scoreboard scoreboard = icommandlistener.getWorld().getScoreboard();
@@ -44,19 +86,19 @@
     public void a(NBTTagCompound nbttagcompound) {
         if (nbttagcompound.hasKeyOfType("CommandStats", 10)) {
             NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("CommandStats");
-            EnumCommandResult[] aenumcommandresult = EnumCommandResult.values();
-            int i = aenumcommandresult.length;
+            CommandObjectiveExecutor.EnumCommandResult[] acommandobjectiveexecutor_enumcommandresult = CommandObjectiveExecutor.EnumCommandResult.values();
+            int i = acommandobjectiveexecutor_enumcommandresult.length;
 
             for (int j = 0; j < i; ++j) {
-                EnumCommandResult enumcommandresult = aenumcommandresult[j];
-                String s = enumcommandresult.b() + "Name";
-                String s1 = enumcommandresult.b() + "Objective";
+                CommandObjectiveExecutor.EnumCommandResult commandobjectiveexecutor_enumcommandresult = acommandobjectiveexecutor_enumcommandresult[j];
+                String s = commandobjectiveexecutor_enumcommandresult.b() + "Name";
+                String s1 = commandobjectiveexecutor_enumcommandresult.b() + "Objective";
 
                 if (nbttagcompound1.hasKeyOfType(s, 8) && nbttagcompound1.hasKeyOfType(s1, 8)) {
                     String s2 = nbttagcompound1.getString(s);
                     String s3 = nbttagcompound1.getString(s1);
 
-                    a(this, enumcommandresult, s2, s3);
+                    a(this, commandobjectiveexecutor_enumcommandresult, s2, s3);
                 }
             }
 
@@ -65,17 +107,17 @@
 
     public void b(NBTTagCompound nbttagcompound) {
         NBTTagCompound nbttagcompound1 = new NBTTagCompound();
-        EnumCommandResult[] aenumcommandresult = EnumCommandResult.values();
-        int i = aenumcommandresult.length;
+        CommandObjectiveExecutor.EnumCommandResult[] acommandobjectiveexecutor_enumcommandresult = CommandObjectiveExecutor.EnumCommandResult.values();
+        int i = acommandobjectiveexecutor_enumcommandresult.length;
 
         for (int j = 0; j < i; ++j) {
-            EnumCommandResult enumcommandresult = aenumcommandresult[j];
-            String s = this.c[enumcommandresult.a()];
-            String s1 = this.d[enumcommandresult.a()];
+            CommandObjectiveExecutor.EnumCommandResult commandobjectiveexecutor_enumcommandresult = acommandobjectiveexecutor_enumcommandresult[j];
+            String s = this.c[commandobjectiveexecutor_enumcommandresult.a()];
+            String s1 = this.d[commandobjectiveexecutor_enumcommandresult.a()];
 
             if (s != null && s1 != null) {
-                nbttagcompound1.setString(enumcommandresult.b() + "Name", s);
-                nbttagcompound1.setString(enumcommandresult.b() + "Objective", s1);
+                nbttagcompound1.setString(commandobjectiveexecutor_enumcommandresult.b() + "Name", s);
+                nbttagcompound1.setString(commandobjectiveexecutor_enumcommandresult.b() + "Objective", s1);
             }
         }
 
@@ -85,32 +127,32 @@
 
     }
 
-    public static void a(CommandObjectiveExecutor commandobjectiveexecutor, EnumCommandResult enumcommandresult, String s, String s1) {
+    public static void a(CommandObjectiveExecutor commandobjectiveexecutor, CommandObjectiveExecutor.EnumCommandResult commandobjectiveexecutor_enumcommandresult, String s, String s1) {
         if (s != null && s.length() != 0 && s1 != null && s1.length() != 0) {
             if (commandobjectiveexecutor.c == CommandObjectiveExecutor.b || commandobjectiveexecutor.d == CommandObjectiveExecutor.b) {
                 commandobjectiveexecutor.c = new String[CommandObjectiveExecutor.a];
                 commandobjectiveexecutor.d = new String[CommandObjectiveExecutor.a];
             }
 
-            commandobjectiveexecutor.c[enumcommandresult.a()] = s;
-            commandobjectiveexecutor.d[enumcommandresult.a()] = s1;
+            commandobjectiveexecutor.c[commandobjectiveexecutor_enumcommandresult.a()] = s;
+            commandobjectiveexecutor.d[commandobjectiveexecutor_enumcommandresult.a()] = s1;
         } else {
-            a(commandobjectiveexecutor, enumcommandresult);
+            a(commandobjectiveexecutor, commandobjectiveexecutor_enumcommandresult);
         }
     }
 
-    private static void a(CommandObjectiveExecutor commandobjectiveexecutor, EnumCommandResult enumcommandresult) {
+    private static void a(CommandObjectiveExecutor commandobjectiveexecutor, CommandObjectiveExecutor.EnumCommandResult commandobjectiveexecutor_enumcommandresult) {
         if (commandobjectiveexecutor.c != CommandObjectiveExecutor.b && commandobjectiveexecutor.d != CommandObjectiveExecutor.b) {
-            commandobjectiveexecutor.c[enumcommandresult.a()] = null;
-            commandobjectiveexecutor.d[enumcommandresult.a()] = null;
+            commandobjectiveexecutor.c[commandobjectiveexecutor_enumcommandresult.a()] = null;
+            commandobjectiveexecutor.d[commandobjectiveexecutor_enumcommandresult.a()] = null;
             boolean flag = true;
-            EnumCommandResult[] aenumcommandresult = EnumCommandResult.values();
-            int i = aenumcommandresult.length;
+            CommandObjectiveExecutor.EnumCommandResult[] acommandobjectiveexecutor_enumcommandresult = CommandObjectiveExecutor.EnumCommandResult.values();
+            int i = acommandobjectiveexecutor_enumcommandresult.length;
 
             for (int j = 0; j < i; ++j) {
-                EnumCommandResult enumcommandresult1 = aenumcommandresult[j];
+                CommandObjectiveExecutor.EnumCommandResult commandobjectiveexecutor_enumcommandresult1 = acommandobjectiveexecutor_enumcommandresult[j];
 
-                if (commandobjectiveexecutor.c[enumcommandresult1.a()] != null && commandobjectiveexecutor.d[enumcommandresult1.a()] != null) {
+                if (commandobjectiveexecutor.c[commandobjectiveexecutor_enumcommandresult1.a()] != null && commandobjectiveexecutor.d[commandobjectiveexecutor_enumcommandresult1.a()] != null) {
                     flag = false;
                     break;
                 }
@@ -125,14 +167,65 @@
     }
 
     public void a(CommandObjectiveExecutor commandobjectiveexecutor) {
-        EnumCommandResult[] aenumcommandresult = EnumCommandResult.values();
-        int i = aenumcommandresult.length;
+        CommandObjectiveExecutor.EnumCommandResult[] acommandobjectiveexecutor_enumcommandresult = CommandObjectiveExecutor.EnumCommandResult.values();
+        int i = acommandobjectiveexecutor_enumcommandresult.length;
 
         for (int j = 0; j < i; ++j) {
-            EnumCommandResult enumcommandresult = aenumcommandresult[j];
+            CommandObjectiveExecutor.EnumCommandResult commandobjectiveexecutor_enumcommandresult = acommandobjectiveexecutor_enumcommandresult[j];
+
+            a(this, commandobjectiveexecutor_enumcommandresult, commandobjectiveexecutor.c[commandobjectiveexecutor_enumcommandresult.a()], commandobjectiveexecutor.d[commandobjectiveexecutor_enumcommandresult.a()]);
+        }
 
-            a(this, enumcommandresult, commandobjectiveexecutor.c[enumcommandresult.a()], commandobjectiveexecutor.d[enumcommandresult.a()]);
+    }
+
+    public static enum EnumCommandResult {
+
+        SUCCESS_COUNT(0, "SuccessCount"), AFFECTED_BLOCKS(1, "AffectedBlocks"), AFFECTED_ENTITIES(2, "AffectedEntities"), AFFECTED_ITEMS(3, "AffectedItems"), QUERY_RESULT(4, "QueryResult");
+
+        final int f;
+        final String g;
+
+        private EnumCommandResult(int i, String s) {
+            this.f = i;
+            this.g = s;
+        }
+
+        public int a() {
+            return this.f;
+        }
+
+        public String b() {
+            return this.g;
+        }
+
+        public static String[] c() {
+            String[] astring = new String[values().length];
+            int i = 0;
+            CommandObjectiveExecutor.EnumCommandResult[] acommandobjectiveexecutor_enumcommandresult = values();
+            int j = acommandobjectiveexecutor_enumcommandresult.length;
+
+            for (int k = 0; k < j; ++k) {
+                CommandObjectiveExecutor.EnumCommandResult commandobjectiveexecutor_enumcommandresult = acommandobjectiveexecutor_enumcommandresult[k];
+
+                astring[i++] = commandobjectiveexecutor_enumcommandresult.b();
+            }
+
+            return astring;
         }
 
+        public static CommandObjectiveExecutor.EnumCommandResult a(String s) {
+            CommandObjectiveExecutor.EnumCommandResult[] acommandobjectiveexecutor_enumcommandresult = values();
+            int i = acommandobjectiveexecutor_enumcommandresult.length;
+
+            for (int j = 0; j < i; ++j) {
+                CommandObjectiveExecutor.EnumCommandResult commandobjectiveexecutor_enumcommandresult = acommandobjectiveexecutor_enumcommandresult[j];
+
+                if (commandobjectiveexecutor_enumcommandresult.b().equals(s)) {
+                    return commandobjectiveexecutor_enumcommandresult;
+                }
+            }
+
+            return null;
+        }
     }
 }
