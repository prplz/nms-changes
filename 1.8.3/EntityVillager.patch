--- a/net/minecraft/server/EntityVillager.java
+++ b/net/minecraft/server/EntityVillager.java
@@ -1,26 +1,27 @@
 package net.minecraft.server;
 
 import java.util.Iterator;
+import java.util.Random;
 
-public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
+public class EntityVillager extends EntityAgeable implements IMerchant, NPC {
 
     private int profession;
-    private boolean bm;
-    private boolean bn;
+    private boolean bo;
+    private boolean bp;
     Village village;
     private EntityHuman tradingPlayer;
-    private MerchantRecipeList bp;
-    private int bq;
-    private boolean br;
-    private boolean bs;
+    private MerchantRecipeList br;
+    private int bs;
+    private boolean bt;
+    private boolean bu;
     private int riches;
-    private String bu;
-    private int bv;
-    private int bw;
-    private boolean bx;
-    private boolean by;
-    public InventorySubcontainer inventory;
-    private static final IMerchantRecipeOption[][][][] bA = new IMerchantRecipeOption[][][][] { { { { new MerchantRecipeOptionBuy(Items.WHEAT, new MerchantOptionRandomRange(18, 22)), new MerchantRecipeOptionBuy(Items.POTATO, new MerchantOptionRandomRange(15, 19)), new MerchantRecipeOptionBuy(Items.CARROT, new MerchantOptionRandomRange(15, 19)), new MerchantRecipeOptionSell(Items.BREAD, new MerchantOptionRandomRange(-4, -2))}, { new MerchantRecipeOptionBuy(Item.getItemOf(Blocks.PUMPKIN), new MerchantOptionRandomRange(8, 13)), new MerchantRecipeOptionSell(Items.PUMPKIN_PIE, new MerchantOptionRandomRange(-3, -2))}, { new MerchantRecipeOptionBuy(Item.getItemOf(Blocks.MELON_BLOCK), new MerchantOptionRandomRange(7, 12)), new MerchantRecipeOptionSell(Items.APPLE, new MerchantOptionRandomRange(-5, -7))}, { new MerchantRecipeOptionSell(Items.COOKIE, new MerchantOptionRandomRange(-6, -10)), new MerchantRecipeOptionSell(Items.CAKE, new MerchantOptionRandomRange(1, 1))}}, { { new MerchantRecipeOptionBuy(Items.STRING, new MerchantOptionRandomRange(15, 20)), new MerchantRecipeOptionBuy(Items.COAL, new MerchantOptionRandomRange(16, 24)), new MerchantRecipeOptionProcess(Items.FISH, new MerchantOptionRandomRange(6, 6), Items.COOKED_FISH, new MerchantOptionRandomRange(6, 6))}, { new MerchantRecipeOptionEnchant(Items.FISHING_ROD, new MerchantOptionRandomRange(7, 8))}}, { { new MerchantRecipeOptionBuy(Item.getItemOf(Blocks.WOOL), new MerchantOptionRandomRange(16, 22)), new MerchantRecipeOptionSell(Items.SHEARS, new MerchantOptionRandomRange(3, 4))}, { new MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 0), new MerchantOptionRandomRange(1, 2)), new MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 1), new MerchantOptionRandomRange(1, 2)), new MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 2), new MerchantOptionRandomRange(1, 2)), new MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 3), new MerchantOptionRandomRange(1, 2)), new MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 4), new MerchantOptionRandomRange(1, 2)), new MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 5), new MerchantOptionRandomRange(1, 2)), new MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 6), new MerchantOptionRandomRange(1, 2)), new MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 7), new MerchantOptionRandomRange(1, 2)), new MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 8), new MerchantOptionRandomRange(1, 2)), new MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 9), new MerchantOptionRandomRange(1, 2)), new MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 10), new MerchantOptionRandomRange(1, 2)), new MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 11), new MerchantOptionRandomRange(1, 2)), new MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 12), new MerchantOptionRandomRange(1, 2)), new MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 13), new MerchantOptionRandomRange(1, 2)), new MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 14), new MerchantOptionRandomRange(1, 2)), new MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 15), new MerchantOptionRandomRange(1, 2))}}, { { new MerchantRecipeOptionBuy(Items.STRING, new MerchantOptionRandomRange(15, 20)), new MerchantRecipeOptionSell(Items.ARROW, new MerchantOptionRandomRange(-12, -8))}, { new MerchantRecipeOptionSell(Items.BOW, new MerchantOptionRandomRange(2, 3)), new MerchantRecipeOptionProcess(Item.getItemOf(Blocks.GRAVEL), new MerchantOptionRandomRange(10, 10), Items.FLINT, new MerchantOptionRandomRange(6, 10))}}}, { { { new MerchantRecipeOptionBuy(Items.PAPER, new MerchantOptionRandomRange(24, 36)), new MerchantRecipeOptionBook()}, { new MerchantRecipeOptionBuy(Items.BOOK, new MerchantOptionRandomRange(8, 10)), new MerchantRecipeOptionSell(Items.COMPASS, new MerchantOptionRandomRange(10, 12)), new MerchantRecipeOptionSell(Item.getItemOf(Blocks.BOOKSHELF), new MerchantOptionRandomRange(3, 4))}, { new MerchantRecipeOptionBuy(Items.WRITTEN_BOOK, new MerchantOptionRandomRange(2, 2)), new MerchantRecipeOptionSell(Items.CLOCK, new MerchantOptionRandomRange(10, 12)), new MerchantRecipeOptionSell(Item.getItemOf(Blocks.GLASS), new MerchantOptionRandomRange(-5, -3))}, { new MerchantRecipeOptionBook()}, { new MerchantRecipeOptionBook()}, { new MerchantRecipeOptionSell(Items.NAME_TAG, new MerchantOptionRandomRange(20, 22))}}}, { { { new MerchantRecipeOptionBuy(Items.ROTTEN_FLESH, new MerchantOptionRandomRange(36, 40)), new MerchantRecipeOptionBuy(Items.GOLD_INGOT, new MerchantOptionRandomRange(8, 10))}, { new MerchantRecipeOptionSell(Items.REDSTONE, new MerchantOptionRandomRange(-4, -1)), new MerchantRecipeOptionSell(new ItemStack(Items.DYE, 1, EnumColor.BLUE.getInvColorIndex()), new MerchantOptionRandomRange(-2, -1))}, { new MerchantRecipeOptionSell(Items.ENDER_EYE, new MerchantOptionRandomRange(7, 11)), new MerchantRecipeOptionSell(Item.getItemOf(Blocks.GLOWSTONE), new MerchantOptionRandomRange(-3, -1))}, { new MerchantRecipeOptionSell(Items.EXPERIENCE_BOTTLE, new MerchantOptionRandomRange(3, 11))}}}, { { { new MerchantRecipeOptionBuy(Items.COAL, new MerchantOptionRandomRange(16, 24)), new MerchantRecipeOptionSell(Items.IRON_HELMET, new MerchantOptionRandomRange(4, 6))}, { new MerchantRecipeOptionBuy(Items.IRON_INGOT, new MerchantOptionRandomRange(7, 9)), new MerchantRecipeOptionSell(Items.IRON_CHESTPLATE, new MerchantOptionRandomRange(10, 14))}, { new MerchantRecipeOptionBuy(Items.DIAMOND, new MerchantOptionRandomRange(3, 4)), new MerchantRecipeOptionEnchant(Items.DIAMOND_CHESTPLATE, new MerchantOptionRandomRange(16, 19))}, { new MerchantRecipeOptionSell(Items.CHAINMAIL_BOOTS, new MerchantOptionRandomRange(5, 7)), new MerchantRecipeOptionSell(Items.CHAINMAIL_LEGGINGS, new MerchantOptionRandomRange(9, 11)), new MerchantRecipeOptionSell(Items.CHAINMAIL_HELMET, new MerchantOptionRandomRange(5, 7)), new MerchantRecipeOptionSell(Items.CHAINMAIL_CHESTPLATE, new MerchantOptionRandomRange(11, 15))}}, { { new MerchantRecipeOptionBuy(Items.COAL, new MerchantOptionRandomRange(16, 24)), new MerchantRecipeOptionSell(Items.IRON_AXE, new MerchantOptionRandomRange(6, 8))}, { new MerchantRecipeOptionBuy(Items.IRON_INGOT, new MerchantOptionRandomRange(7, 9)), new MerchantRecipeOptionEnchant(Items.IRON_SWORD, new MerchantOptionRandomRange(9, 10))}, { new MerchantRecipeOptionBuy(Items.DIAMOND, new MerchantOptionRandomRange(3, 4)), new MerchantRecipeOptionEnchant(Items.DIAMOND_SWORD, new MerchantOptionRandomRange(12, 15)), new MerchantRecipeOptionEnchant(Items.DIAMOND_AXE, new MerchantOptionRandomRange(9, 12))}}, { { new MerchantRecipeOptionBuy(Items.COAL, new MerchantOptionRandomRange(16, 24)), new MerchantRecipeOptionEnchant(Items.IRON_SHOVEL, new MerchantOptionRandomRange(5, 7))}, { new MerchantRecipeOptionBuy(Items.IRON_INGOT, new MerchantOptionRandomRange(7, 9)), new MerchantRecipeOptionEnchant(Items.IRON_PICKAXE, new MerchantOptionRandomRange(9, 11))}, { new MerchantRecipeOptionBuy(Items.DIAMOND, new MerchantOptionRandomRange(3, 4)), new MerchantRecipeOptionEnchant(Items.DIAMOND_PICKAXE, new MerchantOptionRandomRange(12, 15))}}}, { { { new MerchantRecipeOptionBuy(Items.PORKCHOP, new MerchantOptionRandomRange(14, 18)), new MerchantRecipeOptionBuy(Items.CHICKEN, new MerchantOptionRandomRange(14, 18))}, { new MerchantRecipeOptionBuy(Items.COAL, new MerchantOptionRandomRange(16, 24)), new MerchantRecipeOptionSell(Items.COOKED_PORKCHOP, new MerchantOptionRandomRange(-7, -5)), new MerchantRecipeOptionSell(Items.COOKED_CHICKEN, new MerchantOptionRandomRange(-8, -6))}}, { { new MerchantRecipeOptionBuy(Items.LEATHER, new MerchantOptionRandomRange(9, 12)), new MerchantRecipeOptionSell(Items.LEATHER_LEGGINGS, new MerchantOptionRandomRange(2, 4))}, { new MerchantRecipeOptionEnchant(Items.LEATHER_CHESTPLATE, new MerchantOptionRandomRange(7, 12))}, { new MerchantRecipeOptionSell(Items.SADDLE, new MerchantOptionRandomRange(8, 10))}}}};
+    private String bw;
+    private int bx;
+    private int by;
+    private boolean bz;
+    private boolean bA;
+    private InventorySubcontainer inventory;
+    private static final EntityVillager.IMerchantRecipeOption[][][][] bC = new EntityVillager.IMerchantRecipeOption[][][][] { { { { new EntityVillager.MerchantRecipeOptionBuy(Items.WHEAT, new EntityVillager.MerchantOptionRandomRange(18, 22)), new EntityVillager.MerchantRecipeOptionBuy(Items.POTATO, new EntityVillager.MerchantOptionRandomRange(15, 19)), new EntityVillager.MerchantRecipeOptionBuy(Items.CARROT, new EntityVillager.MerchantOptionRandomRange(15, 19)), new EntityVillager.MerchantRecipeOptionSell(Items.BREAD, new EntityVillager.MerchantOptionRandomRange(-4, -2))}, { new EntityVillager.MerchantRecipeOptionBuy(Item.getItemOf(Blocks.PUMPKIN), new EntityVillager.MerchantOptionRandomRange(8, 13)), new EntityVillager.MerchantRecipeOptionSell(Items.PUMPKIN_PIE, new EntityVillager.MerchantOptionRandomRange(-3, -2))}, { new EntityVillager.MerchantRecipeOptionBuy(Item.getItemOf(Blocks.MELON_BLOCK), new EntityVillager.MerchantOptionRandomRange(7, 12)), new EntityVillager.MerchantRecipeOptionSell(Items.APPLE, new EntityVillager.MerchantOptionRandomRange(-5, -7))}, { new EntityVillager.MerchantRecipeOptionSell(Items.COOKIE, new EntityVillager.MerchantOptionRandomRange(-6, -10)), new EntityVillager.MerchantRecipeOptionSell(Items.CAKE, new EntityVillager.MerchantOptionRandomRange(1, 1))}}, { { new EntityVillager.MerchantRecipeOptionBuy(Items.STRING, new EntityVillager.MerchantOptionRandomRange(15, 20)), new EntityVillager.MerchantRecipeOptionBuy(Items.COAL, new EntityVillager.MerchantOptionRandomRange(16, 24)), new EntityVillager.MerchantRecipeOptionProcess(Items.FISH, new EntityVillager.MerchantOptionRandomRange(6, 6), Items.COOKED_FISH, new EntityVillager.MerchantOptionRandomRange(6, 6))}, { new EntityVillager.MerchantRecipeOptionEnchant(Items.FISHING_ROD, new EntityVillager.MerchantOptionRandomRange(7, 8))}}, { { new EntityVillager.MerchantRecipeOptionBuy(Item.getItemOf(Blocks.WOOL), new EntityVillager.MerchantOptionRandomRange(16, 22)), new EntityVillager.MerchantRecipeOptionSell(Items.SHEARS, new EntityVillager.MerchantOptionRandomRange(3, 4))}, { new EntityVillager.MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 0), new EntityVillager.MerchantOptionRandomRange(1, 2)), new EntityVillager.MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 1), new EntityVillager.MerchantOptionRandomRange(1, 2)), new EntityVillager.MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 2), new EntityVillager.MerchantOptionRandomRange(1, 2)), new EntityVillager.MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 3), new EntityVillager.MerchantOptionRandomRange(1, 2)), new EntityVillager.MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 4), new EntityVillager.MerchantOptionRandomRange(1, 2)), new EntityVillager.MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 5), new EntityVillager.MerchantOptionRandomRange(1, 2)), new EntityVillager.MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 6), new EntityVillager.MerchantOptionRandomRange(1, 2)), new EntityVillager.MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 7), new EntityVillager.MerchantOptionRandomRange(1, 2)), new EntityVillager.MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 8), new EntityVillager.MerchantOptionRandomRange(1, 2)), new EntityVillager.MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 9), new EntityVillager.MerchantOptionRandomRange(1, 2)), new EntityVillager.MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 10), new EntityVillager.MerchantOptionRandomRange(1, 2)), new EntityVillager.MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 11), new EntityVillager.MerchantOptionRandomRange(1, 2)), new EntityVillager.MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 12), new EntityVillager.MerchantOptionRandomRange(1, 2)), new EntityVillager.MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 13), new EntityVillager.MerchantOptionRandomRange(1, 2)), new EntityVillager.MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 14), new EntityVillager.MerchantOptionRandomRange(1, 2)), new EntityVillager.MerchantRecipeOptionSell(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, 15), new EntityVillager.MerchantOptionRandomRange(1, 2))}}, { { new EntityVillager.MerchantRecipeOptionBuy(Items.STRING, new EntityVillager.MerchantOptionRandomRange(15, 20)), new EntityVillager.MerchantRecipeOptionSell(Items.ARROW, new EntityVillager.MerchantOptionRandomRange(-12, -8))}, { new EntityVillager.MerchantRecipeOptionSell(Items.BOW, new EntityVillager.MerchantOptionRandomRange(2, 3)), new EntityVillager.MerchantRecipeOptionProcess(Item.getItemOf(Blocks.GRAVEL), new EntityVillager.MerchantOptionRandomRange(10, 10), Items.FLINT, new EntityVillager.MerchantOptionRandomRange(6, 10))}}}, { { { new EntityVillager.MerchantRecipeOptionBuy(Items.PAPER, new EntityVillager.MerchantOptionRandomRange(24, 36)), new EntityVillager.MerchantRecipeOptionBook()}, { new EntityVillager.MerchantRecipeOptionBuy(Items.BOOK, new EntityVillager.MerchantOptionRandomRange(8, 10)), new EntityVillager.MerchantRecipeOptionSell(Items.COMPASS, new EntityVillager.MerchantOptionRandomRange(10, 12)), new EntityVillager.MerchantRecipeOptionSell(Item.getItemOf(Blocks.BOOKSHELF), new EntityVillager.MerchantOptionRandomRange(3, 4))}, { new EntityVillager.MerchantRecipeOptionBuy(Items.WRITTEN_BOOK, new EntityVillager.MerchantOptionRandomRange(2, 2)), new EntityVillager.MerchantRecipeOptionSell(Items.CLOCK, new EntityVillager.MerchantOptionRandomRange(10, 12)), new EntityVillager.MerchantRecipeOptionSell(Item.getItemOf(Blocks.GLASS), new EntityVillager.MerchantOptionRandomRange(-5, -3))}, { new EntityVillager.MerchantRecipeOptionBook()}, { new EntityVillager.MerchantRecipeOptionBook()}, { new EntityVillager.MerchantRecipeOptionSell(Items.NAME_TAG, new EntityVillager.MerchantOptionRandomRange(20, 22))}}}, { { { new EntityVillager.MerchantRecipeOptionBuy(Items.ROTTEN_FLESH, new EntityVillager.MerchantOptionRandomRange(36, 40)), new EntityVillager.MerchantRecipeOptionBuy(Items.GOLD_INGOT, new EntityVillager.MerchantOptionRandomRange(8, 10))}, { new EntityVillager.MerchantRecipeOptionSell(Items.REDSTONE, new EntityVillager.MerchantOptionRandomRange(-4, -1)), new EntityVillager.MerchantRecipeOptionSell(new ItemStack(Items.DYE, 1, EnumColor.BLUE.getInvColorIndex()), new EntityVillager.MerchantOptionRandomRange(-2, -1))}, { new EntityVillager.MerchantRecipeOptionSell(Items.ENDER_EYE, new EntityVillager.MerchantOptionRandomRange(7, 11)), new EntityVillager.MerchantRecipeOptionSell(Item.getItemOf(Blocks.GLOWSTONE), new EntityVillager.MerchantOptionRandomRange(-3, -1))}, { new EntityVillager.MerchantRecipeOptionSell(Items.EXPERIENCE_BOTTLE, new EntityVillager.MerchantOptionRandomRange(3, 11))}}}, { { { new EntityVillager.MerchantRecipeOptionBuy(Items.COAL, new EntityVillager.MerchantOptionRandomRange(16, 24)), new EntityVillager.MerchantRecipeOptionSell(Items.IRON_HELMET, new EntityVillager.MerchantOptionRandomRange(4, 6))}, { new EntityVillager.MerchantRecipeOptionBuy(Items.IRON_INGOT, new EntityVillager.MerchantOptionRandomRange(7, 9)), new EntityVillager.MerchantRecipeOptionSell(Items.IRON_CHESTPLATE, new EntityVillager.MerchantOptionRandomRange(10, 14))}, { new EntityVillager.MerchantRecipeOptionBuy(Items.DIAMOND, new EntityVillager.MerchantOptionRandomRange(3, 4)), new EntityVillager.MerchantRecipeOptionEnchant(Items.DIAMOND_CHESTPLATE, new EntityVillager.MerchantOptionRandomRange(16, 19))}, { new EntityVillager.MerchantRecipeOptionSell(Items.CHAINMAIL_BOOTS, new EntityVillager.MerchantOptionRandomRange(5, 7)), new EntityVillager.MerchantRecipeOptionSell(Items.CHAINMAIL_LEGGINGS, new EntityVillager.MerchantOptionRandomRange(9, 11)), new EntityVillager.MerchantRecipeOptionSell(Items.CHAINMAIL_HELMET, new EntityVillager.MerchantOptionRandomRange(5, 7)), new EntityVillager.MerchantRecipeOptionSell(Items.CHAINMAIL_CHESTPLATE, new EntityVillager.MerchantOptionRandomRange(11, 15))}}, { { new EntityVillager.MerchantRecipeOptionBuy(Items.COAL, new EntityVillager.MerchantOptionRandomRange(16, 24)), new EntityVillager.MerchantRecipeOptionSell(Items.IRON_AXE, new EntityVillager.MerchantOptionRandomRange(6, 8))}, { new EntityVillager.MerchantRecipeOptionBuy(Items.IRON_INGOT, new EntityVillager.MerchantOptionRandomRange(7, 9)), new EntityVillager.MerchantRecipeOptionEnchant(Items.IRON_SWORD, new EntityVillager.MerchantOptionRandomRange(9, 10))}, { new EntityVillager.MerchantRecipeOptionBuy(Items.DIAMOND, new EntityVillager.MerchantOptionRandomRange(3, 4)), new EntityVillager.MerchantRecipeOptionEnchant(Items.DIAMOND_SWORD, new EntityVillager.MerchantOptionRandomRange(12, 15)), new EntityVillager.MerchantRecipeOptionEnchant(Items.DIAMOND_AXE, new EntityVillager.MerchantOptionRandomRange(9, 12))}}, { { new EntityVillager.MerchantRecipeOptionBuy(Items.COAL, new EntityVillager.MerchantOptionRandomRange(16, 24)), new EntityVillager.MerchantRecipeOptionEnchant(Items.IRON_SHOVEL, new EntityVillager.MerchantOptionRandomRange(5, 7))}, { new EntityVillager.MerchantRecipeOptionBuy(Items.IRON_INGOT, new EntityVillager.MerchantOptionRandomRange(7, 9)), new EntityVillager.MerchantRecipeOptionEnchant(Items.IRON_PICKAXE, new EntityVillager.MerchantOptionRandomRange(9, 11))}, { new EntityVillager.MerchantRecipeOptionBuy(Items.DIAMOND, new EntityVillager.MerchantOptionRandomRange(3, 4)), new EntityVillager.MerchantRecipeOptionEnchant(Items.DIAMOND_PICKAXE, new EntityVillager.MerchantOptionRandomRange(12, 15))}}}, { { { new EntityVillager.MerchantRecipeOptionBuy(Items.PORKCHOP, new EntityVillager.MerchantOptionRandomRange(14, 18)), new EntityVillager.MerchantRecipeOptionBuy(Items.CHICKEN, new EntityVillager.MerchantOptionRandomRange(14, 18))}, { new EntityVillager.MerchantRecipeOptionBuy(Items.COAL, new EntityVillager.MerchantOptionRandomRange(16, 24)), new EntityVillager.MerchantRecipeOptionSell(Items.COOKED_PORKCHOP, new EntityVillager.MerchantOptionRandomRange(-7, -5)), new EntityVillager.MerchantRecipeOptionSell(Items.COOKED_CHICKEN, new EntityVillager.MerchantOptionRandomRange(-8, -6))}}, { { new EntityVillager.MerchantRecipeOptionBuy(Items.LEATHER, new EntityVillager.MerchantOptionRandomRange(9, 12)), new EntityVillager.MerchantRecipeOptionSell(Items.LEATHER_LEGGINGS, new EntityVillager.MerchantOptionRandomRange(2, 4))}, { new EntityVillager.MerchantRecipeOptionEnchant(Items.LEATHER_CHESTPLATE, new EntityVillager.MerchantOptionRandomRange(7, 12))}, { new EntityVillager.MerchantRecipeOptionSell(Items.SADDLE, new EntityVillager.MerchantOptionRandomRange(8, 10))}}}};
 
     public EntityVillager(World world) {
         this(world, 0);
@@ -30,11 +31,11 @@
         super(world);
         this.inventory = new InventorySubcontainer("Items", false, 8);
         this.setProfession(i);
-        this.a(0.6F, 1.8F);
+        this.setSize(0.6F, 1.8F);
         ((Navigation) this.getNavigation()).b(true);
         ((Navigation) this.getNavigation()).a(true);
         this.goalSelector.a(0, new PathfinderGoalFloat(this));
-        this.goalSelector.a(1, new PathfinderGoalAvoidTarget(this, new EntityVillagerInnerClass1(this), 8.0F, 0.6D, 0.6D));
+        this.goalSelector.a(1, new PathfinderGoalAvoidTarget(this, EntityZombie.class, 8.0F, 0.6D, 0.6D));
         this.goalSelector.a(1, new PathfinderGoalTradeWithPlayer(this));
         this.goalSelector.a(1, new PathfinderGoalLookAtTradingPlayer(this));
         this.goalSelector.a(2, new PathfinderGoalMoveIndoors(this));
@@ -50,9 +51,9 @@
         this.j(true);
     }
 
-    private void ct() {
-        if (!this.by) {
-            this.by = true;
+    private void cv() {
+        if (!this.bA) {
+            this.bA = true;
             if (this.isBaby()) {
                 this.goalSelector.a(8, new PathfinderGoalPlay(this, 0.32D));
             } else if (this.getProfession() == 0) {
@@ -70,8 +71,8 @@
         super.n();
     }
 
-    protected void aW() {
-        super.aW();
+    protected void initAttributes() {
+        super.initAttributes();
         this.getAttributeInstance(GenericAttributes.d).setValue(0.5D);
     }
 
@@ -83,23 +84,23 @@
             this.profession = 70 + this.random.nextInt(50);
             this.village = this.world.ae().getClosestVillage(blockposition, 32);
             if (this.village == null) {
-                this.ch();
+                this.cj();
             } else {
                 BlockPosition blockposition1 = this.village.a();
 
                 this.a(blockposition1, (int) ((float) this.village.b() * 1.0F));
-                if (this.bx) {
-                    this.bx = false;
+                if (this.bz) {
+                    this.bz = false;
                     this.village.b(5);
                 }
             }
         }
 
-        if (!this.cm() && this.bq > 0) {
-            --this.bq;
-            if (this.bq <= 0) {
-                if (this.br) {
-                    Iterator iterator = this.bp.iterator();
+        if (!this.co() && this.bs > 0) {
+            --this.bs;
+            if (this.bs <= 0) {
+                if (this.bt) {
+                    Iterator iterator = this.br.iterator();
 
                     while (iterator.hasNext()) {
                         MerchantRecipe merchantrecipe = (MerchantRecipe) iterator.next();
@@ -109,11 +110,11 @@
                         }
                     }
 
-                    this.cu();
-                    this.br = false;
-                    if (this.village != null && this.bu != null) {
+                    this.cw();
+                    this.bt = false;
+                    if (this.village != null && this.bw != null) {
                         this.world.broadcastEntityEffect(this, (byte) 14);
-                        this.village.a(this.bu, 1);
+                        this.village.a(this.bw, 1);
                     }
                 }
 
@@ -128,8 +129,8 @@
         ItemStack itemstack = entityhuman.inventory.getItemInHand();
         boolean flag = itemstack != null && itemstack.getItem() == Items.SPAWN_EGG;
 
-        if (!flag && this.isAlive() && !this.cm() && !this.isBaby()) {
-            if (!this.world.isStatic && (this.bp == null || this.bp.size() > 0)) {
+        if (!flag && this.isAlive() && !this.co() && !this.isBaby()) {
+            if (!this.world.isClientSide && (this.br == null || this.br.size() > 0)) {
                 this.a_(entityhuman);
                 entityhuman.openTrade(this);
             }
@@ -150,11 +151,11 @@
         super.b(nbttagcompound);
         nbttagcompound.setInt("Profession", this.getProfession());
         nbttagcompound.setInt("Riches", this.riches);
-        nbttagcompound.setInt("Career", this.bv);
-        nbttagcompound.setInt("CareerLevel", this.bw);
-        nbttagcompound.setBoolean("Willing", this.bs);
-        if (this.bp != null) {
-            nbttagcompound.set("Offers", this.bp.a());
+        nbttagcompound.setInt("Career", this.bx);
+        nbttagcompound.setInt("CareerLevel", this.by);
+        nbttagcompound.setBoolean("Willing", this.bu);
+        if (this.br != null) {
+            nbttagcompound.set("Offers", this.br.a());
         }
 
         NBTTagList nbttaglist = new NBTTagList();
@@ -174,13 +175,13 @@
         super.a(nbttagcompound);
         this.setProfession(nbttagcompound.getInt("Profession"));
         this.riches = nbttagcompound.getInt("Riches");
-        this.bv = nbttagcompound.getInt("Career");
-        this.bw = nbttagcompound.getInt("CareerLevel");
-        this.bs = nbttagcompound.getBoolean("Willing");
+        this.bx = nbttagcompound.getInt("Career");
+        this.by = nbttagcompound.getInt("CareerLevel");
+        this.bu = nbttagcompound.getBoolean("Willing");
         if (nbttagcompound.hasKeyOfType("Offers", 10)) {
             NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("Offers");
 
-            this.bp = new MerchantRecipeList(nbttagcompound1);
+            this.br = new MerchantRecipeList(nbttagcompound1);
         }
 
         NBTTagList nbttaglist = nbttagcompound.getList("Inventory", 10);
@@ -194,7 +195,7 @@
         }
 
         this.j(true);
-        this.ct();
+        this.cv();
     }
 
     protected boolean isTypeNotPersistent() {
@@ -202,14 +203,14 @@
     }
 
     protected String z() {
-        return this.cm() ? "mob.villager.haggle" : "mob.villager.idle";
+        return this.co() ? "mob.villager.haggle" : "mob.villager.idle";
     }
 
-    protected String bn() {
+    protected String bo() {
         return "mob.villager.hit";
     }
 
-    protected String bo() {
+    protected String bp() {
         return "mob.villager.death";
     }
 
@@ -221,20 +222,20 @@
         return Math.max(this.datawatcher.getInt(16) % 5, 0);
     }
 
-    public boolean ck() {
-        return this.bm;
+    public boolean cm() {
+        return this.bo;
     }
 
     public void l(boolean flag) {
-        this.bm = flag;
+        this.bo = flag;
     }
 
     public void m(boolean flag) {
-        this.bn = flag;
+        this.bp = flag;
     }
 
-    public boolean cl() {
-        return this.bn;
+    public boolean cn() {
+        return this.bp;
     }
 
     public void b(EntityLiving entityliving) {
@@ -283,16 +284,16 @@
         this.tradingPlayer = entityhuman;
     }
 
-    public EntityHuman u_() {
+    public EntityHuman v_() {
         return this.tradingPlayer;
     }
 
-    public boolean cm() {
+    public boolean co() {
         return this.tradingPlayer != null;
     }
 
     public boolean n(boolean flag) {
-        if (!this.bs && flag && this.cp()) {
+        if (!this.bu && flag && this.cr()) {
             boolean flag1 = false;
 
             for (int i = 0; i < this.inventory.getSize(); ++i) {
@@ -310,33 +311,33 @@
 
                 if (flag1) {
                     this.world.broadcastEntityEffect(this, (byte) 18);
-                    this.bs = true;
+                    this.bu = true;
                     break;
                 }
             }
         }
 
-        return this.bs;
+        return this.bu;
     }
 
     public void o(boolean flag) {
-        this.bs = flag;
+        this.bu = flag;
     }
 
     public void a(MerchantRecipe merchantrecipe) {
         merchantrecipe.g();
         this.a_ = -this.w();
-        this.makeSound("mob.villager.yes", this.bA(), this.bB());
+        this.makeSound("mob.villager.yes", this.bB(), this.bC());
         int i = 3 + this.random.nextInt(4);
 
         if (merchantrecipe.e() == 1 || this.random.nextInt(5) == 0) {
-            this.bq = 40;
-            this.br = true;
-            this.bs = true;
+            this.bs = 40;
+            this.bt = true;
+            this.bu = true;
             if (this.tradingPlayer != null) {
-                this.bu = this.tradingPlayer.getName();
+                this.bw = this.tradingPlayer.getName();
             } else {
-                this.bu = null;
+                this.bw = null;
             }
 
             i += 5;
@@ -353,52 +354,52 @@
     }
 
     public void a_(ItemStack itemstack) {
-        if (!this.world.isStatic && this.a_ > -this.w() + 20) {
+        if (!this.world.isClientSide && this.a_ > -this.w() + 20) {
             this.a_ = -this.w();
             if (itemstack != null) {
-                this.makeSound("mob.villager.yes", this.bA(), this.bB());
+                this.makeSound("mob.villager.yes", this.bB(), this.bC());
             } else {
-                this.makeSound("mob.villager.no", this.bA(), this.bB());
+                this.makeSound("mob.villager.no", this.bB(), this.bC());
             }
         }
 
     }
 
     public MerchantRecipeList getOffers(EntityHuman entityhuman) {
-        if (this.bp == null) {
-            this.cu();
+        if (this.br == null) {
+            this.cw();
         }
 
-        return this.bp;
+        return this.br;
     }
 
-    private void cu() {
-        IMerchantRecipeOption[][][] aimerchantrecipeoption = EntityVillager.bA[this.getProfession()];
+    private void cw() {
+        EntityVillager.IMerchantRecipeOption[][][] aentityvillager_imerchantrecipeoption = EntityVillager.bC[this.getProfession()];
 
-        if (this.bv != 0 && this.bw != 0) {
-            ++this.bw;
+        if (this.bx != 0 && this.by != 0) {
+            ++this.by;
         } else {
-            this.bv = this.random.nextInt(aimerchantrecipeoption.length) + 1;
-            this.bw = 1;
+            this.bx = this.random.nextInt(aentityvillager_imerchantrecipeoption.length) + 1;
+            this.by = 1;
         }
 
-        if (this.bp == null) {
-            this.bp = new MerchantRecipeList();
+        if (this.br == null) {
+            this.br = new MerchantRecipeList();
         }
 
-        int i = this.bv - 1;
-        int j = this.bw - 1;
-        IMerchantRecipeOption[][] aimerchantrecipeoption1 = aimerchantrecipeoption[i];
+        int i = this.bx - 1;
+        int j = this.by - 1;
+        EntityVillager.IMerchantRecipeOption[][] aentityvillager_imerchantrecipeoption1 = aentityvillager_imerchantrecipeoption[i];
 
-        if (j < aimerchantrecipeoption1.length) {
-            IMerchantRecipeOption[] aimerchantrecipeoption2 = aimerchantrecipeoption1[j];
-            IMerchantRecipeOption[] aimerchantrecipeoption3 = aimerchantrecipeoption2;
-            int k = aimerchantrecipeoption2.length;
+        if (j < aentityvillager_imerchantrecipeoption1.length) {
+            EntityVillager.IMerchantRecipeOption[] aentityvillager_imerchantrecipeoption2 = aentityvillager_imerchantrecipeoption1[j];
+            EntityVillager.IMerchantRecipeOption[] aentityvillager_imerchantrecipeoption3 = aentityvillager_imerchantrecipeoption2;
+            int k = aentityvillager_imerchantrecipeoption2.length;
 
             for (int l = 0; l < k; ++l) {
-                IMerchantRecipeOption imerchantrecipeoption = aimerchantrecipeoption3[l];
+                EntityVillager.IMerchantRecipeOption entityvillager_imerchantrecipeoption = aentityvillager_imerchantrecipeoption3[l];
 
-                imerchantrecipeoption.a(this.bp, this.random);
+                entityvillager_imerchantrecipeoption.a(this.br, this.random);
             }
         }
 
@@ -408,23 +409,27 @@
         String s = this.getCustomName();
 
         if (s != null && s.length() > 0) {
-            return new ChatComponentText(s);
+            ChatComponentText chatcomponenttext = new ChatComponentText(s);
+
+            chatcomponenttext.getChatModifier().setChatHoverable(this.aQ());
+            chatcomponenttext.getChatModifier().setInsertion(this.getUniqueID().toString());
+            return chatcomponenttext;
         } else {
-            if (this.bp == null) {
-                this.cu();
+            if (this.br == null) {
+                this.cw();
             }
 
             String s1 = null;
 
             switch (this.getProfession()) {
             case 0:
-                if (this.bv == 1) {
+                if (this.bx == 1) {
                     s1 = "farmer";
-                } else if (this.bv == 2) {
+                } else if (this.bx == 2) {
                     s1 = "fisherman";
-                } else if (this.bv == 3) {
+                } else if (this.bx == 3) {
                     s1 = "shepherd";
-                } else if (this.bv == 4) {
+                } else if (this.bx == 4) {
                     s1 = "fletcher";
                 }
                 break;
@@ -438,19 +443,19 @@
                 break;
 
             case 3:
-                if (this.bv == 1) {
+                if (this.bx == 1) {
                     s1 = "armor";
-                } else if (this.bv == 2) {
+                } else if (this.bx == 2) {
                     s1 = "weapon";
-                } else if (this.bv == 3) {
+                } else if (this.bx == 3) {
                     s1 = "tool";
                 }
                 break;
 
             case 4:
-                if (this.bv == 1) {
+                if (this.bx == 1) {
                     s1 = "butcher";
-                } else if (this.bv == 2) {
+                } else if (this.bx == 2) {
                     s1 = "leather";
                 }
             }
@@ -458,7 +463,7 @@
             if (s1 != null) {
                 ChatMessage chatmessage = new ChatMessage("entity.Villager." + s1, new Object[0]);
 
-                chatmessage.getChatModifier().setChatHoverable(this.aP());
+                chatmessage.getChatModifier().setChatHoverable(this.aQ());
                 chatmessage.getChatModifier().setInsertion(this.getUniqueID().toString());
                 return chatmessage;
             } else {
@@ -480,12 +485,12 @@
     public GroupDataEntity prepare(DifficultyDamageScaler difficultydamagescaler, GroupDataEntity groupdataentity) {
         groupdataentity = super.prepare(difficultydamagescaler, groupdataentity);
         this.setProfession(this.world.random.nextInt(5));
-        this.ct();
+        this.cv();
         return groupdataentity;
     }
 
-    public void cn() {
-        this.bx = true;
+    public void cp() {
+        this.bz = true;
     }
 
     public EntityVillager b(EntityAgeable entityageable) {
@@ -495,22 +500,28 @@
         return entityvillager;
     }
 
-    public boolean ca() {
+    public boolean cb() {
         return false;
     }
 
     public void onLightningStrike(EntityLightning entitylightning) {
-        if (!this.world.isStatic) {
+        if (!this.world.isClientSide && !this.dead) {
             EntityWitch entitywitch = new EntityWitch(this.world);
 
             entitywitch.setPositionRotation(this.locX, this.locY, this.locZ, this.yaw, this.pitch);
             entitywitch.prepare(this.world.E(new BlockPosition(entitywitch)), (GroupDataEntity) null);
+            entitywitch.k(this.ce());
+            if (this.hasCustomName()) {
+                entitywitch.setCustomName(this.getCustomName());
+                entitywitch.setCustomNameVisible(this.getCustomNameVisible());
+            }
+
             this.world.addEntity(entitywitch);
             this.die();
         }
     }
 
-    public InventorySubcontainer co() {
+    public InventorySubcontainer cq() {
         return this.inventory;
     }
 
@@ -534,15 +545,15 @@
         return item == Items.BREAD || item == Items.POTATO || item == Items.CARROT || item == Items.WHEAT || item == Items.WHEAT_SEEDS;
     }
 
-    public boolean cp() {
+    public boolean cr() {
         return this.s(1);
     }
 
-    public boolean cq() {
+    public boolean cs() {
         return this.s(2);
     }
 
-    public boolean cr() {
+    public boolean ct() {
         boolean flag = this.getProfession() == 0;
 
         return flag ? !this.s(5) : !this.s(1);
@@ -568,7 +579,7 @@
         return false;
     }
 
-    public boolean cs() {
+    public boolean cu() {
         for (int i = 0; i < this.inventory.getSize(); ++i) {
             ItemStack itemstack = this.inventory.getItem(i);
 
@@ -598,4 +609,152 @@
     public EntityAgeable createChild(EntityAgeable entityageable) {
         return this.b(entityageable);
     }
+
+    static class MerchantRecipeOptionProcess implements EntityVillager.IMerchantRecipeOption {
+
+        public ItemStack a;
+        public EntityVillager.MerchantOptionRandomRange b;
+        public ItemStack c;
+        public EntityVillager.MerchantOptionRandomRange d;
+
+        public MerchantRecipeOptionProcess(Item item, EntityVillager.MerchantOptionRandomRange entityvillager_merchantoptionrandomrange, Item item1, EntityVillager.MerchantOptionRandomRange entityvillager_merchantoptionrandomrange1) {
+            this.a = new ItemStack(item);
+            this.b = entityvillager_merchantoptionrandomrange;
+            this.c = new ItemStack(item1);
+            this.d = entityvillager_merchantoptionrandomrange1;
+        }
+
+        public void a(MerchantRecipeList merchantrecipelist, Random random) {
+            int i = 1;
+
+            if (this.b != null) {
+                i = this.b.a(random);
+            }
+
+            int j = 1;
+
+            if (this.d != null) {
+                j = this.d.a(random);
+            }
+
+            merchantrecipelist.add(new MerchantRecipe(new ItemStack(this.a.getItem(), i, this.a.getData()), new ItemStack(Items.EMERALD), new ItemStack(this.c.getItem(), j, this.c.getData())));
+        }
+    }
+
+    static class MerchantRecipeOptionBook implements EntityVillager.IMerchantRecipeOption {
+
+        public MerchantRecipeOptionBook() {}
+
+        public void a(MerchantRecipeList merchantrecipelist, Random random) {
+            Enchantment enchantment = Enchantment.b[random.nextInt(Enchantment.b.length)];
+            int i = MathHelper.nextInt(random, enchantment.getStartLevel(), enchantment.getMaxLevel());
+            ItemStack itemstack = Items.ENCHANTED_BOOK.a(new WeightedRandomEnchant(enchantment, i));
+            int j = 2 + random.nextInt(5 + i * 10) + 3 * i;
+
+            if (j > 64) {
+                j = 64;
+            }
+
+            merchantrecipelist.add(new MerchantRecipe(new ItemStack(Items.BOOK), new ItemStack(Items.EMERALD, j), itemstack));
+        }
+    }
+
+    static class MerchantRecipeOptionEnchant implements EntityVillager.IMerchantRecipeOption {
+
+        public ItemStack a;
+        public EntityVillager.MerchantOptionRandomRange b;
+
+        public MerchantRecipeOptionEnchant(Item item, EntityVillager.MerchantOptionRandomRange entityvillager_merchantoptionrandomrange) {
+            this.a = new ItemStack(item);
+            this.b = entityvillager_merchantoptionrandomrange;
+        }
+
+        public void a(MerchantRecipeList merchantrecipelist, Random random) {
+            int i = 1;
+
+            if (this.b != null) {
+                i = this.b.a(random);
+            }
+
+            ItemStack itemstack = new ItemStack(Items.EMERALD, i, 0);
+            ItemStack itemstack1 = new ItemStack(this.a.getItem(), 1, this.a.getData());
+
+            itemstack1 = EnchantmentManager.a(random, itemstack1, 5 + random.nextInt(15));
+            merchantrecipelist.add(new MerchantRecipe(itemstack, itemstack1));
+        }
+    }
+
+    static class MerchantRecipeOptionSell implements EntityVillager.IMerchantRecipeOption {
+
+        public ItemStack a;
+        public EntityVillager.MerchantOptionRandomRange b;
+
+        public MerchantRecipeOptionSell(Item item, EntityVillager.MerchantOptionRandomRange entityvillager_merchantoptionrandomrange) {
+            this.a = new ItemStack(item);
+            this.b = entityvillager_merchantoptionrandomrange;
+        }
+
+        public MerchantRecipeOptionSell(ItemStack itemstack, EntityVillager.MerchantOptionRandomRange entityvillager_merchantoptionrandomrange) {
+            this.a = itemstack;
+            this.b = entityvillager_merchantoptionrandomrange;
+        }
+
+        public void a(MerchantRecipeList merchantrecipelist, Random random) {
+            int i = 1;
+
+            if (this.b != null) {
+                i = this.b.a(random);
+            }
+
+            ItemStack itemstack;
+            ItemStack itemstack1;
+
+            if (i < 0) {
+                itemstack = new ItemStack(Items.EMERALD, 1, 0);
+                itemstack1 = new ItemStack(this.a.getItem(), -i, this.a.getData());
+            } else {
+                itemstack = new ItemStack(Items.EMERALD, i, 0);
+                itemstack1 = new ItemStack(this.a.getItem(), 1, this.a.getData());
+            }
+
+            merchantrecipelist.add(new MerchantRecipe(itemstack, itemstack1));
+        }
+    }
+
+    static class MerchantRecipeOptionBuy implements EntityVillager.IMerchantRecipeOption {
+
+        public Item a;
+        public EntityVillager.MerchantOptionRandomRange b;
+
+        public MerchantRecipeOptionBuy(Item item, EntityVillager.MerchantOptionRandomRange entityvillager_merchantoptionrandomrange) {
+            this.a = item;
+            this.b = entityvillager_merchantoptionrandomrange;
+        }
+
+        public void a(MerchantRecipeList merchantrecipelist, Random random) {
+            int i = 1;
+
+            if (this.b != null) {
+                i = this.b.a(random);
+            }
+
+            merchantrecipelist.add(new MerchantRecipe(new ItemStack(this.a, i, 0), Items.EMERALD));
+        }
+    }
+
+    interface IMerchantRecipeOption {
+
+        void a(MerchantRecipeList merchantrecipelist, Random random);
+    }
+
+    static class MerchantOptionRandomRange extends Tuple<Integer, Integer> {
+
+        public MerchantOptionRandomRange(int i, int j) {
+            super(Integer.valueOf(i), Integer.valueOf(j));
+        }
+
+        public int a(Random random) {
+            return ((Integer) this.a()).intValue() >= ((Integer) this.b()).intValue() ? ((Integer) this.a()).intValue() : ((Integer) this.a()).intValue() + random.nextInt(((Integer) this.b()).intValue() - ((Integer) this.a()).intValue() + 1);
+        }
+    }
 }
