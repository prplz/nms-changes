--- a/net/minecraft/server/CommandTestForBlocks.java
+++ b/net/minecraft/server/CommandTestForBlocks.java
@@ -18,11 +18,11 @@
         return "commands.compare.usage";
     }
 
-    public void execute(ICommandListener icommandlistener, String[] astring) {
+    public void execute(ICommandListener icommandlistener, String[] astring) throws CommandException {
         if (astring.length < 9) {
             throw new ExceptionUsage("commands.compare.usage", new Object[0]);
         } else {
-            icommandlistener.a(EnumCommandResult.AFFECTED_BLOCKS, 0);
+            icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_BLOCKS, 0);
             BlockPosition blockposition = a(icommandlistener, astring, 0, false);
             BlockPosition blockposition1 = a(icommandlistener, astring, 3, false);
             BlockPosition blockposition2 = a(icommandlistener, astring, 6, false);
@@ -44,19 +44,21 @@
 
                     i = 0;
                     BlockPosition blockposition3 = new BlockPosition(structureboundingbox1.a - structureboundingbox.a, structureboundingbox1.b - structureboundingbox.b, structureboundingbox1.c - structureboundingbox.c);
+                    BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
+                    BlockPosition.MutableBlockPosition blockposition_mutableblockposition1 = new BlockPosition.MutableBlockPosition();
 
                     for (int j = structureboundingbox.c; j <= structureboundingbox.f; ++j) {
                         for (int k = structureboundingbox.b; k <= structureboundingbox.e; ++k) {
                             for (int l = structureboundingbox.a; l <= structureboundingbox.d; ++l) {
-                                BlockPosition blockposition4 = new BlockPosition(l, k, j);
-                                BlockPosition blockposition5 = blockposition4.a(blockposition3);
+                                blockposition_mutableblockposition.c(l, k, j);
+                                blockposition_mutableblockposition1.c(l + blockposition3.getX(), k + blockposition3.getY(), j + blockposition3.getZ());
                                 boolean flag1 = false;
-                                IBlockData iblockdata = world.getType(blockposition4);
+                                IBlockData iblockdata = world.getType(blockposition_mutableblockposition);
 
                                 if (!flag || iblockdata.getBlock() != Blocks.AIR) {
-                                    if (iblockdata == world.getType(blockposition5)) {
-                                        TileEntity tileentity = world.getTileEntity(blockposition4);
-                                        TileEntity tileentity1 = world.getTileEntity(blockposition5);
+                                    if (iblockdata == world.getType(blockposition_mutableblockposition1)) {
+                                        TileEntity tileentity = world.getTileEntity(blockposition_mutableblockposition);
+                                        TileEntity tileentity1 = world.getTileEntity(blockposition_mutableblockposition1);
 
                                         if (tileentity != null && tileentity1 != null) {
                                             NBTTagCompound nbttagcompound = new NBTTagCompound();
@@ -90,7 +92,7 @@
                         }
                     }
 
-                    icommandlistener.a(EnumCommandResult.AFFECTED_BLOCKS, i);
+                    icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_BLOCKS, i);
                     a(icommandlistener, this, "commands.compare.success", new Object[] { Integer.valueOf(i)});
                 } else {
                     throw new CommandException("commands.compare.outOfWorld", new Object[0]);
@@ -101,7 +103,7 @@
         }
     }
 
-    public List tabComplete(ICommandListener icommandlistener, String[] astring, BlockPosition blockposition) {
+    public List<String> tabComplete(ICommandListener icommandlistener, String[] astring, BlockPosition blockposition) {
         return astring.length > 0 && astring.length <= 3 ? a(astring, 0, blockposition) : (astring.length > 3 && astring.length <= 6 ? a(astring, 3, blockposition) : (astring.length > 6 && astring.length <= 9 ? a(astring, 6, blockposition) : (astring.length == 10 ? a(astring, new String[] { "masked", "all"}) : null)));
     }
 }
