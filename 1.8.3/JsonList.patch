--- a/net/minecraft/server/JsonList.java
+++ b/net/minecraft/server/JsonList.java
@@ -6,34 +6,55 @@
 import com.google.common.io.Files;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
 import java.io.BufferedReader;
 import java.io.BufferedWriter;
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class JsonList {
+public class JsonList<K, V extends JsonListEntry<K>> {
 
     protected static final Logger a = LogManager.getLogger();
     protected final Gson b;
     private final File c;
-    private final Map d = Maps.newHashMap();
+    private final Map<String, V> d = Maps.newHashMap();
     private boolean e = true;
-    private static final ParameterizedType f = new JsonListType();
+    private static final ParameterizedType f = new ParameterizedType() {
+        public Type[] getActualTypeArguments() {
+            return new Type[] { JsonListEntry.class};
+        }
+
+        public Type getRawType() {
+            return List.class;
+        }
+
+        public Type getOwnerType() {
+            return null;
+        }
+    };
 
     public JsonList(File file) {
         this.c = file;
         GsonBuilder gsonbuilder = (new GsonBuilder()).setPrettyPrinting();
 
-        gsonbuilder.registerTypeHierarchyAdapter(JsonListEntry.class, new JsonListEntrySerializer(this, (JsonListType) null));
+        gsonbuilder.registerTypeHierarchyAdapter(JsonListEntry.class, new JsonList.JsonListEntrySerializer(null));
         this.b = gsonbuilder.create();
     }
 
@@ -49,8 +70,8 @@
         return this.c;
     }
 
-    public void add(JsonListEntry jsonlistentry) {
-        this.d.put(this.a(jsonlistentry.getKey()), jsonlistentry);
+    public void add(V v0) {
+        this.d.put(this.a(v0.getKey()), v0);
 
         try {
             this.save();
@@ -60,13 +81,13 @@
 
     }
 
-    public JsonListEntry get(Object object) {
+    public V get(K k0) {
         this.h();
-        return (JsonListEntry) this.d.get(this.a(object));
+        return (JsonListEntry) this.d.get(this.a(k0));
     }
 
-    public void remove(Object object) {
-        this.d.remove(this.a(object));
+    public void remove(K k0) {
+        this.d.remove(this.a(k0));
 
         try {
             this.save();
@@ -84,12 +105,12 @@
         return this.d.size() < 1;
     }
 
-    protected String a(Object object) {
-        return object.toString();
+    protected String a(K k0) {
+        return k0.toString();
     }
 
-    protected boolean d(Object object) {
-        return this.d.containsKey(this.a(object));
+    protected boolean d(K k0) {
+        return this.d.containsKey(this.a(k0));
     }
 
     private void h() {
@@ -114,15 +135,15 @@
 
     }
 
-    protected JsonListEntry a(JsonObject jsonobject) {
+    protected JsonListEntry<K> a(JsonObject jsonobject) {
         return new JsonListEntry((Object) null, jsonobject);
     }
 
-    protected Map e() {
+    protected Map<String, V> e() {
         return this.d;
     }
 
-    public void save() {
+    public void save() throws IOException {
         Collection collection = this.d.values();
         String s = this.b.toJson(collection);
         BufferedWriter bufferedwriter = null;
@@ -136,7 +157,7 @@
 
     }
 
-    public void load() {
+    public void load() throws FileNotFoundException {
         Collection collection = null;
         BufferedReader bufferedreader = null;
 
@@ -161,4 +182,39 @@
         }
 
     }
+
+    class JsonListEntrySerializer implements JsonDeserializer<JsonListEntry<K>>, JsonSerializer<JsonListEntry<K>> {
+
+        private JsonListEntrySerializer() {}
+
+        public JsonElement a(JsonListEntry<K> jsonlistentry, Type type, JsonSerializationContext jsonserializationcontext) {
+            JsonObject jsonobject = new JsonObject();
+
+            jsonlistentry.a(jsonobject);
+            return jsonobject;
+        }
+
+        public JsonListEntry<K> a(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+            if (jsonelement.isJsonObject()) {
+                JsonObject jsonobject = jsonelement.getAsJsonObject();
+                JsonListEntry jsonlistentry = JsonList.this.a(jsonobject);
+
+                return jsonlistentry;
+            } else {
+                return null;
+            }
+        }
+
+        public JsonElement serialize(Object object, Type type, JsonSerializationContext jsonserializationcontext) {
+            return this.a((JsonListEntry) object, type, jsonserializationcontext);
+        }
+
+        public Object deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+            return this.a(jsonelement, type, jsondeserializationcontext);
+        }
+
+        JsonListEntrySerializer(Object object) {
+            this();
+        }
+    }
 }
